"use strict";(self.webpackChunkmydatahack_blog_site=self.webpackChunkmydatahack_blog_site||[]).push([[4889],{22656:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>r,contentTitle:()=>c,default:()=>u,frontMatter:()=>a,metadata:()=>i,toc:()=>d});var s=t(74848),o=t(28453);const a={sidebar_position:14},c="Using act() in Jest Unit Tests with React-Dom",i={id:"Web/Frontend/act-jest-test",title:"Using act() in Jest Unit Tests with React-Dom",description:"react-dom/test-utils provides a helper, act() to make sure all the tasks like rendering, user events, and data fetching (these are considered as units of interaction with a user interface) to be processed and applied to the DOM before making an assertion.",source:"@site/docs/Web/Frontend/14.act-jest-test.md",sourceDirName:"Web/Frontend",slug:"/Web/Frontend/act-jest-test",permalink:"/mydatahack-old-blog/docs/Web/Frontend/act-jest-test",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:14,frontMatter:{sidebar_position:14},sidebar:"tutorialSidebar",previous:{title:"How to Make Scalable SVG React Components",permalink:"/mydatahack-old-blog/docs/Web/Frontend/scalable-svg-react-component"},next:{title:"Using React.VFC Instead of React.FC",permalink:"/mydatahack-old-blog/docs/Web/Frontend/vfc-vs-fc"}},r={},d=[];function l(e){const n={code:"code",h1:"h1",p:"p",pre:"pre",...(0,o.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.h1,{id:"using-act-in-jest-unit-tests-with-react-dom",children:"Using act() in Jest Unit Tests with React-Dom"}),"\n",(0,s.jsx)(n.p,{children:"react-dom/test-utils provides a helper, act() to make sure all the tasks like rendering, user events, and data fetching (these are considered as units of interaction with a user interface) to be processed and applied to the DOM before making an assertion."}),"\n",(0,s.jsx)(n.p,{children:"We use act() when we are using jest with react-dom. If you are using React Testing Library, the render function is already wrapped in act(). So we don\u2019t need to use it."}),"\n",(0,s.jsx)(n.p,{children:"Let\u2019s write a test to assert both async and window.open functions get called if the button component below is clicked. This is a good place to use act()."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-tsx",children:'export const MyButton = () => {\n  const { someAsyncFunc } = someHook();\n\n  const handleClick = () => {\n    await someAsyncFunc();\n    window.open(link, "_blank");\n  };\n\n  return (\n    <button role="link" onClick={handleClick}>\n      click me!\n    </button>\n  );\n};\n'})}),"\n",(0,s.jsx)(n.p,{children:"Without using act(), we cannot assert window.open to be called because the assertion happens before the async function gets executed."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-tsx",children:"// mock async function first\nconst someAsyncFunc = jest.fn().mockResolvedValue({ success: true });\njest.spyOn(hooks, 'someHook').mockImplementation(() => ({ someAsyncFunc }));\n\n...\n\nact(async() => {\n  wrapper\n  .findWhere((node) => node.text() === 'Elenberg Fraser')\n  .find('button')\n  .simulate('click');\n});\n\n// This one is not necessary unless we are asserting the change in UI\n// wrapper.update();\n\nexpect(someAsyncFunc).toHaveBeenCalledTimes(1);\n// Add window.open = jest.fn(); in setup.js file for jest global config\nexpect(window.open).toHaveBeenCalledTimes(1);\n"})}),"\n",(0,s.jsx)(n.p,{children:"(2021-10-14)"})]})}function u(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(l,{...e})}):l(e)}},28453:(e,n,t)=>{t.d(n,{R:()=>c,x:()=>i});var s=t(96540);const o={},a=s.createContext(o);function c(e){const n=s.useContext(a);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:c(e.components),s.createElement(a.Provider,{value:n},e.children)}}}]);