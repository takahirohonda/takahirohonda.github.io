"use strict";(self.webpackChunkmydatahack_blog_site=self.webpackChunkmydatahack_blog_site||[]).push([[620],{6991:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>r,contentTitle:()=>s,default:()=>p,frontMatter:()=>a,metadata:()=>i,toc:()=>d});var o=n(74848),c=n(28453);const a={sidebar_position:15},s="Using React.VFC Instead of React.FC",i={id:"Web/Frontend/vfc-vs-fc",title:"Using React.VFC Instead of React.FC",description:"When we Type React functional components, it is better to use React.VoidFunctionComponent (React.VFC) instead of React.FC. React.FC always includes the children prop on your component whether you want or not. We can get around this by adding children?: never on your custom prop. However, it is much cleaner to use React.VFC and type children explicitly.",source:"@site/docs/Web/Frontend/15.vfc-vs-fc.md",sourceDirName:"Web/Frontend",slug:"/Web/Frontend/vfc-vs-fc",permalink:"/docs/Web/Frontend/vfc-vs-fc",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:15,frontMatter:{sidebar_position:15},sidebar:"tutorialSidebar",previous:{title:"Using act() in Jest Unit Tests with React-Dom",permalink:"/docs/Web/Frontend/act-jest-test"},next:{title:"Quickest Way to Add Eslint to JavaScript and TypeScript Projects",permalink:"/docs/Web/Frontend/add-eslint-to-js-ts"}},r={},d=[{value:"UPDATE",id:"update",level:2}];function l(e){const t={code:"code",h1:"h1",h2:"h2",p:"p",pre:"pre",...(0,c.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(t.h1,{id:"using-reactvfc-instead-of-reactfc",children:"Using React.VFC Instead of React.FC"}),"\n",(0,o.jsxs)(t.p,{children:["When we Type React functional components, it is better to use React.VoidFunctionComponent (React.VFC) instead of React.FC. React.FC always includes the children prop on your component whether you want or not. We can get around this by adding ",(0,o.jsx)(t.code,{children:"children?: never"})," on your custom prop. However, it is much cleaner to use React.VFC and type children explicitly."]}),"\n",(0,o.jsx)(t.p,{children:"If you are using old react type, you might need to upgrade @types/react to ^16.9.53. Note that React.VFC was introduced in @types/react@16.9.48."}),"\n",(0,o.jsx)(t.p,{children:"If you have type conflicts caused by different version dependencies in old packages, we can always add resolutions to package.json."}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-json",children:'"resolutions": {\n"react": "16.13.1",\n"@types/react": "^16.9.53",\n},\n'})}),"\n",(0,o.jsx)(t.p,{children:"See further information on React.VFC here."}),"\n",(0,o.jsx)(t.h2,{id:"update",children:"UPDATE"}),"\n",(0,o.jsx)(t.p,{children:"Since the release of React 18, React.FC no longer includes implicit children and React.VFC is deprecated. We should move away from them (Moving away from React.FC and React.VFC)."}),"\n",(0,o.jsx)(t.p,{children:"(2021-07-16)"})]})}function p(e={}){const{wrapper:t}={...(0,c.R)(),...e.components};return t?(0,o.jsx)(t,{...e,children:(0,o.jsx)(l,{...e})}):l(e)}},28453:(e,t,n)=>{n.d(t,{R:()=>s,x:()=>i});var o=n(96540);const c={},a=o.createContext(c);function s(e){const t=o.useContext(a);return o.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function i(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(c):e.components||c:s(e.components),o.createElement(a.Provider,{value:t},e.children)}}}]);