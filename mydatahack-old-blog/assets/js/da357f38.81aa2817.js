"use strict";(self.webpackChunkmydatahack_blog_site=self.webpackChunkmydatahack_blog_site||[]).push([[7188],{51846:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>s,contentTitle:()=>c,default:()=>p,frontMatter:()=>r,metadata:()=>i,toc:()=>d});var o=t(74848),a=t(28453);const r={sidebar_position:7},c="Moving away from React.FC and React.VFC",i={id:"Web/Frontend/move-away-react-fc-vfc",title:"Moving away from React.FC and React.VFC",description:"Since the release of React 18, VFC has been deprecated. FunctionalComponent (FC) does not have implicit children any more.",source:"@site/docs/Web/Frontend/7.move-away-react-fc-vfc.md",sourceDirName:"Web/Frontend",slug:"/Web/Frontend/move-away-react-fc-vfc",permalink:"/mydatahack-old-blog/docs/Web/Frontend/move-away-react-fc-vfc",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:7,frontMatter:{sidebar_position:7},sidebar:"tutorialSidebar",previous:{title:"Unable to Get Local Issuer Certificate for installing Npm Modules",permalink:"/mydatahack-old-blog/docs/Web/Frontend/issuer-certificate-error"},next:{title:"How to fix react-day-picker flickering hover state between mouseenter and mouseleave",permalink:"/mydatahack-old-blog/docs/Web/Frontend/react-day-picker-flicker-bug"}},s={},d=[];function l(e){const n={code:"code",h1:"h1",p:"p",pre:"pre",...(0,a.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.h1,{id:"moving-away-from-reactfc-and-reactvfc",children:"Moving away from React.FC and React.VFC"}),"\n",(0,o.jsx)(n.p,{children:"Since the release of React 18, VFC has been deprecated. FunctionalComponent (FC) does not have implicit children any more."}),"\n",(0,o.jsx)(n.p,{children:"See this pull request. It states:"}),"\n",(0,o.jsx)(n.p,{children:'Since the release of the React 18 types we haven\u2019t seen any use case for FunctionComponent with implicit children beyond "it breaks existing stuff".'}),"\n",(0,o.jsx)(n.p,{children:"As React evolves, using VFC instead of FC is no longer relevant."}),"\n",(0,o.jsx)(n.p,{children:"Now that we think about it, using FC or VFC was not a good idea from the beginning. Typing the argument instead of typing the function itself is more future-proof because the type of function can change in the React API as it happened for the React 18 update."}),"\n",(0,o.jsx)(n.p,{children:"We really should be typing the argument for the react component. This means instead of typing the function."}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-tsx",children:"const MyComponent: React.VFC = ({\n  prop1,\n  prop2,\n  prop3,\n}) => (\n  ...\n)\n"})}),"\n",(0,o.jsx)(n.p,{children:"We should be typing the argument."}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-tsx",children:"const MyComponent = ({\n  prop1,\n  prop2,\n  prop3,\n  children,\n}: MyComponentProps) => (\n  ...\n)\n"})}),"\n",(0,o.jsx)(n.p,{children:"(2022-05-30)"})]})}function p(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(l,{...e})}):l(e)}},28453:(e,n,t)=>{t.d(n,{R:()=>c,x:()=>i});var o=t(96540);const a={},r=o.createContext(a);function c(e){const n=o.useContext(r);return o.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:c(e.components),o.createElement(r.Provider,{value:n},e.children)}}}]);