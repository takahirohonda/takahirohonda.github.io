"use strict";(self.webpackChunkmydatahack_blog_site=self.webpackChunkmydatahack_blog_site||[]).push([[8525],{81414:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>r,default:()=>u,frontMatter:()=>s,metadata:()=>i,toc:()=>d});var o=t(74848),a=t(28453);const s={sidebar_position:1},r="Event-Driven S3 Data Ingestion With Node.js Lambda Function and Deploy it with Serverless",i={id:"data-ingestion/s3-data-node-1",title:"Event-Driven S3 Data Ingestion With Node.js Lambda Function and Deploy it with Serverless",description:"Ingesting data upon the file creating on S3 bucket enables near real-time data ingestion. For example, you may need to ingest log files from applications or API monitoring tools as soon as they land on the bucket. Just to get it started, let\u2019s move the file from the source bucket to the target as soon as it gets created in the source bucket by using the node.js lambda function.",source:"@site/docs/data-ingestion/1.s3-data-node-1.md",sourceDirName:"data-ingestion",slug:"/data-ingestion/s3-data-node-1",permalink:"/mydatahack-old-blog/docs/data-ingestion/s3-data-node-1",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"tutorialSidebar",previous:{title:"Data Ingestion",permalink:"/mydatahack-old-blog/docs/category/data-ingestion"},next:{title:"Uploading and Downloading Files in S3 with Ruby",permalink:"/mydatahack-old-blog/docs/data-ingestion/s3-data-ruby"}},c={},d=[];function l(e){const n={code:"code",h1:"h1",p:"p",pre:"pre",...(0,a.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.h1,{id:"event-driven-s3-data-ingestion-with-nodejs-lambda-function-and-deploy-it-with-serverless",children:"Event-Driven S3 Data Ingestion With Node.js Lambda Function and Deploy it with Serverless"}),"\n",(0,o.jsx)(n.p,{children:"Ingesting data upon the file creating on S3 bucket enables near real-time data ingestion. For example, you may need to ingest log files from applications or API monitoring tools as soon as they land on the bucket. Just to get it started, let\u2019s move the file from the source bucket to the target as soon as it gets created in the source bucket by using the node.js lambda function."}),"\n",(0,o.jsx)(n.p,{children:"We covered the same ingestion pattern with Python in the past. Here, we are using node.js for the lambda function and serverless for deployment including the creation of source and target bucket."}),"\n",(0,o.jsx)(n.p,{children:"Prerequisites"}),"\n",(0,o.jsx)(n.p,{children:"I won\u2019t cover basic stuff because they are already covered in the past. If you need to brush up your knowledge, you can follow the link that was covered in my posts."}),"\n",(0,o.jsx)(n.p,{children:"Basic knowledge of S3 file download and upload with Node.js (see Uploading and Downloading Files in S3 with Node.js).\nBasic knowledge of how lambda function works and how to deploy it (see Event-Driven Data Ingestion with AWS Lambda).\nBasic knowledge of serverless framework (see Advanced AWS Lambda Python Function Deployment with Serverless).\nBasic knowledge of CloudFormation (example: Creating Publicly Accessible RDS with CloudFormation).\nEvent Payload"}),"\n",(0,o.jsx)(n.p,{children:"By configuring the event notification on S3, it will send the event as the JSON format to the lambda function. The event in the lambda function argument looks like the Json object below (see further information here)."}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-js",children:'{\n    "Records":[\n       {\n          "eventVersion":"2.0",\n          "eventSource":"aws:s3",\n          "awsRegion":"us-west-2",\n          "eventTime":"1970-01-01T00:00:00.000Z",\n          "eventName":"ObjectCreated:Put",\n          "userIdentity":{\n             "principalId":"AIDAJDPLRKLG7UEXAMPLE"\n          },\n          "requestParameters":{\n             "sourceIPAddress":"127.0.0.1"\n          },\n          "responseElements":{\n             "x-amz-request-id":"C3D13FE58DE4C810",\n             "x-amz-id-2":"FMyUVURIY8/IgAtTv8xRjskZQpcIZ9KG4V5Wp6S7S/JRWeUWerMUE5JgHvANOjpD"\n          },\n          "s3":{\n             "s3SchemaVersion":"1.0",\n             "configurationId":"testConfigRule",\n             "bucket":{\n                "name":"",\n                "ownerIdentity":{\n                   "principalId":"A3NL1KOZZKExample"\n                },\n                "arn":"arn:aws:s3:::sourcebucket"\n             },\n             "object":{\n                "key":"object name such as data/data.json",\n                "size":1024,\n                "eTag":"d41d8cd98f00b204e9800998ecf8427e",\n                "versionId":"096fKKXTRTtl3on89fVO.nfljtsv6qko"\n             }\n          }\n       }\n    ]\n }\n'})}),"\n",(0,o.jsx)(n.p,{children:"Lambda Function"}),"\n",(0,o.jsx)(n.p,{children:"This should be relatively straight forward. The source bucket and file names are retrieved from the payload object (for further information, see Uploading and Downloading Files in S3 with Node.js)."}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-js",children:'"use strict";\n\nconst AWS = require("aws-sdk");\n\nconst s3 = new AWS.S3();\n\nconst uploadToS3 = (bucketName, key, data) => {\n  const base64data = new Buffer(data, "binary");\n  const params = {\n    Bucket: bucketName,\n    Key: key,\n    Body: base64data,\n  };\n\n  s3.upload(params, (err) => {\n    if (err) console.error(err);\n    console.log(`File uploaded as ${bucketName}/${key}`);\n  });\n};\n\nmodule.exports.s3Uploader = (event, context, callback) => {\n  // Get Source bucket name and key from event\n  const bucketName = event.Records[0].s3.bucket.name;\n  const key = event.Records[0].s3.object.key;\n\n  // Get target bucket name from environment variable\n  const targetBucket = process.env.TargetBucket;\n\n  console.log("Source is: " + bucketName + "/" + key);\n\n  const params = {\n    Bucket: bucketName,\n    Key: key,\n  };\n\n  // Get S3 file from source and transfer to target.\n  s3.getObject(params, (err, data) => {\n    if (err) console.error(err);\n    uploadToS3(targetBucket, key, data.Body.toString());\n  });\n\n  callback(null, "Completed File Transfer");\n};\n'})}),"\n",(0,o.jsx)(n.p,{children:"Lambda Function Deployment"}),"\n",(0,o.jsx)(n.p,{children:"With Serverless, we can define function, events and resource creations with config files or parameters in the serverless.yml file. It is a simplified version of CloudFormation template for deploying lambda function."}),"\n",(0,o.jsx)(n.p,{children:"In the previous post, we only deployed the function with serverless.yml. This means we had to create source and target buckets and configure event on the source as well as creating lambda permissions for the bucket to invoke the function."}),"\n",(0,o.jsx)(n.p,{children:"To create resources, you can use the raw CloudFormation template syntax in YAML under the resources section. Whatever you defined in serverless.yml gets converted into the CloudFormation template which can be found in the .serveless folder."}),"\n",(0,o.jsx)(n.p,{children:"In this way, we can create all the appropriate resources and permissions when we deploy the function and update on any resource or permission setting can be changed when you update the serverless.yml file."}),"\n",(0,o.jsx)(n.p,{children:"However, there is a catch to this. Because of the way CloudFormation creates resources, we cannot add the event notification to the source bucket upon creation. With the NotificationConfiguration property in the source bucket, you will get the error, unable to validate the following destination configuration. You can read more about this issue here."}),"\n",(0,o.jsx)(n.p,{children:"The easiest way to avoid this error is to deploy the function without NoficationConfiguration first. Once you deploy the lambda function first time, you can add it to the resource and deploy it again. The second deployment is seen as a stack update and it will add the event notification to the source bucket."}),"\n",(0,o.jsx)(n.p,{children:"There will be a better way than deploying the function twice with update. But, I think it is the simplest workaround."}),"\n",(0,o.jsx)(n.p,{children:"Here is the template. For the IAM roles statement, we separated it into a permissions.yml file in the config folder (see here for getting values from config files for serverless.yml)."}),"\n",(0,o.jsx)(n.p,{children:"serverless.yml"}),"\n",(0,o.jsx)(n.p,{children:"service: nodejs-s3-file"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-yml",children:'custom:\n  env: test\n  targetBucket: your.target.bucket.name\n  sourceBucket: your.source.bucket.name\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n  region: ap-southeast-2\n  iamRoleStatements: ${file(config/permissions.yaml)}\n  deploymentBucket:\n    name: ${self:custom.env}.lambdafunction.bucket\n    serverSideEncryption: AES256\n  environment:\n    TargetBucket: ${self:custom.targetBucket}\n\nfunctions:\n  s3Uploader:\n    handler: handler.s3Uploader\n    name: nodejs-transfer-S3\n    events:\n      - s3:\n        bucket: ${self:custom.sourceBucket}\n        event: s3:ObjectCreated:*\n\nresources:\n  Resources:\n    sourceBucket:\n      Type: AWS::S3::Bucket\n      Properties:\n        BucketName: ${self:custom.sourceBucket}\n        # Add this section after creation of this stack\n        # It will be added as stack update.\n        NotificationConfiguration:\n          LambdaConfigurations:\n            - Function:\n                "Fn::GetAtt":\n                  - S3UploaderLambdaFunction\n                  - Arn\n              Event: "s3:ObjectCreated:*"\n\n    targetBucket:\n      Type: AWS::S3::Bucket\n      Properties:\n        BucketName: ${self:custom.targetBucket}\n\n    lambdaPermission:\n      Type: AWS::Lambda::Permission\n      Properties:\n        Action: lambda:InvokeFunction\n        SourceArn:\n          "Fn::GetAtt":\n            - sourceBucket\n            - Arn\n        FunctionName:\n          "Fn::GetAtt":\n            - S3UploaderLambdaFunction\n            - Arn\n        Principal: s3.amazonaws.com\n'})}),"\n",(0,o.jsx)(n.p,{children:"permission.yml"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-yml",children:'- Effect: Allow\n  Action:\n    - s3:GetObject\n    - s3:ListBucket\n    - s3:PutObject\n    - logs:CreateLogGroup\n    - logs:CreateLogStream\n    - logs:PutLogEvents\n    - ec2:CreateNetworkInterface\n    - ec2:DescribeNetworkInterfaces\n    - ec2:DeleteNetworkInterface\n  Resource: "*"\n'})}),"\n",(0,o.jsx)(n.p,{children:"(2018-08-19)"})]})}function u(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(l,{...e})}):l(e)}},28453:(e,n,t)=>{t.d(n,{R:()=>r,x:()=>i});var o=t(96540);const a={},s=o.createContext(a);function r(e){const n=o.useContext(s);return o.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:r(e.components),o.createElement(s.Provider,{value:n},e.children)}}}]);