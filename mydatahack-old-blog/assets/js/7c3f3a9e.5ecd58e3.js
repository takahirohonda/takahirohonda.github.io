"use strict";(self.webpackChunkmydatahack_blog_site=self.webpackChunkmydatahack_blog_site||[]).push([[6780],{88477:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>s,default:()=>h,frontMatter:()=>c,metadata:()=>a,toc:()=>r});var o=n(74848),i=n(28453);const c={sidebar_position:56},s="React Unit Test Code Snippets with Jest and Enzyme",a={id:"Web/Frontend/unit-test-code-snippet-jest-enzyme",title:"React Unit Test Code Snippets with Jest and Enzyme",description:"Sometimes all I need is to see a snippet of code without much explanation when I try to find a solution online. This is because I am familiar enough with the language and framework and need a quick reminder. So, here it is. I created a post with a few React unit test code snippets with Jest and Enzyme.",source:"@site/docs/Web/Frontend/56.unit-test-code-snippet-jest-enzyme.md",sourceDirName:"Web/Frontend",slug:"/Web/Frontend/unit-test-code-snippet-jest-enzyme",permalink:"/mydatahack-old-blog/docs/Web/Frontend/unit-test-code-snippet-jest-enzyme",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:56,frontMatter:{sidebar_position:56},sidebar:"tutorialSidebar",previous:{title:"Using setInterval() and setTimeout() with JavaScript",permalink:"/mydatahack-old-blog/docs/Web/Frontend/setInterval-setTimeout"},next:{title:"Unit Testing React Form with Jest and Enzyme",permalink:"/mydatahack-old-blog/docs/Web/Frontend/react-jst-enzyme"}},l={},r=[];function d(e){const t={code:"code",h1:"h1",p:"p",pre:"pre",...(0,i.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(t.h1,{id:"react-unit-test-code-snippets-with-jest-and-enzyme",children:"React Unit Test Code Snippets with Jest and Enzyme"}),"\n",(0,o.jsx)(t.p,{children:"Sometimes all I need is to see a snippet of code without much explanation when I try to find a solution online. This is because I am familiar enough with the language and framework and need a quick reminder. So, here it is. I created a post with a few React unit test code snippets with Jest and Enzyme."}),"\n",(0,o.jsx)(t.p,{children:"List"}),"\n",(0,o.jsx)(t.p,{children:"Snapshot testing\nTesting to see if a DOM element exists\nTesting to see if a class exists in the specific DOM element\nTesting to see if an element has the correct value\nSimulating button click event and its outcome\nChecking function has been called once\nChecking function has been called with a specific argument"}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-js",children:'// (1) Snapshot testing\nit("Should render correctly", () => {\n  const component = renderer.create(<Header />);\n  const tree = component.toJSON();\n  expect(tree).toMatchSnapshot();\n});\n\n// (2) Checking DOM element\nit("Should have single button when href prop exists", () => {\n  const component = shallow(<Button />);\n  expect(component.find("button").length).toBe(1);\n});\n\n// (3) Checking class\nit("should have the correct class name", () => {\n  const component = shallow(<Column className="col-md-6" />);\n  expect(component.find("div").hasClass("col-md-6")).toBe(true);\n});\n\n// (4) Simulate button click\nit("Should change button style when clicked", () => {\n  const component = mount(<ChangeColor />);\n  const firstButton = component.find("button").at(0);\n  firstButton.simulate("click");\n  expect(component.find("button").at(0).hasClass("btn btn-danger")).toBe(true);\n});\n\n// (5) Checking the text in DOM element\nit("Should have label with default label title", () => {\n  const component = shallow(<TextInput />);\n  expect(component.find("label").text()).toEqual("Text Input");\n});\n\n// (6) Checking if function called once\nit("Should call onclick function when the button is clicked", () => {\n  const onClick = jest.fn();\n  const component = mount(<ButtonGroup array={array} clickHandler={onClick} />);\n  component.find("button").at(0).simulate("click");\n  expect(onClick.mock.calls.length).toBe(1);\n});\n\n// (7) Checking if function called with a specific argument\nit("Should call onclick function when the button is clicked with the correct id number", () => {\n  const onClick = jest.fn();\n  const component = mount(<ButtonGroup array={array} clickHandler={onClick} />);\n  component.find("button").at(0).simulate("click");\n  expect(onClick).toHaveBeenCalledWith(1);\n});\n'})}),"\n",(0,o.jsx)(t.p,{children:"Testing React Form"}),"\n",(0,o.jsx)(t.p,{children:"Check out the post here. It has a little bit more focus on React form unit testing. You can check out the complete solutions here: react-form-unit-test-example."}),"\n",(0,o.jsx)(t.p,{children:"Reference"}),"\n",(0,o.jsx)(t.p,{children:"For Enzyme, I check this cheatsheet all the time. For style, I often refer React style guide from Airbnb."}),"\n",(0,o.jsx)(t.p,{children:"(2019-01-03)"})]})}function h(e={}){const{wrapper:t}={...(0,i.R)(),...e.components};return t?(0,o.jsx)(t,{...e,children:(0,o.jsx)(d,{...e})}):d(e)}},28453:(e,t,n)=>{n.d(t,{R:()=>s,x:()=>a});var o=n(96540);const i={},c=o.createContext(i);function s(e){const t=o.useContext(c);return o.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function a(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:s(e.components),o.createElement(c.Provider,{value:t},e.children)}}}]);