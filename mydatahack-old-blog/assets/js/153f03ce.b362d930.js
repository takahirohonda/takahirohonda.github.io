"use strict";(self.webpackChunkmydatahack_blog_site=self.webpackChunkmydatahack_blog_site||[]).push([[865],{24502:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>d,contentTitle:()=>s,default:()=>h,frontMatter:()=>r,metadata:()=>i,toc:()=>l});var a=n(74848),o=n(28453);const r={sidebar_position:36},s="Replacing Local Storage with IndexedDB",i={id:"Web/Frontend/indexdb",title:"Replacing Local Storage with IndexedDB",description:"When you build a PWA, you often have to store data locally. The easiest way is to use LocalStorage. Data persists even after ending sessions and it does easy synchronous read-write operation. Although you need to convert a JSON object to string because LocalStorage only supports string, the programming overhead is minimum.",source:"@site/docs/Web/Frontend/36.indexdb.md",sourceDirName:"Web/Frontend",slug:"/Web/Frontend/indexdb",permalink:"/mydatahack-old-blog/mydatahack-old-blog/Web/Frontend/indexdb",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:36,frontMatter:{sidebar_position:36},sidebar:"tutorialSidebar",previous:{title:"Better Way to Attach Event Listener with Vanilla JS",permalink:"/mydatahack-old-blog/mydatahack-old-blog/Web/Frontend/attache-event-listener"},next:{title:"Unit Testing Event Listeners on Form Input Fields with Karma",permalink:"/mydatahack-old-blog/mydatahack-old-blog/Web/Frontend/event-listener-test-karma"}},d={},l=[];function c(e){const t={code:"code",h1:"h1",p:"p",pre:"pre",...(0,o.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(t.h1,{id:"replacing-local-storage-with-indexeddb",children:"Replacing Local Storage with IndexedDB"}),"\n",(0,a.jsx)(t.p,{children:"When you build a PWA, you often have to store data locally. The easiest way is to use LocalStorage. Data persists even after ending sessions and it does easy synchronous read-write operation. Although you need to convert a JSON object to string because LocalStorage only supports string, the programming overhead is minimum."}),"\n",(0,a.jsx)(t.p,{children:"For the basic data manipulation, you can just do this. It is not asynchronous, so the code runs after each LocalStorage call will reflect the change to the store. Easy. No worries."}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-js",children:"// Get JSON from local storage with key mtdListData\nconst listData = JSON.parse(localStorage.getItem('mtdListData')\n\n// Inserting listData into LocalStorage.\nlocalStorage.mtdListData = JSON.stringify(listData)\n"})}),"\n",(0,a.jsx)(t.p,{children:"This is as far as it goes with LocalStorage. The simple read-write operation. Instead of having smart logic to update data, it just does bulk insert and replace the old data with new one. LocalStorage also has the limit of 10MB storage space."}),"\n",(0,a.jsx)(t.p,{children:"PWAs sometimes require more complex data operation with real NoSQL capability. Storing strings with key-value pairs may not be good enough. App may needs to store other data types like blobs. Then, it is time to use IndexedDb."}),"\n",(0,a.jsx)(t.p,{children:"Introducing IndexedDb"}),"\n",(0,a.jsx)(t.p,{children:"IndexedDb is a client-side storage that works like NoSQL that has transactional capability. It has a rich set of APIs to do transactional operations. Google also recommends IndexedDb for the go-to storage for PWA."}),"\n",(0,a.jsx)(t.p,{children:"In reality, using IndexedDb is not easy because it works only asynchronously and API is quirky and not very friendly to handle it as it is not Promise based."}),"\n",(0,a.jsx)(t.p,{children:"If you have worked with backend application with database calls, the last thing you want is that database operation is not getting done synchronously. For example, when you update data, retrieve it, and manipulate it in three consecutive lines, you really want it to run synchronously as you don\u2019t want to data retrieval and manipulation after data update completes."}),"\n",(0,a.jsx)(t.p,{children:"IndexedDb doesn\u2019t work that way. In JavaScript, promise is a nice way to turn an asynchronous execution into a synchronous mode. Unfortunately, IndexedDb APIs are not promise friendly. Instead, you need to listen to an event and fire an action. Of course, we can wrap the whole thing in promise (which I will show you how later), but that seems like a lot of effort."}),"\n",(0,a.jsx)(t.p,{children:"Although a bit of effort is required to get over the learning curve, IndexedDb is super powerful. It will opens up the whole new world of real database operation on the browser. I am actually stoked that modern browsers have such a rich database out of the box."}),"\n",(0,a.jsx)(t.p,{children:"So, I am hoping that this post will help you to be familiar with IndexedDb\u2019s quirky APIs."}),"\n",(0,a.jsx)(t.p,{children:"Let\u2019s start with basics."}),"\n",(0,a.jsx)(t.p,{children:"Basic database operation"}),"\n",(0,a.jsx)(t.p,{children:"First, we need to create a database, then create a store (that is like a table). In the store, we want to insert data. Then we want to read it. This sounds simple. But, it gets complex because IndexedDb works asynchronously in every step with emitting events."}),"\n",(0,a.jsx)(t.p,{children:"To learn this quirky API, I needed to write this in a scripting language way. No function, just execute the whole thing in a script tag in an HTML. Then, when I got this working, I sort of understood how IndexedDb works."}),"\n",(0,a.jsx)(t.p,{children:"One more caveat is that the file has to run in a server. You cannot just open HTML file in a browser. You can use gulp or webpack to run it in a local server to test the code below."}),"\n",(0,a.jsx)(t.p,{children:"You could create an auto increment key and do indexing (as in the commented out section). But, this is mainly for a simple operation to replace the local storage logic at the start of this post."}),"\n",(0,a.jsx)(t.p,{children:"These APIs emit events and you need to catch them to do further operation. Arg\u2026"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-js",children:'const exampleData = [\n  {\n    data: [\n      { categoryName: "To do", listName: "Personal" },\n      { categoryName: "To do", listName: "Work" },\n    ],\n  },\n  { data: [{ listName: "Personal" }, { listName: "Work" }] },\n];\n\nconst key = ["category", "list"];\n\nlet db;\nlet request = indexedDB.open("mtd", 1);\n\nrequest.onupgradeneeded = (e) => {\n  db = e.target.result;\n  const store = db.createObjectStore("mtd-data");\n  console.log("created store: ", store);\n  // const store = db.createObjectStore(\'mtd-data\',\n  // {keyPath: \'key\', autoIncrement: true});\n  // store.createIndex(\'context\', \'context\', { unique: true })\n  // store.createIndex(\'data\', \'data\', { unique: false })\n};\n\nrequest.onsuccess = (e) => {\n  db = e.target.result;\n  console.log("opened indexedDb...", db);\n  if (!db.objectStoreNames.contains("mtd-data")) {\n    const transaction = db.transaction(["mtd-data"], "readwrite");\n    const store = transaction.objectStore("mtd-data");\n    exampleData.forEach((data, index) => {\n      store.put(data, key[index]);\n      console.log("Upserted data: ", data);\n    });\n    db.close();\n  } else {\n    console.log("mtd-data store already exists");\n  }\n};\nrequest.onerror = (e) => {\n  console.error("Failed to open db: ", e.target.error);\n};\n\n// reopen index db\nrequest = indexedDB.open("mtd", 1);\n\nrequest.onsuccess = (e) => {\n  db = e.target.result;\n  const transaction = db.transaction(["mtd-data"], "readonly");\n  const store = transaction.objectStore("mtd-data");\n  const categoryData = store.get("category");\n  categoryData.onsuccess = (e) => {\n    console.log("category data retrived: ", e.target.result.data);\n  };\n  const listData = store.get("list");\n  listData.onsuccess = (e) => {\n    console.log("listData retrieved: ", e.target.result.data);\n  };\n  db.close();\n};\n\nrequest.onerror = (e) => {\n  console.error("Failed to open db second time: ", e.target.error);\n};\n'})}),"\n",(0,a.jsx)(t.p,{children:"Make it Promise Friendly"}),"\n",(0,a.jsx)(t.p,{children:"The script above is not usable in the real application. The solution for this is to make it promise friendly. Then, we can do async/await pattern that is more pleasant for database operation."}),"\n",(0,a.jsx)(t.p,{children:"In fact, google documentation recommends to use promise-friendly library to interact with IndexedDb. Yeah, this library is pretty nice. But, let\u2019s try to DIY this time."}),"\n",(0,a.jsx)(t.p,{children:"(1) InitialiseDB"}),"\n",(0,a.jsx)(t.p,{children:"This will initialise the database and store and add an array of data. As you can see, I wrapped the whole thing in promise."}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-js",children:'let db: any;\n\nexport const checkIndexDbBrowserSupport = (): boolean => {\n  return "indexedDB" in window;\n};\n\nexport const initialiseDb = (data: any, key: string[]) => {\n  const request = indexedDB.open("mtd", 1);\n  return new Promise((resolve, reject) => {\n    request.onupgradeneeded = (e: any) => {\n      db = e.target.result;\n      const store = db.createObjectStore("mtd-data");\n      console.log("created store: ", store);\n    };\n\n    request.onsuccess = (e: any) => {\n      db = e.target.result;\n      console.log("opened indexedDb to initialise...", db);\n      if (db.objectStoreNames.contains("mtd-data")) {\n        const transaction = db.transaction(["mtd-data"], "readwrite");\n        const store = transaction.objectStore("mtd-data");\n\n        data.forEach((data: any, index: number) => {\n          const check = store.add(data, key[index]);\n          console.log("Adding data: ", data);\n        });\n        db.close();\n        resolve(true);\n      } else {\n        console.log("mtd-data store already exists");\n        resolve(false);\n      }\n    };\n    request.onerror = (e: any) => {\n      console.error("Failed to open db: ", e.target.error);\n      reject(e.target.error);\n    };\n  });\n};\n'})}),"\n",(0,a.jsx)(t.p,{children:"(2) Fetching Data"}),"\n",(0,a.jsx)(t.p,{children:"Opening database is asynchronous as well as reading data. So, I opted to create two functions rather than nesting promises. The first one returns the store, then use the store object to read data in the second function."}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-js",children:'const getReadOnlyStore = () => {\n  // db is defined at the top\n  const request = indexedDB.open("mtd", 1);\n  return new Promise((resolve, reject) => {\n    request.onsuccess = (e: any) => {\n      db = e.target.result;\n      const transaction = db.transaction("mtd-data", "readonly");\n      const store = transaction.objectStore("mtd-data");\n      resolve(store);\n    };\n    request.onerror = (e: any) => {\n      console.error("Failed to open db second time: ", e.target.error);\n      reject(e.target.error);\n    };\n  });\n};\n\nexport const getDataFromIndexedDb = async (key: string) => {\n  try {\n    const store: any = await getReadOnlyStore();\n    console.log("store is ready to getDataFromIndexedDb");\n    const categoryData = store.get(key);\n    return new Promise((resolve, reject) => {\n      categoryData.onsuccess = (e: any) => {\n        console.log("category data retrived: ", e.target.result);\n        resolve(e.target.result);\n        db.close();\n      };\n      categoryData.onerror = (e: any) => {\n        reject(e.target.error);\n        console.error("data retrieval error: ", e.target.error);\n      };\n    });\n  } catch (e) {\n    console.error("error in getReadOnlySore(): ", e);\n  }\n};\n'})}),"\n",(0,a.jsx)(t.p,{children:"(3) Inserting Data"}),"\n",(0,a.jsx)(t.p,{children:"Once the target object store is available, we can to data insertion operation."}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-js",children:"export const insertRecordToIndexedDb = (data: any, key: string) => {\n  let db\n  const request = indexedDB.open('mtd', 1)\n  return new Promise((resolve, reject) => {\n    request.onsuccess = (e: any) => {\n      db = e.target.result\n      console.log('opened indexedDb to upsert...', db)\n      if (db.objectStoreNames.contains('mtd-data')) {\n        const transaction = db.transaction('mtd-data', 'readwrite')\n        const store = transaction.objectStore('mtd-data')\n        store.put(data, key)\n        console.log('Upserted data: ', data)\n        db.close()\n        resolve(true)\n      }\n      else {\n        console.log('mtd-data store already exists')\n        resolve(true)\n      }\n    }\n    request.onerror = (e: any) => {\n      console.error('Failed to open db: ', e.target.error)\n      reject(e.target.error)\n    }\n  })\n"})}),"\n",(0,a.jsx)(t.p,{children:"(4) Clearing database"}),"\n",(0,a.jsx)(t.p,{children:"Yeah, you can clear database this way. I actually observed delete database operation gets blocked a lot. You can catch blocked event with onblock on the request object. Even if it gets blocked, deletion seems to happen eventually. So, I didn\u2019t bother to add onblock event in this function."}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-js",children:'export const clearIndexedDB = (): Promise<string> => {\n  const req = indexedDB.deleteDatabase("mtd");\n  return new Promise((resolve, reject) => {\n    req.onsuccess = () => {\n      resolve("DB deleted successfully");\n    };\n    req.onerror = (e: any) => {\n      reject(`Error in DB delete: ${e.target.error}`);\n    };\n  });\n};\n'})}),"\n",(0,a.jsx)(t.p,{children:"Putting it all together"}),"\n",(0,a.jsx)(t.p,{children:"Ok, let\u2019s write an array of key-value pair data and read it from IndexedDb when the page is first loaded."}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-js",children:'export const initialiseDbAndFetchData = async () => {\n  const initialDataArray = [initialList, initialCategories];\n  const keyArray = ["list", "category"];\n\n  if (checkIndexDbBrowserSupport) {\n    try {\n      const dbInitialized = await initialiseDb(initialDataArray, keyArray);\n      if (dbInitialized) {\n        return Promise.all([\n          getDataFromIndexedDb("list"),\n          getDataFromIndexedDb("category"),\n        ]).then((values: any) => {\n          return values;\n        });\n      }\n    } catch (e) {\n      console.log("error in resolving getDataFromIndexDb promise");\n    }\n  }\n};\n\n// Now we can finally get data...\ntry {\n  const data = await initialiseDbAndFetchData();\n  console.log("checking data, ", data);\n  return data;\n} catch (e) {\n  console.log(e);\n}\n'})}),"\n",(0,a.jsx)(t.p,{children:"Final thoughts"}),"\n",(0,a.jsx)(t.p,{children:"The 100 plus lines of code to do simple operation with IndexedDb in this example can be done in a few lines of code with LocalStorage. But, that is not the point. IndexedDb can do so much more and if you are creating PWA apps that requires database transaction data operation while offline, you should totally go for IndexedDb. In fact, APIs for IndexedDb have been changing a bit. It used to have synchronous operations, but deprecated it. I think API usability will improve over the time."}),"\n",(0,a.jsx)(t.p,{children:"If your app only requires to read and write simple key-value pair string data, IndexedDb might be an over-engineered solution and you can totally go with LocalStorage."}),"\n",(0,a.jsx)(t.p,{children:"Well, let\u2019s see how browser storage technology evolves. I have no doubt this blog will become obsolete very soon."}),"\n",(0,a.jsx)(t.p,{children:"(2019-11-09)"})]})}function h(e={}){const{wrapper:t}={...(0,o.R)(),...e.components};return t?(0,a.jsx)(t,{...e,children:(0,a.jsx)(c,{...e})}):c(e)}},28453:(e,t,n)=>{n.d(t,{R:()=>s,x:()=>i});var a=n(96540);const o={},r=a.createContext(o);function s(e){const t=a.useContext(r);return a.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function i(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:s(e.components),a.createElement(r.Provider,{value:t},e.children)}}}]);