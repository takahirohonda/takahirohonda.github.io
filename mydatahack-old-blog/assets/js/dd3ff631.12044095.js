"use strict";(self.webpackChunkmydatahack_blog_site=self.webpackChunkmydatahack_blog_site||[]).push([[1792],{76257:(t,e,n)=>{n.r(e),n.d(e,{assets:()=>a,contentTitle:()=>c,default:()=>u,frontMatter:()=>r,metadata:()=>i,toc:()=>l});var o=n(74848),s=n(28453);const r={sidebar_position:7},c="Unit Testing ASP.NET Web API by Mocking DbContext with NSubstitute",i={id:"Web/DotNet/dbcontext-mocking-n-substitute",title:"Unit Testing ASP.NET Web API by Mocking DbContext with NSubstitute",description:"In the previous post, we created a simpleWeb API in 5 minutes. Now, let\u2019s refactor the code so that it is unit testable with xUnit.",source:"@site/docs/Web/DotNet/7.dbcontext-mocking-n-substitute.md",sourceDirName:"Web/DotNet",slug:"/Web/DotNet/dbcontext-mocking-n-substitute",permalink:"/docs/Web/DotNet/dbcontext-mocking-n-substitute",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:7,frontMatter:{sidebar_position:7},sidebar:"tutorialSidebar",previous:{title:"Unit Testing Entity Framework Database Update logic with NSubstitute",permalink:"/docs/Web/DotNet/unit-test-n-substitute"},next:{title:"Creating Web APIs using ASP.NET and MySQL in 5 minutes",permalink:"/docs/Web/DotNet/create-web-api"}},a={},l=[];function d(t){const e={code:"code",h1:"h1",p:"p",pre:"pre",...(0,s.R)(),...t.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(e.h1,{id:"unit-testing-aspnet-web-api-by-mocking-dbcontext-with-nsubstitute",children:"Unit Testing ASP.NET Web API by Mocking DbContext with NSubstitute"}),"\n",(0,o.jsx)(e.p,{children:"In the previous post, we created a simpleWeb API in 5 minutes. Now, let\u2019s refactor the code so that it is unit testable with xUnit."}),"\n",(0,o.jsx)(e.p,{children:"The API we build previously was sourcing the data from MySQL database through DbContext. This is an external dependency that we need to replace in the unit test. There are a few good mocking libraries available for.NET. Here, we are going to use NSubstitueto mock the DbContext."}),"\n",(0,o.jsx)(e.p,{children:"Code Refactoring"}),"\n",(0,o.jsx)(e.p,{children:"(1) Extract Interface from sakilaDbContext"}),"\n",(0,o.jsx)(e.p,{children:"The rule of thumb with NSubstitue is to mock interfaces, not classes. In the Actors API, we have the DbContext class called sakilaContext. We first need to extract the interface from the DbContext so that it can be mocked."}),"\n",(0,o.jsx)(e.p,{children:"This can be done easily with Visual Studio by right clicking the class name in sakilaContext, choose Quick Actions and Refactoring, and then select Extract Interface."}),"\n",(0,o.jsx)(e.p,{children:"(2) CreateActorsRepository.cs"}),"\n",(0,o.jsx)(e.p,{children:"Let\u2019s move the logic to get actors from the controller and handle it with ActorsRepository and extract the interface. In this way, our unit test runs against the repository not the controller. The controller simply uses the interface, IActorsRepository class to get all the actors."}),"\n",(0,o.jsx)(e.p,{children:"First, create a folder called Repositories, add ActorsRepository.cs and extract the interface. In the repository, we inject the dependency on IsakilaContext. If you need more information on dependency injection, read here. Understanding Inversionof Control also helps you to make your code more robust and unit testable."}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-csharp",children:"public class ActorsRepository : IActorsRepository\n{\n    private IsakilaContext _dbContext;\n\n    public ActorsRepository(IsakilaContext dbContext)\n    {\n        _dbContext = dbContext;\n    }\n\n    public Actor[] GetActors()\n    {\n        return _dbContext.Actor.ToArray();\n    }\n}\n"})}),"\n",(0,o.jsx)(e.p,{children:"(3) UpdateActorsController to use ActorsRepository."}),"\n",(0,o.jsx)(e.p,{children:"Let\u2019s refactor the controller so that it uses the logic from ActorsRepository to get data. In this way, the controller is only responsible for receiving the request and returning the response and the core API logic sits in the repository class."}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-csharp",children:'[Route("api/[controller]")]\npublic class ActorsController : Controller\n{\n    private  IActorsRepository _actors;\n\n   public ActorsController(sakilaContext context)\n    {\n        _actors = new ActorsRepository(context);\n    }\n\n    public IActionResult Index()\n    {\n        return Ok(_actors.GetActors());\n    }\n}\n'})}),"\n",(0,o.jsx)(e.p,{children:"Creating Unit Test"}),"\n",(0,o.jsx)(e.p,{children:"After refactoring your code, it is ready for unit testing. Let\u2019s set up the test project and write test code."}),"\n",(0,o.jsx)(e.p,{children:"(1) Add xUnitTest Project, Configure Project Dependencies and Install NSubstitute"}),"\n",(0,o.jsx)(e.p,{children:"First of all, you need to create a test project by adding xUnit Test Project under the solution. The naming convention is the project name plus Test (e.g. ApiExampleTest if the project is called ApiExample)."}),"\n",(0,o.jsx)(e.p,{children:"Once the project is created, right click the project to add project dependencies. The unit test project needs the project dependency to the actual project you are testing on."}),"\n",(0,o.jsx)(e.p,{children:"(2) Create unit test"}),"\n",(0,o.jsx)(e.p,{children:"Now you can mock the DbContest interface and mock the Actorsdata. Mocking DbSet is tricky because it is not a simple list object. You needto set up all IQueryable methods. For this bit, I referenced this excellentblog post called MockEntity Framework DbSet with NSubstitute from Sina\u2019s Blog."}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-csharp",children:'public class ActorsRepositoryTest\n{\n    [Fact]\n    public void GetActors_Should_Return_Actors()\n    {\n        var mockActors = new List<Actor>()\n        {\n            new Actor {ActorId = 1, FirstName = "Hello", LastName = "World", LastUpdate = DateTime.Now, FilmActor = new List<FilmActor>()},\n            new Actor {ActorId = 2, FirstName = "Second", LastName = "Record", LastUpdate = DateTime.Now, FilmActor = new List<FilmActor>()}\n        }.AsQueryable();\n\n        var mockSet = Substitute.For<DbSet<Actor>, IQueryable<Actor>>();\n\n        // setup all IQueryable methods using what you have from "data"\n        ((IQueryable<Actor>)mockSet).Provider.Returns(mockActors.Provider);\n        ((IQueryable<Actor>)mockSet).Expression.Returns(mockActors.Expression);\n        ((IQueryable<Actor>)mockSet).ElementType.Returns(mockActors.ElementType);\n        ((IQueryable<Actor>)mockSet).GetEnumerator().Returns(mockActors.GetEnumerator());\n        var dbContextMock = Substitute.For<IsakilaContext>();\n        dbContextMock.Actor.Returns(mockSet);\n\n        // Act\n        var actors = new ActorsRepository(dbContextMock);\n        var data = actors.GetActors();\n\n        // Assert\n        Assert.Equal(data[0].FirstName, "Hello");\n    }\n}\n'})}),"\n",(0,o.jsx)(e.p,{children:"Refactoring Unit Test"}),"\n",(0,o.jsx)(e.p,{children:"Now that the unit test runs, let\u2019s refactor it a little better. First of all, we will create a class that contains mock data instead of hard coding it within the test code. In this way, we can use the same mock data for different logics."}),"\n",(0,o.jsx)(e.p,{children:"Then, let\u2019s take out the logic to mock Entity Framwork DbSet. For this, I am using the code example from Sina\u2019s Blog here."}),"\n",(0,o.jsx)(e.p,{children:"(1) CreateMockActors class"}),"\n",(0,o.jsx)(e.p,{children:"Let\u2019s create a folder called Repositories within the test project and create a class called MockActors. When the class is instantiated, the list of actors can be accessible through the public property, Actors."}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-csharp",children:'namespace ApiIn10MinutestTest.Repositories\n{\n    public class MockActors\n    {\n        public List<Actor> Actors;\n\n        public MockActors()\n        {\n            Actors = new List<Actor>();\n            Actors.Add(new Actor { ActorId = 1, FirstName = "Hello", LastName = "World", LastUpdate = DateTime.Now, FilmActor = new List<FilmActor>() });\n            Actors.Add(new Actor { ActorId = 2, FirstName = "Second", LastName = "Record", LastUpdate = DateTime.Now, FilmActor = new List<FilmActor>() });\n        }\n\n    }\n}\n'})}),"\n",(0,o.jsx)(e.p,{children:"(2) Createa utility class to mock DbSet"}),"\n",(0,o.jsx)(e.p,{children:"Let\u2019s take out the logic to create mock DbSet. This is a non-asyncversion of NSubstituteUtils from from Sina\u2019s Blog example here."}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-csharp",children:'namespace ApiExampleTest.Repositories\n{\n    public class MockActors\n    {\n        public List<Actor> Actors;\n\n        public MockActors()\n        {\n            Actors = new List<Actor>();\n            Actors.Add(new Actor { ActorId = 1, FirstName = "Hello", LastName = "World", LastUpdate = DateTime.Now, FilmActor = new List<FilmActor>() });\n            Actors.Add(new Actor { ActorId = 2, FirstName = "Second", LastName = "Record", LastUpdate = DateTime.Now, FilmActor = new List<FilmActor>() });\n        }\n    }\n}\n'})}),"\n",(0,o.jsx)(e.p,{children:"(3) Refactorunit test to use the utility class and mock data class"}),"\n",(0,o.jsx)(e.p,{children:"Putting them all together, the test code looks much neater. I am fond of FluentAssertionsfor assertions. Check it out. It is easy to use and gives you more options than the vanilla xUnit assertion options."}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-csharp",children:'namespace ApiIn10MinutestTest\n{\n    public class GetActorsTest\n    {\n        private MockActors _Actors;\n\n        public GetActorsTest()\n        {\n            _Actors = new MockActors();\n        }\n\n        [Fact]\n        public void GetActors_Should_Return_All_Actors()\n        {\n            // Arrange\n            var mockDbSet = NSubstituteUtils.CreateMockDbSet(_Actors.Actors);\n            var mockSakilaContext = Substitute.For<IsakilaContext>();\n            mockSakilaContext.Actor.Returns(mockDbSet);\n            var actors = new ActorsRepository(mockSakilaContext);\n\n            // Act\n            var data = actors.GetActors();\n\n            // Assert\n            data[0].FirstName.Should().Be("Hello");\n            data.Should().HaveCount(2);\n\n        }\n    }\n}\n'})}),"\n",(0,o.jsx)(e.p,{children:"Good times!"}),"\n",(0,o.jsx)(e.p,{children:"The complete Actor API code and unit test code examples can be found here."}),"\n",(0,o.jsx)(e.p,{children:"(10180=-12-8)"})]})}function u(t={}){const{wrapper:e}={...(0,s.R)(),...t.components};return e?(0,o.jsx)(e,{...t,children:(0,o.jsx)(d,{...t})}):d(t)}},28453:(t,e,n)=>{n.d(e,{R:()=>c,x:()=>i});var o=n(96540);const s={},r=o.createContext(s);function c(t){const e=o.useContext(r);return o.useMemo((function(){return"function"==typeof t?t(e):{...e,...t}}),[e,t])}function i(t){let e;return e=t.disableParentContext?"function"==typeof t.components?t.components(s):t.components||s:c(t.components),o.createElement(r.Provider,{value:e},t.children)}}}]);