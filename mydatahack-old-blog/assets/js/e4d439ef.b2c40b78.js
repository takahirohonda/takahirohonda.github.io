"use strict";(self.webpackChunkmydatahack_blog_site=self.webpackChunkmydatahack_blog_site||[]).push([[1149],{49578:(n,t,e)=>{e.r(t),e.d(t,{assets:()=>c,contentTitle:()=>s,default:()=>m,frontMatter:()=>o,metadata:()=>i,toc:()=>l});var a=e(74848),r=e(28453);const o={sidebar_position:1},s="Automate Source And Target Table Column Comparison With Java",i={id:"Web/Java/automate-table-column-comparison",title:"Automate Source And Target Table Column Comparison With Java",description:"The code uses JDBC for both target and source database connections. You need to compile the code with appropriate JDBC drivers. It takes the target schema as an argument and checks all the tables in the specified schema in the target database. It will create an output to show which table has added or dropped columns as a csv file. Database connection and metadata retrieval are managed by the Database class.",source:"@site/docs/Web/Java/1.automate-table-column-comparison.md",sourceDirName:"Web/Java",slug:"/Web/Java/automate-table-column-comparison",permalink:"/mydatahack-old-blog/docs/Web/Java/automate-table-column-comparison",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"tutorialSidebar",previous:{title:"Java",permalink:"/mydatahack-old-blog/docs/category/java"},next:{title:"Automate Salesforce Table Creation With Java",permalink:"/mydatahack-old-blog/docs/Web/Java/automate-sf-table-creation"}},c={},l=[{value:"Code",id:"code",level:3}];function u(n){const t={code:"code",h1:"h1",h3:"h3",p:"p",pre:"pre",...(0,r.R)(),...n.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(t.h1,{id:"automate-source-and-target-table-column-comparison-with-java",children:"Automate Source And Target Table Column Comparison With Java"}),"\n",(0,a.jsx)(t.p,{children:"The code uses JDBC for both target and source database connections. You need to compile the code with appropriate JDBC drivers. It takes the target schema as an argument and checks all the tables in the specified schema in the target database. It will create an output to show which table has added or dropped columns as a csv file. Database connection and metadata retrieval are managed by the Database class."}),"\n",(0,a.jsx)(t.p,{children:"The advantage of this design is that you can use the same jar file for multiple data sources as long as you compile the code with JDBC driver. The code is vendor neutral."}),"\n",(0,a.jsx)(t.p,{children:"The code can be scheduled to run in a server or ETL tool with notification. You can even fetch the csv file and write it to a database table."}),"\n",(0,a.jsx)(t.h3,{id:"code",children:"Code"}),"\n",(0,a.jsx)(t.p,{children:"Database.java"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-java",children:'package Database;\n\nimport java.sql.Connection;\nimport java.sql.DriverManager;\nimport java.sql.SQLException;\nimport java.sql.Statement;\nimport java.sql.ResultSet;\nimport java.sql.ResultSetMetaData;\nimport java.util.ArrayList;\nimport java.util.Vector;\n\npublic class Database {\n\n    private String className;\n    private String connectionUrl;\n    private String userName;\n    private String passWord;\n\n    public Database (String cName, String url, String uName, String pName){\n        className = cName;\n        connectionUrl = url;\n        userName = uName;\n        passWord = pName;\n    }\n\n    // 1. Create Connection\n    public Connection createConnection(){\n        Connection connection = null;\n        // (1) Load JDBC Driver\n        try {\n            System.out.println("Loading JDBC Driver...");\n            Class.forName(className);\n            System.out.println("JDBC loaded successfully.");\n        }\n        catch (ClassNotFoundException e) {\n            throw new RuntimeException(e);\n        }\n        // (2) Create connection\n        try {\n            System.out.println("Connecting to Database ...");\n            connection = DriverManager.getConnection(connectionUrl, userName, passWord);\n        }\n        catch (SQLException e){\n            System.out.println(e.toString());\n        }\n        return connection;\n    }\n\n    // 2. Close Connection\n    public void closeConnection(Connection conn) {\n        try {\n            conn.close();\n            System.out.println("Database Connection Closed");\n        }\n        catch (SQLException e){\n            System.out.println(e.toString());\n        }\n    }\n\n    // 3. Get tables in target schema\n    public Vector<String> getTables(String sql, int columnIndex, Connection conn) {\n        Vector<String> tables = new Vector<String>();\n        Statement stmt = null;\n        try {\n            stmt = conn.createStatement();\n            ResultSet rs = stmt.executeQuery(sql);\n            while (rs.next()) {\n                tables.add(rs.getString(columnIndex));\n                // System.out.println(rs.getString(columnIndex));\n            }\n        }\n        catch (SQLException e){\n            System.out.println(e.toString());\n        }\n        return tables;\n    }\n\n    // 4. Get Column Metadata\n    public ArrayList<String> getColumns (String table, String schema, Connection conn) {\n        ArrayList<String> columns = new ArrayList<String>();\n        Statement stmt = null;\n        try {\n            // 4-1 Execute query and get metadata\n\n            stmt = conn.createStatement();\n            String query = "";\n            if (schema == "None") {\n                query = "Select * From " + table + " limit 1;";\n            }\n            else {\n                query = "Select * From " + schema + "." + table + " limit 1;";\n            }\n            ResultSet rs = stmt.executeQuery(query);\n            ResultSetMetaData mt = rs.getMetaData();\n            int columnCount = mt.getColumnCount();\n            // System.out.println("No of Columns is : " + columnCount);\n\n            // 4-2 Get column string and append to ArrayList\n            for (int i = 1; i <= columnCount; i++) {\n                columns.add(mt.getColumnLabel(i).toLowerCase());\n            }\n        }\n        catch (SQLException e) {\n            System.out.println(e.toString());\n        }\n        return columns;\n    }\n}\n'})}),"\n",(0,a.jsx)(t.p,{children:"Main.java"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-java",children:'package CompareColumn;\nimport java.io.FileWriter;\nimport java.io.IOException;\nimport java.io.PrintWriter;\nimport java.sql.Connection;\nimport java.util.ArrayList;\nimport java.util.Iterator;\nimport java.util.Vector;\n\nimport Database.Database;\n\npublic class CompareColumn {\n\n    public static ArrayList<String> getAddedColumns(ArrayList<String> source,\n                            ArrayList<String> target){\n        ArrayList<String> addedColumns = new ArrayList<String>();\n        Iterator<String> iter = source.iterator();\n        while (iter.hasNext()) {\n            String col = iter.next();\n            if (!target.contains(col)) {\n                addedColumns.add(col);\n            }\n        }\n        return addedColumns;\n    }\n\n    public static ArrayList<String> getDroppedColumns(ArrayList<String> source,\n                            ArrayList<String> target){\n        ArrayList<String> droppedColumns = new ArrayList<String>();\n        Iterator<String> iter = target.iterator();\n        while (iter.hasNext()) {\n            String col = iter.next();\n            if (!source.contains(col)) {\n                droppedColumns.add(col);\n            }\n        }\n        return droppedColumns;\n    }\n\n    public static void main(String[] args) {\n\n        // Set variable from argument\n\n        String targetJDBCClassName = args[0];\n        String targetDbUrl = args[1];\n        String targetDbUser = args[2];\n        String targetDbPass = args[3];\n        String targetSchema = args[4];\n\n        String sourceJDBCClassName = args[5];\n        String sourceDbUrl = args[6];\n        String sourceDbUser = args[7];\n        String sourceDbPass = args[8];\n        String sourceSchema = args[9];\n        String sourceSystem = args[10];\n\n        String filePath = args[11];\n\n\n        // (1) Prepare file for writing\n        try {\n            FileWriter outFile = new FileWriter(filePath);\n            PrintWriter outText = new PrintWriter(outFile);\n            outText.println(""Source","Table","Descr","Columns"");\n\n            // (2) Connect to database and compare columns between source & target\n\n\n            Database targetDb = new Database(targetJDBCClassName, targetDbUrl,\n                            targetDbUser, targetDbPass);\n            Connection targetConnection = targetDb.createConnection();\n\n            Database sourceDb = new Database(sourceJDBCClassName, sourceDbUrl,\n                            sourceDbUser, sourceDbPass);\n            Connection sourceConnection = sourceDb.createConnection();\n\n            Vector<String> targetTables = targetDb.getTables(\n                String.format("SELECT table_name FROM information_schema.tables WHERE table_schema = \'%s\';",\n                targetSchema), 1, targetConnection);\n\n            Iterator<String> ilist = targetTables.iterator();\n\n            while (ilist.hasNext()) {\n                String tableName = (String) ilist.next();\n                System.out.println(tableName);\n\n                ArrayList<String> targetColumns = targetDb.getColumns(tableName,\n                                    targetSchema, targetConnection);\n                ArrayList<String> sourceColumns = sourceDb.getColumns(tableName,\n                                    sourceSchema, sourceConnection);\n\n                ArrayList<String> added = getAddedColumns(sourceColumns, targetColumns);\n                ArrayList<String> dropped = getDroppedColumns(sourceColumns, targetColumns);\n\n                if (added.size() > 0 ) {\n                    System.out.println("Columns added to " + tableName + ": " + added);\n                    outText.println(String.format(""%s","%s","Added","%s"",\n                                sourceSystem, tableName, added));\n                }\n                else {\n                    // System.out.println("No column added to " + tableName);\n                }\n                if (dropped.size() > 0 && dropped.size() < targetColumns.size()) {\n                    System.out.println("Columns dropped from " + tableName + ": " + dropped);\n                    outText.println(String.format(""%s","%s","Dropped","%s"",\n                                    sourceSystem, tableName, dropped));\n                }\n                else if (dropped.size() == targetColumns.size()) {\n                    outText.println(String.format(""%s","%s","Table Name Mismatch",""",\n                                    sourceSystem, tableName));\n                }\n                else {\n                    // System.out.println("No column dropped from " + tableName);\n                }\n            }\n            outText.close();\n            targetDb.closeConnection(targetConnection);\n            sourceDb.closeConnection(sourceConnection);\n        }\n        catch (IOException error) {\n            System.out.println(error);\n        }\n        System.exit(0);\n    }\n}\n'})}),"\n",(0,a.jsx)(t.p,{children:"(2017-11-16)"})]})}function m(n={}){const{wrapper:t}={...(0,r.R)(),...n.components};return t?(0,a.jsx)(t,{...n,children:(0,a.jsx)(u,{...n})}):u(n)}},28453:(n,t,e)=>{e.d(t,{R:()=>s,x:()=>i});var a=e(96540);const r={},o=a.createContext(r);function s(n){const t=a.useContext(o);return a.useMemo((function(){return"function"==typeof n?n(t):{...t,...n}}),[t,n])}function i(n){let t;return t=n.disableParentContext?"function"==typeof n.components?n.components(r):n.components||r:s(n.components),a.createElement(o.Provider,{value:t},n.children)}}}]);