"use strict";(self.webpackChunkmydatahack_blog_site=self.webpackChunkmydatahack_blog_site||[]).push([[5135],{57276:(e,t,o)=>{o.r(t),o.d(t,{assets:()=>l,contentTitle:()=>a,default:()=>h,frontMatter:()=>n,metadata:()=>s,toc:()=>c});var i=o(74848),r=o(28453);const n={sidebar_position:6},a="Node.js Libraries for Protecting GraphQL APIs",s={id:"Web/Node.js/protect-graphql-api-node",title:"Node.js Libraries for Protecting GraphQL APIs",description:"If you want to look beyond authentication and authorisation to protect your GraphQL APIs, there are a few Node.js libraries you can have a look at.",source:"@site/docs/Web/Node.js/6.protect-graphql-api-node.md",sourceDirName:"Web/Node.js",slug:"/Web/Node.js/protect-graphql-api-node",permalink:"/docs/Web/Node.js/protect-graphql-api-node",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:6,frontMatter:{sidebar_position:6},sidebar:"tutorialSidebar",previous:{title:"Handling Authorisation With Apollo",permalink:"/docs/Web/Node.js/auth-with-apollo-server"},next:{title:"How to fix the error: \u201cCannot use GraphQLSchema \u201c[object GraphQLSchema]\u201d from another module or realm.\u201d",permalink:"/docs/Web/Node.js/cannot-use-graphqlschema-error"}},l={},c=[];function p(e){const t={a:"a",h1:"h1",li:"li",ol:"ol",p:"p",...(0,r.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(t.h1,{id:"nodejs-libraries-for-protecting-graphql-apis",children:"Node.js Libraries for Protecting GraphQL APIs"}),"\n",(0,i.jsx)(t.p,{children:"If you want to look beyond authentication and authorisation to protect your GraphQL APIs, there are a few Node.js libraries you can have a look at."}),"\n",(0,i.jsxs)(t.ol,{children:["\n",(0,i.jsx)(t.li,{children:"Implementing Rate-Limiting Protection"}),"\n"]}),"\n",(0,i.jsxs)(t.p,{children:["Rate-limiting will prevent too many requests coming in at once. For this, you can start with looking at ",(0,i.jsx)(t.a,{href:"https://www.npmjs.com/package/graphql-rate-limit-directive",children:"graphql-rate-limit-directive"}),". It not only does rate-limiting per query, but also can do rate-limiting per user."]}),"\n",(0,i.jsxs)(t.ol,{start:"2",children:["\n",(0,i.jsx)(t.li,{children:"Implementing Depth-Limiting Protection"}),"\n"]}),"\n",(0,i.jsxs)(t.p,{children:["We can protect our APIs against nested queries by implementing depth-limiting protection. For this, you can check out ",(0,i.jsx)(t.a,{href:"https://www.npmjs.com/package/graphql-depth-limit",children:"graphql-depth-limit"}),"."]}),"\n",(0,i.jsxs)(t.ol,{start:"3",children:["\n",(0,i.jsx)(t.li,{children:"Calculate query complexity and limit queries by complexity cost"}),"\n"]}),"\n",(0,i.jsxs)(t.p,{children:["There is a cool library to calculate your query complexity and limit queries by complexity cost. Implementing this is quite simple with the library called, ",(0,i.jsx)(t.a,{href:"https://www.npmjs.com/package/graphql-validation-complexity",children:"graphql-validation-complexity"}),"."]}),"\n",(0,i.jsx)(t.p,{children:"(2021-05-20)"})]})}function h(e={}){const{wrapper:t}={...(0,r.R)(),...e.components};return t?(0,i.jsx)(t,{...e,children:(0,i.jsx)(p,{...e})}):p(e)}},28453:(e,t,o)=>{o.d(t,{R:()=>a,x:()=>s});var i=o(96540);const r={},n=i.createContext(r);function a(e){const t=i.useContext(n);return i.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function s(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:a(e.components),i.createElement(n.Provider,{value:t},e.children)}}}]);