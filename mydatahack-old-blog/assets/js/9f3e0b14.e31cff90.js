"use strict";(self.webpackChunkmydatahack_blog_site=self.webpackChunkmydatahack_blog_site||[]).push([[8727],{15955:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>o,default:()=>p,frontMatter:()=>a,metadata:()=>s,toc:()=>c});var r=n(74848),i=n(28453);const a={sidebar_position:3},o="How To Get Data From Google Analytics With Java",s={id:"Web/Java/get-data-from-ga",title:"How To Get Data From Google Analytics With Java",description:"In the previous post, we discussed a strategy to ingest Google Analytics data and presented the Python code example (How To Get Data From Google Analytics With Python). Generally speaking, I prefer using Python code to ingest API data, however, every once in a while, we get requested to write a code in a compiled language like Java for whatever reason. So, here is GA data ingestion code example in Java.",source:"@site/docs/Web/Java/3.get-data-from-ga.md",sourceDirName:"Web/Java",slug:"/Web/Java/get-data-from-ga",permalink:"/mydatahack-old-blog/docs/Web/Java/get-data-from-ga",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3},sidebar:"tutorialSidebar",previous:{title:"Automate Salesforce Table Creation With Java",permalink:"/mydatahack-old-blog/docs/Web/Java/automate-sf-table-creation"},next:{title:"Fixing No Compiler is Provided in this Environment Error for Maven Project with Eclipse",permalink:"/mydatahack-old-blog/docs/Web/Java/no-compiler-error"}},l={},c=[];function d(e){const t={code:"code",h1:"h1",p:"p",pre:"pre",strong:"strong",...(0,i.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(t.h1,{id:"how-to-get-data-from-google-analytics-with-java",children:"How To Get Data From Google Analytics With Java"}),"\n",(0,r.jsx)(t.p,{children:"In the previous post, we discussed a strategy to ingest Google Analytics data and presented the Python code example (How To Get Data From Google Analytics With Python). Generally speaking, I prefer using Python code to ingest API data, however, every once in a while, we get requested to write a code in a compiled language like Java for whatever reason. So, here is GA data ingestion code example in Java."}),"\n",(0,r.jsx)(t.p,{children:"For authentication, you need to download Google Analytics API Client Library for Java. The code below is based on the Google documentation here. The report extraction strategy is slightly different from the python code. This example allows you to specify the dimensions and metrics along side with other arguments while the previous example has multiple reports hard coded in the main method. With this strategy, you have a flexibility of changing the report dimensions and metrics without touching the source code. If you need to export multiple reports, you can execute the jar file with different arguments. The code will download data as json and convert to csv in a structured format ready to be uploaded into a relational database."}),"\n",(0,r.jsx)(t.p,{children:"Execution\nComplie the code into an executable jar file and run the command with arguments."}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-bash",children:"java -jar GA_Data_Export.jar <key dir e.g. ./OUA-Key.p12> <service email>\n<json file path e.g. ./ga_export.json> <csv file path e.g. ./ga_export.csv>\n<metrics e.g. ga:users,ga:sessions,ga:bounceRate>\n<dimensions e.g. ga:channelGrouping,ga:date>\n<start-date e.g. 7daysAgo or 2017-01-20>\n<end-date e.g. today or 2017-12-25>\n"})}),"\n",(0,r.jsx)(t.p,{children:(0,r.jsx)(t.strong,{children:"Code"})}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-java",children:'public class GoogleAnalyticsAuth {\n\n    private static final String APPLICATION_NAME = "GA Data Ingestion";\n    private static final JsonFactory JSON_FACTORY = GsonFactory.getDefaultInstance();\n    private static String KEY_FILE_LOCATION = "";\n    private static final HttpTransport HTTP_TRANSPORT = new NetHttpTransport();\n    private static String apiEmail = "";\n    private static String jsonFilePath = "";\n    private static String csvFilePath="";\n\n    public static void main(String[] args) {\n\n        KEY_FILE_LOCATION = args[0];\n        apiEmail = args[1];\n        jsonFilePath = args[2];\n        csvFilePath = args[3];\n\n        String dimsMetric = args[4];\n        String dimsDimension = args[5];\n        String startDate = args[6];\n        String endDate = args[7];\n\n        try {\n            Analytics analytics = initializeAnalytic();\n            String profile = getFirstProfileId(analytics);\n            System.out.println("First Profile Id is: " + profile);\n\n            GaData result = getResults(analytics, profile, dimsMetric, dimsDimension, startDate, endDate);\n\n            generateJsonFile(result, jsonFilePath);\n            generateCsvFile(result, csvFilePath);\n\n            // System.out.println(json.getString("rows"));\n            // System.out.println(generateHeaderString(result));\n\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n\n    }\n\n    // Get Data\n    private static GaData getResults(Analytics analytics, String profileId,\n            String dimsMetric, String dimsDimension,\n            String startDate, String endDate) throws IOException {\n        // Query the Core Reporting API for the number of sessions\n        // String dimsDate = ",ga:date, ga:hour";\n\n        Get get = analytics.data().ga().get("ga:" + profileId, startDate, endDate, dimsMetric);\n        get.setDimensions(dimsDimension);\n        get.setMaxResults(10000);\n\n        return get.execute();\n      }\n\n    private static String generateHeaderString(GaData results) {\n\n        String columns = "";\n        List<ColumnHeaders> header = results.getColumnHeaders();\n        Iterator<ColumnHeaders> iter = header.iterator();\n        while (iter.hasNext()) {\n            columns += iter.next().getName().replace("ga:",  "") + ",";\n        }\n        return columns.substring(0, columns.length() - 1);\n    }\n\n    private static void generateCsvFile(GaData results, String csvFilePath) {\n\n        try {\n            // (1) Prepare files\n            FileWriter fWriter = new FileWriter(csvFilePath);\n            BufferedWriter bWriter = new BufferedWriter(fWriter);\n            PrintWriter out = new PrintWriter(bWriter);\n\n            // (2) Write header\n            out.println(generateHeaderString(results));\n\n            // (3) Get data from GaData object\n            List<List<String>> rows = results.getRows();\n            Iterator<List<String>> iter = rows.iterator();\n            while (iter.hasNext()) {\n                Iterator<String> iter2 = iter.next().iterator();\n                String row = "";\n                while (iter2.hasNext()) {\n                    row += iter2.next() + ",";\n                }\n                out.println(row.substring(0, row.length() - 1));\n\n                // System.out.println(row.substring(0, row.length() - 1));\n            } // end of first while loop\n\n            // (4) Close the file\n            out.close();\n            System.out.println("CSV File has been created.");\n\n        } catch (IOException e) {\n            System.out.println("Problem with csv file IO operation: " + e.toString());\n        }\n    }\n\n    private static void generateJsonFile(GaData results, String filePath) throws JSONException {\n        try {\n            // (1) Prepare files\n            FileWriter fWriter = new FileWriter(filePath);\n            BufferedWriter bWriter = new BufferedWriter(fWriter);\n            PrintWriter out = new PrintWriter(bWriter);\n            // (2) Create JSON Object and write into the file with indentation\n            JSONObject json = new JSONObject(results);\n            out.println(json.toString(4));\n            // (3) Close the file\n            out.close();\n            System.out.println("JSON File has been created.");\n        } catch (IOException e) {\n            System.out.println("Problem with JSON file IO operation: " + e.toString());\n        }\n    }\n\n    // AUTHENTICATION\n\n    /**\n     * Initializes an Analytics service object.\n     *\n     * @return An authorized Analytics service object.\n     * @throws IOException\n     * @throws GeneralSecurityException\n     */\n    private static Analytics initializeAnalytic() throws GeneralSecurityException, IOException {\n\n        HttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();\n        GoogleCredential credential = new GoogleCredential.Builder()\n                .setTransport(HTTP_TRANSPORT)\n                .setJsonFactory(JSON_FACTORY)\n                .setServiceAccountId(apiEmail)\n                .setServiceAccountScopes(Arrays.asList(AnalyticsScopes.ANALYTICS_READONLY))\n                .setServiceAccountPrivateKeyFromP12File(new File(KEY_FILE_LOCATION)).build();\n        /* Using JSON file for secret key\n        GoogleCredential credential = GoogleCredential.fromStream(new FileInputStream(KEY_FILE_LOCATION))\n                                                        .createScoped(AnalyticsScopes.all());\n        */\n\n        return new Analytics.Builder(httpTransport, JSON_FACTORY, credential)\n                .setApplicationName(APPLICATION_NAME).build();\n    }\n\n    private static String getFirstProfileId(Analytics analytics) throws IOException {\n        // Get the first view (profile) ID for the authorized user.\n        String profileId = null;\n\n        // Query for the list of all accounts associated with the service account.\n        Accounts accounts = analytics.management().accounts().list().execute();\n\n        if (accounts.getItems().isEmpty()) {\n          System.err.println("No accounts found");\n        } else {\n          String firstAccountId = accounts.getItems().get(0).getId();\n\n          // Query for the list of properties associated with the first account.\n          Webproperties properties = analytics.management().webproperties()\n              .list(firstAccountId).execute();\n\n          if (properties.getItems().isEmpty()) {\n            System.err.println("No Webproperties found");\n          } else {\n            String firstWebpropertyId = properties.getItems().get(0).getId();\n\n            // Query for the list views (profiles) associated with the property.\n            Profiles profiles = analytics.management().profiles()\n                .list(firstAccountId, firstWebpropertyId).execute();\n\n            if (profiles.getItems().isEmpty()) {\n              System.err.println("No views (profiles) found");\n            } else {\n              // Return the first (view) profile associated with the property.\n              profileId = profiles.getItems().get(0).getId();\n            }\n          }\n        }\n        return profileId;\n      }\n}\n'})}),"\n",(0,r.jsx)(t.p,{children:"(2017-11-11)"})]})}function p(e={}){const{wrapper:t}={...(0,i.R)(),...e.components};return t?(0,r.jsx)(t,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}},28453:(e,t,n)=>{n.d(t,{R:()=>o,x:()=>s});var r=n(96540);const i={},a=r.createContext(i);function o(e){const t=r.useContext(a);return r.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function s(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:o(e.components),r.createElement(a.Provider,{value:t},e.children)}}}]);