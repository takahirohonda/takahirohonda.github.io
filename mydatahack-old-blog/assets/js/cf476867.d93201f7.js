"use strict";(self.webpackChunkmydatahack_blog_site=self.webpackChunkmydatahack_blog_site||[]).push([[3328],{30693:(e,o,n)=>{n.r(o),n.d(o,{assets:()=>a,contentTitle:()=>i,default:()=>d,frontMatter:()=>t,metadata:()=>r,toc:()=>p});var l=n(74848),s=n(28453);const t={sidebar_position:25},i="Adding Polyfills in TypeScript App",r={id:"Web/Frontend/polyfill-ts-app",title:"Adding Polyfills in TypeScript App",description:"There are two ways of adding polyfills.",source:"@site/docs/Web/Frontend/25.polyfill-ts-app.md",sourceDirName:"Web/Frontend",slug:"/Web/Frontend/polyfill-ts-app",permalink:"/mydatahack-old-blog/mydatahack-old-blog/Web/Frontend/polyfill-ts-app",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:25,frontMatter:{sidebar_position:25},sidebar:"tutorialSidebar",previous:{title:"Dispatching Custom Events for Front End Analytics Application",permalink:"/mydatahack-old-blog/mydatahack-old-blog/Web/Frontend/dispatch-custom-event"},next:{title:"Troubleshooting Promise Polyfill Not Working as Expected",permalink:"/mydatahack-old-blog/mydatahack-old-blog/Web/Frontend/troubleshoot-polyfill-not-working"}},a={},p=[];function c(e){const o={code:"code",h1:"h1",p:"p",pre:"pre",...(0,s.R)(),...e.components};return(0,l.jsxs)(l.Fragment,{children:[(0,l.jsx)(o.h1,{id:"adding-polyfills-in-typescript-app",children:"Adding Polyfills in TypeScript App"}),"\n",(0,l.jsx)(o.p,{children:"There are two ways of adding polyfills."}),"\n",(0,l.jsx)(o.p,{children:"(1) Adding polyfill script from Polyfill.io"}),"\n",(0,l.jsx)(o.p,{children:"It adds ployfills at the page level. This is preferred because it decouples polyfills from the bundles. It makes the bundle size smaller. When we have multiple bundles and each is having its own polyfills, we need to add duplicate polyfills. The worst case scenario is that a polyfill from one bundle can override another polyfill from the other bundles. In this case, polyfill acts strangely and it is hard to debug like this example."}),"\n",(0,l.jsx)(o.pre,{children:(0,l.jsx)(o.code,{className:"language-html",children:'<script src="https://polyfill.io/v3/polyfill.min.js?Promise%2CPromise.prototype.finally"><\/script>\n'})}),"\n",(0,l.jsx)(o.p,{children:"(2) Install polyfills and add them in the script tag"}),"\n",(0,l.jsx)(o.p,{children:"There are so many polyfills out there. My recommendation is core-js. It includes a bunch of polyfills and you can pick and choose. Core-js may not be enough if you are polyfilling functions on HTML elements such as scrollHeight or fetch. We can also install individual polyfills."}),"\n",(0,l.jsx)(o.p,{children:"Here is the example."}),"\n",(0,l.jsx)(o.pre,{children:(0,l.jsx)(o.code,{className:"language-bash",children:"npm i --save-dev whatwg-fetch element-scroll-polyfill core-js @types/core-js @types/whatwg-fetch\n"})}),"\n",(0,l.jsx)(o.p,{children:"Once those polyfills are installed, we can add import statements at the top of the entry file such as main.ts."}),"\n",(0,l.jsx)(o.pre,{children:(0,l.jsx)(o.code,{className:"language-js",children:'import "core-js/features/promise";\nimport "core-js/features/array/for-each";\nimport "core-js/features/array/from";\nimport "core-js/features/object/assign";\nimport "core-js/features/object/values";\nimport "core-js/features/string/includes";\nimport "core-js/es/map";\nimport "core-js/es/set";\nimport "element-scroll-polyfill";\nimport "whatwg-fetch";\n'})}),"\n",(0,l.jsx)(o.p,{children:"If you use the latest version of core-js, promise includes finally. If you decide to use promise-polyfill, you need to include finally. The same goes for older version of core-js, which is babel-core."}),"\n",(0,l.jsx)(o.p,{children:(0,l.jsx)(o.code,{children:"npm i --save-dev promise @types/promise promise-polyfill @types/promise-polyfill @types/promise.prototype.finally promise.prototype.finally"})}),"\n",(0,l.jsx)(o.p,{children:"For TypeScript, the path is slightly different from the documentation. Adding these lines at the top of the entry file works fine."}),"\n",(0,l.jsx)(o.pre,{children:(0,l.jsx)(o.code,{className:"language-js",children:'import "promise-polyfill/src/polyfill";\nimport "promise-polyfill/src/finally";\n'})}),"\n",(0,l.jsx)(o.p,{children:"On the final noe, with gulp and rollup, we need rollup-plugin-commonjs to transpile require used in core-js if you are getting require error."}),"\n",(0,l.jsx)(o.pre,{children:(0,l.jsx)(o.code,{className:"language-js",children:"const commonjs = require('rollup-plugin-commonjs');\n\u2026\n plugins: [\n      rollupTypescript({\n        cacheRoot: '.rollupcache',\n        tsconfigOverride: {\n          compilerOptions: {\n            removeComments: true,\n          }\n        }\n      }),\n      rollupNodeResolve({\n        customResolveOptions: {\n          moduleDirectory: 'node_modules'\n        }\n      }),\n      commonjs(),\n      rollupUglify({\n        compress: {\n          drop_console: false\n        }\n      })\n    ]\n"})}),"\n",(0,l.jsx)(o.p,{children:"(2020-05-28)"})]})}function d(e={}){const{wrapper:o}={...(0,s.R)(),...e.components};return o?(0,l.jsx)(o,{...e,children:(0,l.jsx)(c,{...e})}):c(e)}},28453:(e,o,n)=>{n.d(o,{R:()=>i,x:()=>r});var l=n(96540);const s={},t=l.createContext(s);function i(e){const o=l.useContext(t);return l.useMemo((function(){return"function"==typeof e?e(o):{...o,...e}}),[o,e])}function r(e){let o;return o=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:i(e.components),l.createElement(t.Provider,{value:o},e.children)}}}]);