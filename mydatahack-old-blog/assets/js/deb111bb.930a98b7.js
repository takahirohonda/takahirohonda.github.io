"use strict";(self.webpackChunkmydatahack_blog_site=self.webpackChunkmydatahack_blog_site||[]).push([[6815],{11888:(n,e,t)=>{t.r(e),t.d(e,{assets:()=>d,contentTitle:()=>r,default:()=>p,frontMatter:()=>i,metadata:()=>a,toc:()=>c});var o=t(74848),s=t(28453);const i={sidebar_position:10},r="A Comprehensive Guide for Reading and Writing JSON with Python",a={id:"data-ingestion/json-with-python",title:"A Comprehensive Guide for Reading and Writing JSON with Python",description:"A Comprehensive Guide for Reading and Writing JSON with Python",source:"@site/docs/data-ingestion/10.json-with-python.md",sourceDirName:"data-ingestion",slug:"/data-ingestion/json-with-python",permalink:"/mydatahack-old-blog/mydatahack-old-blog/data-ingestion/json-with-python",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:10,frontMatter:{sidebar_position:10},sidebar:"tutorialSidebar",previous:{title:"Bulk Loading Postgres with Node.js",permalink:"/mydatahack-old-blog/mydatahack-old-blog/data-ingestion/bulk-load-pg-node"},next:{title:"How to Ingest FullStory Data Export Extracts with Python",permalink:"/mydatahack-old-blog/mydatahack-old-blog/data-ingestion/fullstory-data-python"}},d={},c=[];function l(n){const e={code:"code",h1:"h1",p:"p",pre:"pre",...(0,s.R)(),...n.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(e.h1,{id:"a-comprehensive-guide-for-reading-and-writing-json-with-python",children:"A Comprehensive Guide for Reading and Writing JSON with Python"}),"\n",(0,o.jsx)(e.p,{children:"A Comprehensive Guide for Reading and Writing JSON with Python"}),"\n",(0,o.jsx)(e.p,{children:"The json module enables you to read JSON object from a file or HTTP response and write it to a file. It is worthwhile to spend a little bit of time to understand a few key functions that are often used for ingesting json data."}),"\n",(0,o.jsx)(e.p,{children:"In fact, if you understand these three functions below, you are pretty much set for any JSON data ingestion."}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-python",children:"load()\nloads()\ndumps()\n"})}),"\n",(0,o.jsx)(e.p,{children:"Before getting into actual code, let\u2019s see what each function does."}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-python",children:"json.load()\n"})}),"\n",(0,o.jsx)(e.p,{children:"The load() function read a json file and returns a json object. In Python, it is a dictionary. Technically speaking, it deserialises a json object into a Python object, dictionary, by using the conversion table."}),"\n",(0,o.jsx)(e.p,{children:"You first need to read the json file. If you convert it to a string and write it to a file, the file contains the string version of dictionary."}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-python",children:"import json\n# Loading File\nf =open('/tmp/json_pretty_test.json', 'r')\njson_obj = json.load(f)\n# or\nwith open('/tmp/json_pretty_test.json', 'r') as handle:\n    json_obj = json.load(handle)\n\nprint(type(json_obj))\n\nfor line in json_obj:\n    print(line)\n"})}),"\n",(0,o.jsx)(e.p,{children:"As you can see in the output, it is dictionary, not JSON."}),"\n",(0,o.jsx)(e.p,{children:"json.loads()"}),"\n",(0,o.jsx)(e.p,{children:"\u2018s\u2019 means string. It takes string as an input instead of file object. Type comes out as dictionary. Just like the load() function, it de-serialises a json string into a Python object, dictionary."}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-python",children:'string = \'{"id":1123,"name":"John"}\'\njson_obj = json.loads(string)\nprint(json_obj)\nprint(type(json_obj))\njson.dumps()\n'})}),"\n",(0,o.jsx)(e.p,{children:"The dumps() function returns a string representing a json object from Python dictionary object. Once you load a json file with json.load(), you can pass the resulting object to json.dumps() to get the string representation of json, which is can be written to a json file."}),"\n",(0,o.jsx)(e.p,{children:"This is the opposite of load or loads. It serialise the dictionary into json string by using the conversion table. The conversion table maps Python object to json object. For example, None becomes null, True becomes true, single quote becomes double quote and so on."}),"\n",(0,o.jsx)(e.p,{children:"Note that json.dumps() does not work on entire json_obj. You need to apply it to each dictionary in the for loop."}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-python",children:"with open('/tmp/json_pretty_test.json', 'r') as handle:\n    json_obj = json.load(handle)\n\nfor line in json_obj:\n    dumped = json.dumps(line)\n    print(type(dumped))\n    print(dumped)\n"})}),"\n",(0,o.jsx)(e.p,{children:"As you can see in the output, the data type is string. Python data structure for dictionary is converted to json data structure (double quote instead of single quote etc)."}),"\n",(0,o.jsx)(e.p,{children:"You can pretty print Json by adding the indent argument to json.dumps()."}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-python",children:"json.dumps(line, indent=4)\n"})}),"\n",(0,o.jsx)(e.p,{children:"Code Examples"}),"\n",(0,o.jsx)(e.p,{children:"Now that we got the basics, let\u2019s have a look at the usage of these functions in the context of REST API data ingestion. We are using JSONPlaceholder which provides free API endpoints for example JSON data. The site is great for testing or experimenting with JSON over REST API. To make API calls, we are using the requests module."}),"\n",(0,o.jsx)(e.p,{children:"(1) Using json.loads() and json.dumps()"}),"\n",(0,o.jsx)(e.p,{children:"The requests module has json() function which deserialise the JSON object in the response into a dictionary. The json_ph_api() returns JSON data in the dictionary format."}),"\n",(0,o.jsx)(e.p,{children:"write_json() uses json.dumps() to serialise each dictionary object returned from json_ph_api() into a json string and write it to a file."}),"\n",(0,o.jsx)(e.p,{children:"Write_pretty_json() creates a pretty json file by using the indent argument in json.dumps()."}),"\n",(0,o.jsx)(e.p,{children:"json_file_check() prints the first 3 lines of the output from json_ph_api()."}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-python",children:"import json\nimport requests\n\ndef json_ph_api(resource):\n    '''Get example json data from jsonplaceholder.typicode.com.\n    Returns Python dictionary object'''\n    json_data = None\n    endpoint = 'https://jsonplaceholder.typicode.com/{}'.format(resource)\n    print('Target endpoint is {}'.format(endpoint))\n    r = requests.get(endpoint)\n    if r.status_code == 200:\n        print('API Call Successful')\n        # data returned with r.json() is a dictionary object\n        json_data = r.json()\n    else:\n        print('API call failed with status code: {}'.format(r.status_code))\n    return json_data\n\ndef json_file_check(json_object):\n    '''This function prints first 3 records\n    of the input json object'''\n    counter = 0\n    for i in json_object:\n        if counter < 3:\n            print(i)\n            counter += 1\n        else:\n            break\n\ndef write_json(json_obj, file_path):\n    '''Write Json object to a file'''\n    f = open(file_path, 'w', encoding='utf-8')\n    for line in json_obj:\n        # json_obj is stored as dictionaries.\n        # json.dumps convert dictionary to json\n        f.write(json.dumps(line))\n        f.write('\\n')\n    print('Json file created as {}'.format(file_path))\n    f.close()\n\ndef write_pretty_json(json_obj, file_path):\n    '''Write Json object in a pretty format'''\n    f = open(file_path, 'w')\n    f.write(json.dumps(json_obj, indent=4))\n    print('Json file with pretty format created as {}'.format(file_path))\n\n\nj_obj = json_ph_api('posts')\n\nwrite_json(j_obj, '/tmp/json_test.json')\nwrite_pretty_json(j_obj, '/tmp/json_pretty_test.json')\n"})}),"\n",(0,o.jsx)(e.p,{children:"(2) Reading and writing JSON file with json.load()"}),"\n",(0,o.jsx)(e.p,{children:"We can read the json file created above and write it to another json file with write_json(). The file object needs to be passed into json.load() before writing."}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-python",children:"with open('/tmp/json_pretty_test.json', 'r') as handle:\n    j = json.load(handle)\n\njson_file_check(j)\nwrite_json(j, '/tmp/json_test2.json')\n"})}),"\n",(0,o.jsx)(e.p,{children:"(3) Example of json.load()"}),"\n",(0,o.jsx)(e.p,{children:"The response is converted to a String object with .text in this example. The string object needs to be converted into a dictionary with json.load() and printed in the console with json_file_check()."}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-python",children:"def json_ph_api_str(resource):\n    '''Get example json data from jsonplaceholder.typicode.com.\n    Returns response as String'''\n    str_data = None\n    endpoint = 'https://jsonplaceholder.typicode.com/{}'.format(resource)\n    print('Target endpoint is {}'.format(endpoint))\n    r = requests.get(endpoint)\n    if r.status_code == 200:\n        print('API Call Successful')\n        # r.json() is r dictionaries. Use json.dumps to convert dict to json data type.\n        str_data = r.text\n    else:\n        print('API call failed with status code: {}'.format(r.status_code))\n    return str_data\n\njson_string = json_ph_api_str('posts')\n# json.load does not work here.\nj2 = json.loads(json_string)\njson_file_check(j2)\n"})}),"\n",(0,o.jsx)(e.p,{children:"(2018-04-02)"})]})}function p(n={}){const{wrapper:e}={...(0,s.R)(),...n.components};return e?(0,o.jsx)(e,{...n,children:(0,o.jsx)(l,{...n})}):l(n)}},28453:(n,e,t)=>{t.d(e,{R:()=>r,x:()=>a});var o=t(96540);const s={},i=o.createContext(s);function r(n){const e=o.useContext(i);return o.useMemo((function(){return"function"==typeof n?n(e):{...e,...n}}),[e,n])}function a(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(s):n.components||s:r(n.components),o.createElement(i.Provider,{value:e},n.children)}}}]);