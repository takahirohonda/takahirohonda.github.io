"use strict";(self.webpackChunkmydatahack_blog_site=self.webpackChunkmydatahack_blog_site||[]).push([[306],{22494:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>d,contentTitle:()=>i,default:()=>p,frontMatter:()=>s,metadata:()=>a,toc:()=>c});var o=t(74848),r=t(28453);const s={sidebar_position:51},i="How to Set up React Test with Mocha and Enzyme for TypeScript",a={id:"Web/Frontend/mocha-enzyme-ts",title:"How to Set up React Test with Mocha and Enzyme for TypeScript",description:"Enzyme is created by Airbnb for React component testing. You can easily test components\u2019 output and it works with different testing frameworks like Mocha or Jest. This post focuses on setting up the test environment with Mocha for TypeScript.",source:"@site/docs/Web/Frontend/51.mocha-enzyme-ts.md",sourceDirName:"Web/Frontend",slug:"/Web/Frontend/mocha-enzyme-ts",permalink:"/mydatahack-old-blog/docs/Web/Frontend/mocha-enzyme-ts",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:51,frontMatter:{sidebar_position:51},sidebar:"tutorialSidebar",previous:{title:"Setting up Custom Webpack for TypeScript React",permalink:"/mydatahack-old-blog/docs/Web/Frontend/custom-webpack"},next:{title:"Sorting JSON Array by Multiple Keys with JavaScript",permalink:"/mydatahack-old-blog/docs/Web/Frontend/json-array-sort"}},d={},c=[];function l(e){const n={code:"code",h1:"h1",p:"p",pre:"pre",...(0,r.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.h1,{id:"how-to-set-up-react-test-with-mocha-and-enzyme-for-typescript",children:"How to Set up React Test with Mocha and Enzyme for TypeScript"}),"\n",(0,o.jsx)(n.p,{children:"Enzyme is created by Airbnb for React component testing. You can easily test components\u2019 output and it works with different testing frameworks like Mocha or Jest. This post focuses on setting up the test environment with Mocha for TypeScript."}),"\n",(0,o.jsx)(n.p,{children:"If you are used to JavaScript and fairly new to TypeScript, setting up unit test can be cumbersome. Basically, TypeScript complains about almost everything that you used to do with JavaScript. However, once you get your head around it, it becomes easier. When I set this up first time, it took me a long time to figure out why TypeScript is complaining about things like window does not exist on type Global or mount method not working because a global document is not loaded. But, getting this work helped me to understand TypeScript a little bit better."}),"\n",(0,o.jsx)(n.p,{children:"The complete example can be found on this repo."}),"\n",(0,o.jsx)(n.p,{children:"Let\u2019s get started."}),"\n",(0,o.jsx)(n.p,{children:"(1) Install dependencies"}),"\n",(0,o.jsx)(n.p,{children:"With TypeScript, you need to install a regular module and @types module. Most of the common modules has @types available these days. So, you can simply install the regular module as well as the one prefixed with @types. Some modules are written in TypeScript and you don\u2019t need to install @types. For example, a test coverage tool, istanbul is written in TypeScript and does not require any type module."}),"\n",(0,o.jsx)(n.p,{children:"Using chai for assertion library. ts-node is also required to run TypeScript in the node environment. Later, you need to register ts-node in the mocha command."}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:"npm i chai mocha ts-node --save-dev\nnpm i @types/chai @types/mocha @types/sinon --save-dev\n"})}),"\n",(0,o.jsx)(n.p,{children:"Now, let\u2019s install dependencies for Enzyme. Mocha doesn\u2019t run tests in a Node environment, not in a browser environment. Therefore, enzyme\u2019s mount API requires a DOM. To simulate a browser environment, we are using JSDOM."}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:"npm i enzyme jsdom jsdom-global enzyme-adapter-react-16\nnpm i @types/enzyme @types/jsdom @types/enzyme-adapter-react-16 --save-dev\n"})}),"\n",(0,o.jsx)(n.p,{children:"(2) Creating test setup file"}),"\n",(0,o.jsx)(n.p,{children:"Node environment where mocha runs tests does not have browser properties. We first need to add types for required browser environment properties by extending interface and adding properties.Newly created globalNode object has window, document and navigator properties. All we need to do is assign JSDOM window object to the window. This will create window globally."}),"\n",(0,o.jsx)(n.p,{children:"Here is the entire test set up code. Configuring enzyme adapter is the same as regular JavaScript."}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-tsx",children:"import { JSDOM } from 'jsdom'\n\ninterface Global extends NodeJS.Global {\nwindow: Window,\ndocument: Document,\nnavigator: {\nuserAgent: string\n}\n}\n\nconst globalNode: Global = {\nwindow: window,\ndocument: window.document,\nnavigator: {\nuserAgent: 'node.js',\n},\n...global\n}\n\n// Simulate window for Node.js\nif (!globalNode.window && !globalNode.document) {\nconst { window } = new JSDOM('<!doctype html><html><body></body></html>', {\nbeforeParse(win) {\nwin.scrollTo = () => {};\n},\npretendToBeVisual: false,\nuserAgent: 'mocha',\n});\n\n// Configure global variables which like to be used in testing\nglobalNode.window = window;\nglobalNode.document = window.document;\nglobalNode.navigator = window.navigator;\n}\n\nimport _ as enzyme from 'enzyme';\nimport _ as Adapter from 'enzyme-adapter-react-16';\nenzyme.configure({ adapter: new Adapter() });\n"})}),"\n",(0,o.jsx)(n.p,{children:"(3) Getting the test script right"}),"\n",(0,o.jsx)(n.p,{children:"In package.json file, you can use the test script as below. Component test uses jsx file because you need to use React. Make sure to include both .ts and .tsx files."}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.code,{children:"mocha -r ts-node/register -r jsdom-global/register -r unitTestSetup.ts **/test/**/_.ts test/\\*\\*/_.tsx --recursive --timeout 5000"})}),"\n",(0,o.jsx)(n.p,{children:"(4) Simple test example"}),"\n",(0,o.jsx)(n.p,{children:"Here is the sample component test example. It should work by typing npm test"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-tsx",children:"import \\* as React from 'react';\nimport { mount } from 'enzyme';\nimport { expect } from 'chai';\nimport FormSectionHeader from '../src/components/FormSectionHeader';\n\ndescribe('<Form /> component test', () => {\n\nit('should have an input field for bookTitle', () => {\n\n    const component = mount(<FormSectionHeader  headerTitle=\"Hello\"/>)\n    expect(component.find('h4').text()).to.equal(\"Hello\")\n\n})\n})\n"})}),"\n",(0,o.jsx)(n.p,{children:"Common Errors"}),"\n",(0,o.jsx)(n.p,{children:"Here are the list of common errors and how to handle them."}),"\n",(0,o.jsx)(n.p,{children:"It looks like you called mount() without a global document being loaded"}),"\n",(0,o.jsx)(n.p,{children:"Mocha doesn\u2019t run the test in a browser environment & enzyme\u2019s mount API requires a DOM. JSDOM is required to simulate a browser environment in a Node environment.\n\u2018window is not defined\u2019"}),"\n",(0,o.jsxs)(n.p,{children:["It can be overcome by installing jsdom-global and adding ",(0,o.jsx)(n.code,{children:"-r jsdom-global/register"})," in mocha command\nProperty \u2018window\u2019 does not exist on type \u2018Global\u2019 error"]}),"\n",(0,o.jsx)(n.p,{children:"When we create setup file for JSDOM (unitTestSetup.ts on the root folder), we need to add browser properties to Node global environment as it does not have browser properties. We can extend NodeJS.Global properties by adding interface and redefining the global variable with global Node variable."}),"\n",(0,o.jsx)(n.p,{children:"(2019-03-11)"})]})}function p(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(l,{...e})}):l(e)}},28453:(e,n,t)=>{t.d(n,{R:()=>i,x:()=>a});var o=t(96540);const r={},s=o.createContext(r);function i(e){const n=o.useContext(s);return o.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:i(e.components),o.createElement(s.Provider,{value:n},e.children)}}}]);