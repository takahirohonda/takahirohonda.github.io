"use strict";(self.webpackChunkmydatahack_blog_site=self.webpackChunkmydatahack_blog_site||[]).push([[7548],{44031:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>d,contentTitle:()=>s,default:()=>u,frontMatter:()=>r,metadata:()=>i,toc:()=>c});var a=n(74848),o=n(28453);const r={sidebar_position:2},s="Data Provider Pattern with Jest",i={id:"Web/Node.js/data-provider-pattern-jest",title:"Data Provider Pattern with Jest",description:"Jest has the for method that enables us to do a data provider pattern. for works on both describe and it. It is better to use it in describe so that the assertion messages in it can be dynamically generated.",source:"@site/docs/Web/Node.js/2.data-provider-pattern-jest.md",sourceDirName:"Web/Node.js",slug:"/Web/Node.js/data-provider-pattern-jest",permalink:"/docs/Web/Node.js/data-provider-pattern-jest",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2},sidebar:"tutorialSidebar",previous:{title:"9 Tips for using Semantic Release",permalink:"/docs/Web/Node.js/1.10-tips-semantic-release"},next:{title:"How to Avoid Async Try-Catch Hell",permalink:"/docs/Web/Node.js/async-try-catch-hell"}},d={},c=[];function p(e){const t={code:"code",h1:"h1",p:"p",pre:"pre",...(0,o.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(t.h1,{id:"data-provider-pattern-with-jest",children:"Data Provider Pattern with Jest"}),"\n",(0,a.jsxs)(t.p,{children:["Jest has the ",(0,a.jsx)(t.code,{children:"for"})," method that enables us to do a data provider pattern. for works on both ",(0,a.jsx)(t.code,{children:"describe"})," and ",(0,a.jsx)(t.code,{children:"it"}),". It is better to use ",(0,a.jsx)(t.code,{children:"it"})," in ",(0,a.jsx)(t.code,{children:"describe"})," so that the assertion messages in it can be dynamically generated."]}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-js",children:'const getAnimal = (sound) => {\n  switch (sound) {\n    case "meow":\n      return "Cat";\n    case "woof":\n      return "Dog";\n    case "pawoo":\n      return "Elephant";\n    default:\n      return "Human";\n  }\n};\n\nconst animalDataProvider = [\n  {\n    input: "meow",\n    expectedOutput: "Cat",\n  },\n  {\n    input: "woof",\n    expectedOutput: "Dog",\n  },\n  {\n    input: "pawoo",\n    expectedOutput: "Elephant",\n  },\n  {\n    input: "whatever",\n    expectedOutput: "Human",\n  },\n];\n\ndescribe.each(animalDataProvider)("getAnimal", (data) => {\n  it(`should return correct animal with input \'${data.input}\'`, () => {\n    console.log(data.input);\n    const animal = getAnimal(data.input);\n    expect(animal).toEqual(data.expectedOutput);\n  });\n});\n'})}),"\n",(0,a.jsx)(t.p,{children:"(2021/09/13)"})]})}function u(e={}){const{wrapper:t}={...(0,o.R)(),...e.components};return t?(0,a.jsx)(t,{...e,children:(0,a.jsx)(p,{...e})}):p(e)}},28453:(e,t,n)=>{n.d(t,{R:()=>s,x:()=>i});var a=n(96540);const o={},r=a.createContext(o);function s(e){const t=a.useContext(r);return a.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function i(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:s(e.components),a.createElement(r.Provider,{value:t},e.children)}}}]);