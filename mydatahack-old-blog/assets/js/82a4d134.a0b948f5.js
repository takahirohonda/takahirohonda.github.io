"use strict";(self.webpackChunkmydatahack_blog_site=self.webpackChunkmydatahack_blog_site||[]).push([[2530],{58966:(e,o,t)=>{t.r(o),t.d(o,{assets:()=>l,contentTitle:()=>a,default:()=>c,frontMatter:()=>r,metadata:()=>s,toc:()=>d});var n=t(74848),i=t(28453);const r={sidebar_position:4},a="Tips to Be a Good Code Reviewer",s={id:"Infrastructure/Opinions/be-good-code-reviewer",title:"Tips to Be a Good Code Reviewer",description:"Reviewing other people\u2019s code is an important skill as a software engineer. Here are some tips to be a good code reviewer.",source:"@site/docs/Infrastructure/Opinions/4.be-good-code-reviewer.md",sourceDirName:"Infrastructure/Opinions",slug:"/Infrastructure/Opinions/be-good-code-reviewer",permalink:"/mydatahack-old-blog/mydatahack-old-blog/Infrastructure/Opinions/be-good-code-reviewer",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:4,frontMatter:{sidebar_position:4},sidebar:"tutorialSidebar",previous:{title:"ETL Developers are Dead",permalink:"/mydatahack-old-blog/mydatahack-old-blog/Infrastructure/Opinions/etl-dev-is-dead"},next:{title:"How to Raise Good Pull Requests",permalink:"/mydatahack-old-blog/mydatahack-old-blog/Infrastructure/Opinions/raise-good-pr"}},l={},d=[{value:"General Rule",id:"general-rule",level:2},{value:"What you should look for",id:"what-you-should-look-for",level:2},{value:"What you shouldn\u2019t look for",id:"what-you-shouldnt-look-for",level:2}];function u(e){const o={h1:"h1",h2:"h2",p:"p",...(0,i.R)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(o.h1,{id:"tips-to-be-a-good-code-reviewer",children:"Tips to Be a Good Code Reviewer"}),"\n",(0,n.jsx)(o.p,{children:"Reviewing other people\u2019s code is an important skill as a software engineer. Here are some tips to be a good code reviewer."}),"\n",(0,n.jsx)(o.h2,{id:"general-rule",children:"General Rule"}),"\n",(0,n.jsx)(o.p,{children:"Generally speaking, we should prioritise PR over your task if you are assigned as a reviewer. Any lingering pull requests are blockers to the team.\nBe explicit about nit (e.g. Nit: variable name might be better with aaaa).\nBe explicit about the change suggestion (e.g. if makes it easier for the developer to understand, add the proposed code).\nDo not use obscure acronyms.\nMake sure to include the detailed reasons for your suggested change.\nMake sure to spend time with the reviewee to do pair programming if they are struggling with the change you suggested. Reviewer cannot just throw a comment. They have to take responsibility to help reviewee. I don\u2019t want us to make excuse of not finding time. PR should be our priority. I have seen a reviewer just throwing comments and reviewee has no idea about how to change.\nDon\u2019t hesitate to ask questions if something is not clear."}),"\n",(0,n.jsx)(o.h2,{id:"what-you-should-look-for",children:"What you should look for"}),"\n",(0,n.jsx)(o.p,{children:"Legibility \u2013 Legible code is more reusable, bug-free, and future-proof.\nConsistency \u2013 This makes a code base easier to read and understand, helps prevent bugs, and facilitates collaboration between regular and new/infrequent developers.\nCode Quality \u2013 Improve internal code quality and maintainability (readability, uniformity, understandability)\nLooking at the requirements \u2013 Are all cases fully implemented?\nStyle guidelines \u2013 Does the new code conform to existing guidelines?\nFinding defects \u2013 Such as performance problems, security vulnerabilities or obvious logic errors in the code?\nLearning/Knowledge transfer \u2013 Help in transferring knowledge about the codebase, solution approaches, expectations regarding quality, etc; both to the reviewers as well as to the author.\nMutual Responsibility \u2013 Increase a sense of collective code ownership and solidarity."}),"\n",(0,n.jsx)(o.h2,{id:"what-you-shouldnt-look-for",children:"What you shouldn\u2019t look for"}),"\n",(0,n.jsx)(o.p,{children:"Formatting Suggestions (Linting) \u2013 That is the job of the linters. If the linters are not picking up the linting error, consider to update the linting rules.\nQuibble over details If there is an unresolvable disagreement between reviewer and reviewee just escalate it to (tech lead/ manager).\nMaking it personal \u2013 Be professional in your criticism.\nVague generalities \u2013 Be explicit about your intention.\nFinding better solutions that change the design completely \u2013 Solution design should be completed and thoroughly reviewed prior to development."}),"\n",(0,n.jsx)(o.p,{children:"(2020-10-10)"})]})}function c(e={}){const{wrapper:o}={...(0,i.R)(),...e.components};return o?(0,n.jsx)(o,{...e,children:(0,n.jsx)(u,{...e})}):u(e)}},28453:(e,o,t)=>{t.d(o,{R:()=>a,x:()=>s});var n=t(96540);const i={},r=n.createContext(i);function a(e){const o=n.useContext(r);return n.useMemo((function(){return"function"==typeof e?e(o):{...o,...e}}),[o,e])}function s(e){let o;return o=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:a(e.components),n.createElement(r.Provider,{value:o},e.children)}}}]);