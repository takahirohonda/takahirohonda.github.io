"use strict";(self.webpackChunkmydatahack_blog_site=self.webpackChunkmydatahack_blog_site||[]).push([[1968],{40432:(e,s,n)=>{n.r(s),n.d(s,{assets:()=>c,contentTitle:()=>o,default:()=>u,frontMatter:()=>r,metadata:()=>l,toc:()=>p});var t=n(74848),i=n(28453);const r={sidebar_position:46},o="My Gulp Job Example",l={id:"Web/Frontend/gulp-job-examples",title:"My Gulp Job Example",description:"Gulp is a build tool that automate application builds. It is usually used for front end build, but you can also use it for backend application build (e.g. automating .NET application build with gulp-msbuild).",source:"@site/docs/Web/Frontend/46.gulp-job-examples.md",sourceDirName:"Web/Frontend",slug:"/Web/Frontend/gulp-job-examples",permalink:"/docs/Web/Frontend/gulp-job-examples",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:46,frontMatter:{sidebar_position:46},sidebar:"tutorialSidebar",previous:{title:"Clarifying Which Babel to Use for Compiling React Today",permalink:"/docs/Web/Frontend/babel-react"},next:{title:"Customising Cognito SignIn UI for aws-amplify-react with TypeScript",permalink:"/docs/Web/Frontend/cognito-signin-ui"}},c={},p=[];function a(e){const s={code:"code",h1:"h1",p:"p",pre:"pre",...(0,i.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(s.h1,{id:"my-gulp-job-example",children:"My Gulp Job Example"}),"\n",(0,t.jsx)(s.p,{children:"Gulp is a build tool that automate application builds. It is usually used for front end build, but you can also use it for backend application build (e.g. automating .NET application build with gulp-msbuild)."}),"\n",(0,t.jsx)(s.p,{children:"When it comes to front end build automation, gulp is the most flexible and powerful build tool. The tasks can be written in JavaScript. The heavy lifting like compiling and minifying SASS, JavaScript or TypeScript can be handled by using existing gulp modules. It can put vendor scripts and your custom scripts into a single main file. The performance is good with JavaScript asynch executions and the ability to execute tasks in parallel."}),"\n",(0,t.jsx)(s.p,{children:"Gulp is easy to learn. It is the tool that has extremely high effort-rewards ratio. When it comes to gulp, you only needs to know four functions."}),"\n",(0,t.jsx)(s.p,{children:"gulp.task defines the task. You can simply pass the call back function that defines the actual task."}),"\n",(0,t.jsx)(s.p,{children:"gulp.src is the folder where the task is executed."}),"\n",(0,t.jsx)(s.p,{children:"gulp.des is the folder where the build product goes."}),"\n",(0,t.jsx)(s.p,{children:"gulp.watch enables hot loading. It triggers build jobs whenever the file changes."}),"\n",(0,t.jsx)(s.p,{children:"That is it. Once you know them, all you need to do is to use gulp modules that do all the magic."}),"\n",(0,t.jsx)(s.p,{children:"Now, let me show you the gulp task I made. It used to compile front end code in this repo (Sakura Translation Frontend example). It copies images, compiles javascript and sass. You can use this as a boilerplate or expand your existing gulp job."}),"\n",(0,t.jsx)(s.p,{children:"This is my gulp job!"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-js",children:"const gulp = require('gulp');\nconst imgmin = require('gulp-imagemin');\nconst uglify = require('gulp-uglify');\nconst concat = require('gulp-concat');\nconst sass = require('gulp-sass');\nconst runSequence = require('gulp4-run-sequence');\nconst cleanCSS = require('gulp-clean-css');\nconst browserSync = require('browser-sync').create();\nconst useref = require('gulp-useref');\nconst gulpIf = require('gulp-if');\nconst sourcemaps = require('gulp-sourcemaps');\nconst lazypipe = require('lazypipe');\nconst order = require('gulp-order');\n\n// Default task only gets executed when typed only gulp\ngulp.task('default', async () =>  {\n  console.log('Please add the task name. Default task is not defined.');\n});\n\n// Moving all html to dist folder\ngulp.task('copyAllHTML', async function()  {\n  gulp.src('src/*.html')\n    .pipe(gulp.dest('dist'));\n});\n\n// Moving images to dist folder\ngulp.task('minifyImgs', function(done) {\n  gulp.src('src/img/**/*')\n  .pipe(imgmin())\n  .pipe(gulp.dest('dist/img'))\n  done();\n});\n\n// Moving page specific minified js to dist folder\ngulp.task('moveMinifiedJs', async () => {\n  gulp.src('src/scripts/page-specific/*.js')\n  .pipe(gulp.dest('src/js/page-specific'))\n  .pipe(gulp.dest('dist/js/page-specific'))\n});\n\nconst sourceJS = [\n  'node_modules/@babel/polyfill/dist/polyfill.js',\n  'src/scripts/vendor/*.js',\n  'src/scripts/custom/*.js'\n];\nconst jsOrder = [\n  'node_modules/@babel/polyfill/dist/polyfill.js',\n  'src/scripts/vendor/jquery-3.4.1.min.js',\n  'src/scripts/vendor/popper.min.js',\n  'src/scripts/vendor/bootstrap.min.js',\n  'src/scripts/custom/*.js'\n];\n\n// JS build for development\ngulp.task(\"devJs\", async () => {\n  gulp.src(sourceJS)\n  .pipe(order(jsOrder))\n  .pipe(uglify())\n  .pipe(concat('main.min.js'))\n  .pipe(sourcemaps.write('.'))\n  .pipe(gulp.dest('src/js'))\n  .pipe(gulp.dest('dist/js'))\n});\n\n// Process Sass\ngulp.task('sass2Css', () => {\n  return gulp.src('src/sass/**/*.scss')\n    .pipe(order([\n      'src/sass/bootstrap/*.scss',\n      'src/sass/custom/*.scss'\n    ]))\n    .pipe(sourcemaps.init())\n    .pipe(sass({outputStyle: 'compressed'}).on('error', sass.logError))\n    .pipe(sourcemaps.write())\n    .pipe(gulp.dest('src/css'))\n    .pipe(browserSync.stream())\n})\n\n// minify CSS\ngulp.task('minifyCss', () => {\n  return gulp.src('src/css/**/*.css')\n    .pipe(cleanCSS({compatibility: 'ie8'}))\n    .pipe(concat('main.min.css'))\n    .pipe(gulp.dest('src/style'))\n    .pipe(gulp.dest('dist/style'));\n})\n\n// move Css to dist\ngulp.task('copyCss', function() {\n  return gulp.src('src/style/*.css')\n    .pipe(gulp.dest('dist/style'));\n})\n\n// css build\ngulp.task('css', (callback) => {\n  runSequence('sass2Css', 'minifyCss','copyCss', callback)\n})\n\n// Production build with processJs\ngulp.task('prodJs', function() {\n  return gulp.src('src/*.html')\n    .pipe(useref({}, lazypipe().pipe(sourcemaps.init, {loadMaps: true})))\n    .pipe(sourcemaps.write('.'))\n    .pipe(gulpIf(\"*.js\", uglify()))\n    .pipe(gulp.dest('dist'))\n})\n\ngulp.task('build:dev', (callback) => {\n  runSequence('css', ['minifyImgs', 'moveMinifiedJs', 'devJs'], callback)\n})\n\ngulp.task('build:prod', (callback) => {\n  runSequence('css', ['minifyImgs', 'moveMinifiedJs', 'prodJs'], callback)\n})\n\n// Watch source file change and reload browser for development\ngulp.task('watch', () => {\n  browserSync.init({\n    server: './src',\n    port:8080,\n    ui: {port: 8081}\n  })\n\n  gulp.watch('src/scripts/**/*.js', gulp.series('devJs'));\n  gulp.watch('src/*.html', gulp.series('copyAllHTML'));\n  gulp.watch('src/img/**/*', gulp.series('minifyImgs'));\n  gulp.watch('src/sass/**/*.scss', gulp.series('css'));\n\n  //reloader\n  gulp.watch('src/scripts/**/*.js').on('change', browserSync.reload);\n  gulp.watch('src/*.html').on('change', browserSync.reload);\n  gulp.watch('src/img/**/*').on('change', browserSync.reload);\n  gulp.watch('src/sass/**/*.scss').on('change', browserSync.reload);\n})\n\ngulp.task('checkDist', function() {\n  browserSync.init({\n    server: './dist',\n    port:8080,\n    ui: {port: 8081}\n  })\n"})}),"\n",(0,t.jsx)(s.p,{children:"(2019-06-12)"})]})}function u(e={}){const{wrapper:s}={...(0,i.R)(),...e.components};return s?(0,t.jsx)(s,{...e,children:(0,t.jsx)(a,{...e})}):a(e)}},28453:(e,s,n)=>{n.d(s,{R:()=>o,x:()=>l});var t=n(96540);const i={},r=t.createContext(i);function o(e){const s=t.useContext(r);return t.useMemo((function(){return"function"==typeof e?e(s):{...s,...e}}),[s,e])}function l(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:o(e.components),t.createElement(r.Provider,{value:s},e.children)}}}]);