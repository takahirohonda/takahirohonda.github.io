"use strict";(self.webpackChunkmydatahack_blog_site=self.webpackChunkmydatahack_blog_site||[]).push([[632],{57537:(e,o,t)=>{t.r(o),t.d(o,{assets:()=>l,contentTitle:()=>r,default:()=>d,frontMatter:()=>s,metadata:()=>a,toc:()=>c});var n=t(74848),i=t(28453);const s={sidebar_position:5},r="Quickest Way to Enable CORS for ASP.NET Core Web API application",a={id:"Web/DotNet/enbale-cors",title:"Quickest Way to Enable CORS for ASP.NET Core Web API application",description:"Browser security does not allow other domain to make AJAX requests.This is called same-origin policy which prevents malicious attack from other sites. When you need to allow other sites to make cross-origin requests, we can enable Cross-origin resource sharing (CORS).",source:"@site/docs/Web/DotNet/5.enbale-cors.md",sourceDirName:"Web/DotNet",slug:"/Web/DotNet/enbale-cors",permalink:"/mydatahack-old-blog/mydatahack-old-blog/Web/DotNet/enbale-cors",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:5,frontMatter:{sidebar_position:5},sidebar:"tutorialSidebar",previous:{title:"How to Deploy ASP.NET Core Application to Windows with IIS",permalink:"/mydatahack-old-blog/mydatahack-old-blog/Web/DotNet/deploy-with-iis"},next:{title:"Unit Testing Entity Framework Database Update logic with NSubstitute",permalink:"/mydatahack-old-blog/mydatahack-old-blog/Web/DotNet/unit-test-n-substitute"}},l={},c=[];function p(e){const o={code:"code",h1:"h1",p:"p",pre:"pre",...(0,i.R)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(o.h1,{id:"quickest-way-to-enable-cors-for-aspnet-core-web-api-application",children:"Quickest Way to Enable CORS for ASP.NET Core Web API application"}),"\n",(0,n.jsx)(o.p,{children:"Browser security does not allow other domain to make AJAX requests.This is called same-origin policy which prevents malicious attack from other sites. When you need to allow other sites to make cross-origin requests, we can enable Cross-origin resource sharing (CORS)."}),"\n",(0,n.jsx)(o.p,{children:"There is a pretty good documentation about enabling CORS for a dotnet core application here."}),"\n",(0,n.jsx)(o.p,{children:"In terms of Web API application, the quickest way is to add UserCors in Configure method in startup.cs file as below."}),"\n",(0,n.jsx)(o.pre,{children:(0,n.jsx)(o.code,{className:"language-csharp",children:"public void Configure(IApplicationBuilder app, IHostingEnvironment env)\n{\nif (env.IsDevelopment())\n{\napp.UseDeveloperExceptionPage();\n}\n\n    app.UseCors(builder =>\n    builder.AllowAnyOrigin()\n        .AllowAnyMethod()\n        .AllowAnyHeader());\n\n    app.UseMvc();\n\n}\n"})}),"\n",(0,n.jsx)(o.p,{children:"Obviously, the above solution should not be used in production. It is supposed to be a quick test in development environment to make your AJAX requests from another domain work."}),"\n",(0,n.jsx)(o.p,{children:"In reality, we should have specific origins configured alongside with allowed method or headers. Below is the example of allowing cross-origin requests from the specific domain."}),"\n",(0,n.jsx)(o.pre,{children:(0,n.jsx)(o.code,{className:"language-csharp",children:'public void Configure(IApplicationBuilder app, IHostingEnvironment env)\n{\n    if (env.IsDevelopment())\n    {\n        app.UseDeveloperExceptionPage();\n    }\n\n    app.UseCors(builder =>\n    builder.WithOrigins("http://helloworld.com")\n    .WithMethods("GET", "POST", "PUT", "DELETE")\n    .AllowAnyHeader());\n\n    app.UseMvc();\n}\n'})}),"\n",(0,n.jsx)(o.p,{children:"(2018-12-18)"})]})}function d(e={}){const{wrapper:o}={...(0,i.R)(),...e.components};return o?(0,n.jsx)(o,{...e,children:(0,n.jsx)(p,{...e})}):p(e)}},28453:(e,o,t)=>{t.d(o,{R:()=>r,x:()=>a});var n=t(96540);const i={},s=n.createContext(i);function r(e){const o=n.useContext(s);return n.useMemo((function(){return"function"==typeof e?e(o):{...o,...e}}),[o,e])}function a(e){let o;return o=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:r(e.components),n.createElement(s.Provider,{value:o},e.children)}}}]);