"use strict";(self.webpackChunkmydatahack_blog_site=self.webpackChunkmydatahack_blog_site||[]).push([[4193],{94347:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>r,default:()=>p,frontMatter:()=>i,metadata:()=>s,toc:()=>l});var a=t(74848),o=t(28453);const i={sidebar_position:9},r="Deploying Multi-Container Applications to AWS Elastic Beanstalk",s={id:"Infrastructure/AWS/elastic-beanstalk",title:"Deploying Multi-Container Applications to AWS Elastic Beanstalk",description:"The easiest way to deploy containerised applications to AWS is to use Elastic Beanstalk. Instead of creating and managing individual resources (such as EC2, security groups, load balancer, RDS and so on) to run applications, it creates and manage them as environments.",source:"@site/docs/Infrastructure/AWS/9.elastic-beanstalk.md",sourceDirName:"Infrastructure/AWS",slug:"/Infrastructure/AWS/elastic-beanstalk",permalink:"/mydatahack-old-blog/mydatahack-old-blog/Infrastructure/AWS/elastic-beanstalk",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:9,frontMatter:{sidebar_position:9},sidebar:"tutorialSidebar",previous:{title:"Deploying Static Website to S3 with AWS CodeBuild",permalink:"/mydatahack-old-blog/mydatahack-old-blog/Infrastructure/AWS/static-site-s3"},next:{title:"How to Solve \u2018Missing Authentication Token Error\u2019 with API Gateway Custom Domain",permalink:"/mydatahack-old-blog/mydatahack-old-blog/Infrastructure/AWS/api-gateway-error"}},c={},l=[];function d(e){const n={code:"code",h1:"h1",p:"p",pre:"pre",...(0,o.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.h1,{id:"deploying-multi-container-applications-to-aws-elastic-beanstalk",children:"Deploying Multi-Container Applications to AWS Elastic Beanstalk"}),"\n",(0,a.jsx)(n.p,{children:"The easiest way to deploy containerised applications to AWS is to use Elastic Beanstalk. Instead of creating and managing individual resources (such as EC2, security groups, load balancer, RDS and so on) to run applications, it creates and manage them as environments."}),"\n",(0,a.jsx)(n.p,{children:"If you want to deploy containers to AWS quickly without learning too much about more granular services like ECS or load balancer, Elastic Beanstalk is the way to go."}),"\n",(0,a.jsx)(n.p,{children:"To deploy application to Elastic Beanstalk, AWS has a wonderful CLI tool, EB CLI. With a few commands, we can easily deploy an application to Elastic Beanstalk."}),"\n",(0,a.jsx)(n.p,{children:"As an example, we will use wiremock container. Wiremock is a open-source tools to create API mocks. For the details about how wiremock container works, you can refer to the github repo I created for this post here."}),"\n",(0,a.jsx)(n.p,{children:"First of all, we need to create a Dockerrun.aws.json file in the project folder. This file is similar to the docker-compose file. It is specifically used for Elastic Beanstalk. It is much simpler than the config files for ECS. When we do multi-container deployment, Beanstalk uses ECS and docker-intalled EC2 as an underlining infrastructure. But, the complexity to manage it is abstracted."}),"\n",(0,a.jsx)(n.p,{children:"For the container application, the asset is pushed to /var/app/current folder. In the example below, we are mapping the relevant folders that contains data files to the container."}),"\n",(0,a.jsx)(n.p,{children:"Elastic Beanstalk uses the health check on port 80 from the load balancer by default. So, the first container is mapped to port 80. If you need to use https, the best option is to use route 53 to map DNS to the load balancer created in the environment."}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-json",children:'{\n  "AWSEBDockerrunVersion": 2,\n  "volumes": [\n    {\n      "name": "wiremock-data",\n      "host": {\n        "sourcePath": "/var/app/current/mock-data"\n      }\n    },\n    {\n      "name": "wiremock-record",\n      "host": {\n        "sourcePath": "/var/app/current/recordings"\n      }\n    }\n  ],\n  "containerDefinitions": [\n    {\n      "name": "integration-wiremock-container",\n      "image": "rodolpheche/wiremock",\n      "essential": true,\n      "memory": 400,\n      "portMappings": [\n        {\n          "hostPort": 80,\n          "containerPort": 8080\n        }\n      ],\n      "mountPoints": [\n        {\n          "sourceVolume": "wiremock-data",\n          "containerPath": "/home/wiremock"\n        }\n      ]\n    },\n    {\n      "name": "integration-wiremock-recorder",\n      "image": "rodolpheche/wiremock",\n      "memory": 400,\n      "portMappings": [\n        {\n          "hostPort": 9443,\n          "containerPort": 8080\n        }\n      ],\n      "mountPoints": [\n        {\n          "sourceVolume": "wiremock-record",\n          "containerPath": "/home/wiremock"\n        }\n      ]\n    }\n  ]\n}\n'})}),"\n",(0,a.jsx)(n.p,{children:"Once we have Dockerrun.aws.json, the rest is easy. First, we initialise the application. Then follow the prompt to choose the options. Make sure to choose multi-container option."}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.code,{children:"eb init"})}),"\n",(0,a.jsx)(n.p,{children:"Now it is ready to go. Just create the environment. Environment in Elastic Beanstalk means application plus all the associated resources. Once we set the name for the environment, the rest will be taken care by the EB CLI."}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.code,{children:"eb create swapi-mock"})}),"\n",(0,a.jsx)(n.p,{children:"After a few minutes, you will have your containers running in AWS."}),"\n",(0,a.jsx)(n.p,{children:"For updating the code, we can run deploy command."}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.code,{children:"eb deploy awapi-mock"})}),"\n",(0,a.jsx)(n.p,{children:"When you finish it, you can delete the environment. This will terminate all the resources created for the environment."}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.code,{children:"eb terminate"})}),"\n",(0,a.jsx)(n.p,{children:"That\u2019s it. Pretty simple. For further information, you can check the git repo made for this post: deploy-wiremock-container-aws-elastic-beanstalk."}),"\n",(0,a.jsx)(n.p,{children:"(2020-07-29)"})]})}function p(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(d,{...e})}):d(e)}},28453:(e,n,t)=>{t.d(n,{R:()=>r,x:()=>s});var a=t(96540);const o={},i=a.createContext(o);function r(e){const n=a.useContext(i);return a.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function s(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:r(e.components),a.createElement(i.Provider,{value:n},e.children)}}}]);