"use strict";(self.webpackChunkmydatahack_blog_site=self.webpackChunkmydatahack_blog_site||[]).push([[5474],{89226:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>i,contentTitle:()=>n,default:()=>h,frontMatter:()=>s,metadata:()=>c,toc:()=>l});var r=a(74848),o=a(28453);const s={sidebar_position:5},n="How To Resolve Scratch Space Full Error",c={id:"ETL/DataStage/scratch-space-full-error",title:"How To Resolve Scratch Space Full Error",description:"When the data volume is large, DataStage uses a scratch disk to process data. The default scratch disk space is usually the Scratch folder in the Server folder where the application is installed. To use a larger scratch disk space, we can create a custom configuration file.",source:"@site/docs/ETL/DataStage/5.scratch-space-full-error.md",sourceDirName:"ETL/DataStage",slug:"/ETL/DataStage/scratch-space-full-error",permalink:"/docs/ETL/DataStage/scratch-space-full-error",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:5,frontMatter:{sidebar_position:5},sidebar:"tutorialSidebar",previous:{title:"Script To Deploy Jobs",permalink:"/docs/ETL/DataStage/deploy-job"},next:{title:"Useful DataStage Linux Commands",permalink:"/docs/ETL/DataStage/useful-linux-cmd"}},i={},l=[];function d(e){const t={code:"code",h1:"h1",p:"p",pre:"pre",...(0,o.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsxs)(t.h1,{id:"how-to-resolve-scratch-space-full-error",children:["How To Resolve ",(0,r.jsx)(t.code,{children:"Scratch Space Full"})," Error"]}),"\n",(0,r.jsx)(t.p,{children:"When the data volume is large, DataStage uses a scratch disk to process data. The default scratch disk space is usually the Scratch folder in the Server folder where the application is installed. To use a larger scratch disk space, we can create a custom configuration file."}),"\n",(0,r.jsx)(t.p,{children:"The default configuration file is called default.apt and sits in the Configuration folder (for example /opt/IBM/InformationServer/Server/Configuration/). In this folder, we can create a new configuration file (new_2node.apt). The example uses two nodes. Change the resource disk and resource scratch disk parameters as below."}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{children:'{\n    node "node1"\n    {\n        fastname "<Your DataStage Server URL>"\n        pools ""\n        resource disk "/scratch" {pools ""}\n        resource scratchdisk "/scratch" {pools ""}\n    }\n    node "node2"\n    {\n        fastname "<Your DataStage Server URL>"\n        pools ""\n        resource disk "/scratch" {pools ""}\n        resource scratchdisk "/scratch" {pools ""}\n    }\n}\n'})}),"\n",(0,r.jsxs)(t.p,{children:["Go back to the parallel job that gave the error. In the job parameter, add the variable ",(0,r.jsx)(t.code,{children:"APT_CONFIG_FILE"})," and set the new config file path (",(0,r.jsx)(t.code,{children:"/opt/IBM/InformationServer/Server/Configuration/new_2node.apt"}),") in order to override the default config file path."]})]})}function h(e={}){const{wrapper:t}={...(0,o.R)(),...e.components};return t?(0,r.jsx)(t,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}},28453:(e,t,a)=>{a.d(t,{R:()=>n,x:()=>c});var r=a(96540);const o={},s=r.createContext(o);function n(e){const t=r.useContext(s);return r.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function c(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:n(e.components),r.createElement(s.Provider,{value:t},e.children)}}}]);