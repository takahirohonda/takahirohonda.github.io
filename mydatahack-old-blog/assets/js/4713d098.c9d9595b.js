"use strict";(self.webpackChunkmydatahack_blog_site=self.webpackChunkmydatahack_blog_site||[]).push([[8947],{15822:(n,e,t)=>{t.r(e),t.d(e,{assets:()=>c,contentTitle:()=>i,default:()=>p,frontMatter:()=>o,metadata:()=>s,toc:()=>d});var a=t(74848),r=t(28453);const o={sidebar_position:8},i="MongoDB Skills Essential Exercise",s={id:"Infrastructure/DBA/mongo-skills-exercise",title:"MongoDB Skills Essential Exercise",description:"MongoDB is probably the most prevalent NoSQL database choice for the backend of web applications. It is an open source and relatively easy to use. It works well with the modern web applications written in Node.js or Python Django. Enterprise-level web application platforms like Sitecore (works on .NET) also use MongoDB as the backend database.",source:"@site/docs/Infrastructure/DBA/8.mongo-skills-exercise.md",sourceDirName:"Infrastructure/DBA",slug:"/Infrastructure/DBA/mongo-skills-exercise",permalink:"/docs/Infrastructure/DBA/mongo-skills-exercise",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:8,frontMatter:{sidebar_position:8},sidebar:"tutorialSidebar",previous:{title:"How to Prevent Creating Duplicate Keys in MongoDB",permalink:"/docs/Infrastructure/DBA/mongo-no-dup-key"},next:{title:"User Management with MongoDB",permalink:"/docs/Infrastructure/DBA/user-mgmtpmongo"}},c={},d=[];function l(n){const e={code:"code",h1:"h1",p:"p",pre:"pre",...(0,r.R)(),...n.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(e.h1,{id:"mongodb-skills-essential-exercise",children:"MongoDB Skills Essential Exercise"}),"\n",(0,a.jsx)(e.p,{children:"MongoDB is probably the most prevalent NoSQL database choice for the backend of web applications. It is an open source and relatively easy to use. It works well with the modern web applications written in Node.js or Python Django. Enterprise-level web application platforms like Sitecore (works on .NET) also use MongoDB as the backend database."}),"\n",(0,a.jsx)(e.p,{children:"Working with MongoDB is quite different from relational databases as its query language is completely different from SQL. Good news is that it is not as complicated as it seems. It does the same CURD operation, flat file upload functions, conditional queries and aggregation functions as the relational world. With MongoDB, you don\u2019t need to worry about joining (because it does no join!). If you spend a few hours, you will become pretty good at it."}),"\n",(0,a.jsx)(e.p,{children:"I created a series of exercises that cover the basic operations that you can execute with the Mongo Shell. It will give you the solid foundation to develop applications on MongoDB."}),"\n",(0,a.jsx)(e.p,{children:"EXERCISE"}),"\n",(0,a.jsx)(e.p,{children:"(1) Create Database"}),"\n",(0,a.jsx)(e.p,{children:"1-1. Create a database called usermanaged, drop it and create it again. Check which database you are currently in."}),"\n",(0,a.jsx)(e.p,{children:"(2) Create a Collection & Insert a Record"}),"\n",(0,a.jsx)(e.p,{children:"1-2. Create a collection called customers in usermanaged created in Exercise 1 and insert the document below. Check if the document is inserted correctly."}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-json",children:'{\n  "firstName": "John",\n  "lastName": "West",\n  "email": "john.west@mail.com",\n  "phone": "032345432134",\n  "BusinessType": ["Sell", "Sugar", "Drinks"],\n  "Reference": 100,\n  "Company": "Coca-Cola"\n}\n'})}),"\n",(0,a.jsx)(e.p,{children:"(3) Bulk Load JSON File"}),"\n",(0,a.jsx)(e.p,{children:"3-1. Create a collection called transactions in usermanaged (drop if it already exists) and bulk load the data from a json file, transactions.json (see the data at the end of the questions)."}),"\n",(0,a.jsx)(e.p,{children:"3-2. Append the records with the same file, transactions.json"}),"\n",(0,a.jsx)(e.p,{children:"3-3. Upsert the record from the new file called transactions_upsert.json (see the data at the end of the questions."}),"\n",(0,a.jsx)(e.p,{children:"(4) Bulk Load CSV File"}),"\n",(0,a.jsx)(e.p,{children:"4-1. Create a collection and load data from a CSV file will multiple rows. Define the keys from the header row."}),"\n",(0,a.jsx)(e.p,{children:"(5) Query MongoDB with Conditions"}),"\n",(0,a.jsx)(e.p,{children:"This question uses the collection (transactions) created in Exercise 3."}),"\n",(0,a.jsx)(e.p,{children:"5-1. Find any record where Name is Tom"}),"\n",(0,a.jsx)(e.p,{children:"5-2. Find any record where total payment amount (Payment.Total) is 400."}),"\n",(0,a.jsx)(e.p,{children:"5-3. Find any record where price (Transaction.price) is greater than 400."}),"\n",(0,a.jsx)(e.p,{children:"5-4. Find any record where Note is null or the key itself is missing."}),"\n",(0,a.jsx)(e.p,{children:"5-5. Find any record where Note exists and its value is null."}),"\n",(0,a.jsx)(e.p,{children:"5-6. Find any record where the Note key does not exist."}),"\n",(0,a.jsx)(e.p,{children:"(6) Aggregation with MongoDB"}),"\n",(0,a.jsx)(e.p,{children:"This question uses the collection (transactions) created in Exercise 3."}),"\n",(0,a.jsx)(e.p,{children:"6-1. Calculate the total transaction amount by adding up Payment.Total in all records."}),"\n",(0,a.jsx)(e.p,{children:"6-2. Get the total price per record by adding up the price values in the Transaction array (Transaction.price)."}),"\n",(0,a.jsx)(e.p,{children:"6-3. Calculate total payments (Payment.Total) for each payment type (Payment.Type)."}),"\n",(0,a.jsx)(e.p,{children:"6-4. Find the max Id."}),"\n",(0,a.jsx)(e.p,{children:"6-5. Find the max price (Transaction.price)."}),"\n",(0,a.jsx)(e.p,{children:"(7) CRUD Operations"}),"\n",(0,a.jsx)(e.p,{children:"This question uses the collection (transactions) created in Exercise 3. CRUD: Create, Read, Update and Delete."}),"\n",(0,a.jsx)(e.p,{children:"7-1. Insert a record below."}),"\n",(0,a.jsx)(e.p,{children:"7-2. Updating the new inserted record above. Make Name=\u2019Updated Record\u2019 & Note=\u2019Updated!\u2019"}),"\n",(0,a.jsx)(e.p,{children:"7-3. Delete the record inserted above by using Id."}),"\n",(0,a.jsx)(e.p,{children:"(8) User Creation"}),"\n",(0,a.jsx)(e.p,{children:"8-1. Create a read only user who can query records from collections from all databases."}),"\n",(0,a.jsx)(e.p,{children:"8-2. Create a writer user who can create collections and do CRUD operations in any collections."}),"\n",(0,a.jsx)(e.p,{children:"8-3. Create a usermanaged user who can do the writer operation in the usermanaged database and read only for the rest of the databases."}),"\n",(0,a.jsx)(e.p,{children:"JSON Data"}),"\n",(0,a.jsx)(e.p,{children:"Here is the transaction JSON for insert in Exercise 3-1."}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-json",children:'[\n  {\n    "Id": 100,\n    "Name": "John",\n    "TransactionId": "tran1",\n    "Transaction": [\n      {\n        "ItemId": "a100",\n        "price": 200\n      },\n      {\n        "ItemId": "a110",\n        "price": 200\n      }\n    ],\n    "Subscriber": true,\n    "Payment": {\n      "Type": "Credit-Card",\n      "Total": 400,\n      "Success": true\n    },\n    "Note": "1st Complete Record"\n  },\n  {\n    "Id": 101,\n    "Name": "Tom",\n    "TransactionId": "tran2",\n    "Transaction": [\n      {\n        "ItemId": "a100",\n        "price": 200\n      },\n      {\n        "ItemId": "a110",\n        "price": 200\n      }\n    ],\n    "Subscriber": true,\n    "Payment": {\n      "Type": "Debit-Card",\n      "Total": 400,\n      "Success": true\n    },\n    "Note": null\n  },\n  {\n    "Id": 102,\n    "Name": "Margaret",\n    "TransactionId": "tran3",\n    "Transaction": [\n      {\n        "ItemId": "a100",\n        "price": 200\n      },\n      {\n        "ItemId": "a110",\n        "price": 200\n      }\n    ],\n    "Subscriber": true,\n    "Payment": {\n      "Type": "Credit-Card",\n      "Total": 400,\n      "Success": true\n    }\n  },\n  {\n    "Id": 103,\n    "Name": "Dylan",\n    "TransactionId": "tran4",\n    "Transaction": [\n      {\n        "ItemId": "a100",\n        "price": 200\n      },\n      {\n        "ItemId": "a110",\n        "price": 200\n      }\n    ],\n    "Subscriber": true,\n    "Payment": null,\n    "Note": "Payment is Null"\n  }\n]\n'})}),"\n",(0,a.jsx)(e.p,{children:"Here is the JSON file for upsert in Exercise 3-3."}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-json",children:'[\n  {\n    "Id": 100,\n    "Name": "ZZZZZZ",\n    "TransactionId": "tran1",\n    "Transaction": [\n      {\n        "ItemId": "a100",\n        "price": 2000000000\n      },\n      {\n        "ItemId": "a110",\n        "price": 200\n      }\n    ],\n    "Subscriber": true,\n    "Payment": {\n      "Type": "Credit-Card",\n      "Total": 400,\n      "Success": true\n    },\n    "Note": "1st Complete Record"\n  },\n  {\n    "Id": 101,\n    "Name": "Tom",\n    "TransactionId": "tran2",\n    "Transaction": [\n      {\n        "ItemId": "a100",\n        "price": 200\n      },\n      {\n        "ItemId": "a110",\n        "price": 200\n      }\n    ],\n    "Subscriber": true,\n    "Payment": {\n      "Type": "Debit-Card",\n      "Total": 400,\n      "Success": true\n    },\n    "Note": null\n  },\n  {\n    "Id": 102,\n    "Name": "Margaret",\n    "TransactionId": "tran3",\n    "Transaction": [\n      {\n        "ItemId": "a100",\n        "price": 200\n      },\n      {\n        "ItemId": "a110",\n        "price": 200\n      }\n    ],\n    "Subscriber": true,\n\n    "Payment": {\n      "Type": "Credit-Card",\n      "Total": 400,\n      "Success": true\n    }\n  },\n  {\n    "Id": 103,\n    "Name": "Dylan",\n    "TransactionId": "tran4",\n    "Transaction": [\n      {\n        "ItemId": "a100",\n        "price": 200\n      },\n      {\n        "ItemId": "a110",\n        "price": 200\n      }\n    ],\n    "Subscriber": true,\n    "Payment": null,\n    "Note": "Payment is Null"\n  },\n  {\n    "Id": 104,\n    "Name": "Oliver",\n    "TransactionId": "tran5",\n    "Transaction": [\n      {\n        "ItemId": "a100",\n        "price": 200\n      },\n      {\n        "ItemId": "a110",\n        "price": 200\n      }\n    ],\n    "Subscriber": true,\n\n    "Payment": {\n      "Total": 400,\n      "Success": true\n    },\n    "Note": "Payment Type is missing"\n  },\n  {\n    "Id": 105,\n    "Name": "Sarah",\n    "TransactionId": "tran6",\n    "Transaction": [\n      {\n        "ItemId": "a100",\n        "price": 200\n      },\n      {\n        "ItemId": "a110",\n        "price": 200\n      }\n    ],\n    "Subscriber": true,\n    "Note": "Payment is missing"\n  }\n]\n'})}),"\n",(0,a.jsx)(e.p,{children:"ANSWERS"}),"\n",(0,a.jsx)(e.p,{children:"(1) Create Database"}),"\n",(0,a.jsx)(e.p,{children:"Use db_name will create a database if it doesn\u2019t exist. You can drop the database with dropDatabase()."}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{children:"use usermanaged\n# to drop database\ndb.dropDatabase()\n"})}),"\n",(0,a.jsx)(e.p,{children:"(2) Create a Collection & Insert a Record"}),"\n",(0,a.jsx)(e.p,{children:"It really doesn\u2019t matter if you put double quote or not. Either format works."}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{children:'use usermanaged\ndb.customers.insert(\n        { "firstName":"John",\n          "lastName":"West",\n          "email":"john.west@mail.com",\n          "phone":"032345432134",\n          "BusinessType": ["Sell", "Sugar", "Drinks"],\n          "Reference":100,\n          "Company":"Coca-Cola"})\n\n# This works, too.\ndb.customers.insert(\n        { firstName:\'John\',\n          lastName:\'West\',\n          email:\'john.west@mail.com\',\n          phone:\'032345432134\',\n          BusinessType: [\'Sell\', \'Sugar\', \'Drinks\'],\n          Reference:100,\n          Company:\'Coca-Cola\'})\n\n# You can drop it like this\ndb.customers.drop()\n'})}),"\n",(0,a.jsx)(e.p,{children:"(3) Bulk Load JSON File"}),"\n",(0,a.jsx)(e.p,{children:"You can import data from json, csv or tsv files with mongoimport and export data with mongoexport. Note that these are not for backups as you loose some data type information by writing it to flat files."}),"\n",(0,a.jsx)(e.p,{children:"You need to quit the Mongo Shell session and use Terminal."}),"\n",(0,a.jsx)(e.p,{children:"For multiple records, you need jsonArray option. Otherwise you get the error message below."}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{children:"Failed: error unmarshaling bytes on document #0: JSON decoder out of sync \u2013 data changing underfoot?\n\n# 1: Drop the collection if exists and then recreate the new one before importing.\nmongoimport --db usermanaged --jsonArray --collection transactions --drop --file C:\\tmp\\transaction.json\n# 2: Append to the exisiting collection\nmongoimport --db usermanaged --jsonArray --collection transactions --mode insert --file C:\\tmp\\transaction.json\n# 3: Upsert from the file\nmongoimport --db usermanaged --jsonArray --collection transactions --mode upsert --upsertFields Id --file  C:\\tmp\\transaction_upsert.json\n"})}),"\n",(0,a.jsx)(e.p,{children:"Once imported, you can log into the database and check the data."}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{children:"mongo\ndb.transactions.count()\ndb.transactions.find().pretty()\n"})}),"\n",(0,a.jsx)(e.p,{children:"(4) Bulk Load CSV File"}),"\n",(0,a.jsx)(e.p,{children:"Keys will be created from the header row. \u2013headerline and \u2013type csv are required. You can use whatever csv available."}),"\n",(0,a.jsx)(e.p,{children:(0,a.jsx)(e.code,{children:"mongoimport --db usermanaged --collection online_news_popularity --type csv --headerline --file C:\\tmp\\OnlineNewsPopularity.csv"})}),"\n",(0,a.jsx)(e.p,{children:"(5) Query MongoDB with Conditions"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{children:'# 1. Find a record in transactions where name is tom\ndb.transactions.find({Name: \'Tom\'})\n\n# 2. Find a record in transactions where total payment amount is 400.\n# When chaining key with dot, you need doublequote.\ndb.transactions.find({"Payment.Total": 400 })\ndb.transactions.find({"Payment.Total": {$eq: 400}})\n\n# 3. Find a record in transactions collection where price is greater than 400\ndb.transactions.find({"Transaction.price": {$gt: 400} })\n# can do equal or greater than, too.\ndb.transactions.find({"Transaction.price": {$gte: 400} })\n\n# 4. Find a record in transacaions collection where note is null or missing\ndb.transactions.find({"Note": null})\n\n# 5. Find a record where only Note key is missing\ndb.transactions.find({Note: {$exists: false } })\n\n#6. Null only\ndb.transactions.find({Note: {$type: 10 } })\n'})}),"\n",(0,a.jsx)(e.p,{children:"(6) Aggregation with MongoDB"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{children:'# 1. Calculate the total transaction amount by aggregating Payment.Total in all records\ndb.transactions.aggregate({\n    $group: {\n        _id: \'\',\n        TotalRevenue: { $sum: \'$Payment.Total\' }\n    }\n })\n\n# 2. Aggregate per record by aggregating Transaction.price\ndb.transactions.aggregate([\n   {\n     $project: {\n       revenueTotal: { $sum: "$Transaction.price"},\n     }\n   }\n])\n\n# 3. Aggregate per payment type by adding up Payment.Total\ndb.transactions.aggregate([\n     {\n       $group:\n         {\n          _id: "$Payment.Type",\n           totalAmount: { $sum: "$Payment.Total" },\n           count: { $sum: 1 }\n         }\n     }\n])\n\n\n# 4. Find the max id\ndb.transactions.aggregate([\n    {\n        $group:\n        {\n            _id: \'\',\n            maxId: {$max: "$Id"}\n        }\n    }\n])\n\n# 5. Find the max Transaction.price\n# Transaction.price is an array. So find the array containing maximum price and then extract\n# the max price from the array with another $max.\ndb.transactions.aggregate([\n    {\n        $group:\n        {\n            _id: \'\',\n            maxPrice: {$max: {$max: "$Transaction.price"}}\n        }\n    }\n])\n (7) CRUD Operations\n\n# 1. Inserting a record into transaction\ndb.transactions.insert(\n    {\n    "Id": 110,\n    "Name": "Inserted Record",\n    "TransactionId": "tranNew1",\n  "Transaction": [\n    {\n    "ItemId":"c324",\n    "price": 456\n    },\n    {\n    "ItemId":"d456",\n    "price": 543\n    }\n  ],\n  "Subscriber": false,\n  "Payment": {\n    "Type": "Debit-Card",\n    "Total": 999,\n    "Success": true\n  },\n  "Note":\'Hello World\'\n})\n\n# check the record\ndb.transactions.find({Id:110})\n\n# 2. Updating the newly inserted record above.\ndb.transactions.update({Id:110},{$set:{Name:\'Updated Record\',Note:\'Updated!\'}})\n\n# 3. Deleting record\ndb.transaction.remove({Id:110})\n'})}),"\n",(0,a.jsx)(e.p,{children:"(8) User Creation"}),"\n",(0,a.jsx)(e.p,{children:"See User Management with MongoDB."}),"\n",(0,a.jsx)(e.p,{children:"(2018-04-23)"})]})}function p(n={}){const{wrapper:e}={...(0,r.R)(),...n.components};return e?(0,a.jsx)(e,{...n,children:(0,a.jsx)(l,{...n})}):l(n)}},28453:(n,e,t)=>{t.d(e,{R:()=>i,x:()=>s});var a=t(96540);const r={},o=a.createContext(r);function i(n){const e=a.useContext(o);return a.useMemo((function(){return"function"==typeof n?n(e):{...e,...n}}),[e,n])}function s(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(r):n.components||r:i(n.components),a.createElement(o.Provider,{value:e},n.children)}}}]);