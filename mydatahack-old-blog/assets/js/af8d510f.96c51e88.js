"use strict";(self.webpackChunkmydatahack_blog_site=self.webpackChunkmydatahack_blog_site||[]).push([[1538],{82602:(a,e,n)=>{n.r(e),n.d(e,{assets:()=>d,contentTitle:()=>r,default:()=>u,frontMatter:()=>i,metadata:()=>o,toc:()=>l});var t=n(74848),s=n(28453);const i={slug:"data-engineering/data-ingestion/loading-data-frame-to-relational-database-with-r",title:"Loading Data Frame to Relational Database with R",tags:["Data Engineering","Data Ingestion","Database","ODBC","R","RODBC","Truncate and Load"]},r=void 0,o={permalink:"/data-engineering/data-engineering/data-ingestion/loading-data-frame-to-relational-database-with-r",source:"@site/data-engineering/data-ingestion/2019-06-13-df-to-rd-with-r.md",title:"Loading Data Frame to Relational Database with R",description:"Once you create a data frame with R, you may need to load it to a relational database for data persistence. You might have a data transformation batch job written in R and want to load database in a certain frequency.",date:"2019-06-13T00:00:00.000Z",tags:[{label:"Data Engineering",permalink:"/data-engineering/tags/data-engineering"},{label:"Data Ingestion",permalink:"/data-engineering/tags/data-ingestion"},{label:"Database",permalink:"/data-engineering/tags/database"},{label:"ODBC",permalink:"/data-engineering/tags/odbc"},{label:"R",permalink:"/data-engineering/tags/r"},{label:"RODBC",permalink:"/data-engineering/tags/rodbc"},{label:"Truncate and Load",permalink:"/data-engineering/tags/truncate-and-load"}],readingTime:1.785,hasTruncateMarker:!0,authors:[],frontMatter:{slug:"data-engineering/data-ingestion/loading-data-frame-to-relational-database-with-r",title:"Loading Data Frame to Relational Database with R",tags:["Data Engineering","Data Ingestion","Database","ODBC","R","RODBC","Truncate and Load"]},unlisted:!1,prevItem:{title:"Downloading All Public GitHub Gist Files",permalink:"/data-engineering/data-engineering/data-ingestion/download-github-gist"},nextItem:{title:"Exporting LaunchDarkly Flag List into a CSV File with Python",permalink:"/data-engineering/data-engineering/data-ingestion/export-launch-darkly-flags"}},d={authorsImageUrls:[]},l=[];function c(a){const e={code:"code",p:"p",pre:"pre",...(0,s.R)(),...a.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(e.p,{children:"Once you create a data frame with R, you may need to load it to a relational database for data persistence. You might have a data transformation batch job written in R and want to load database in a certain frequency."}),"\n",(0,t.jsx)(e.p,{children:"Here, I created a function to load data into a relational database. I opted to use RODBC because it is probably the easiest way to interact with databases with R. As long as you install and configure ODBC for whatever database you are using, this should work."}),"\n",(0,t.jsx)(e.p,{children:"RODBC has many functions that does database operations for you. The insertion is taken care of by the sqlSave method. RODBC has fantastic documentation so that you can check what options are available."}),"\n",(0,t.jsx)(e.p,{children:"Function Parameters"}),"\n",(0,t.jsx)(e.p,{children:"The function below takes 6 parameters."}),"\n",(0,t.jsx)(e.p,{children:"dsn: data source name that you configured for ODBC."}),"\n",(0,t.jsx)(e.p,{children:"user: database user name."}),"\n",(0,t.jsx)(e.p,{children:"pw: database password."}),"\n",(0,t.jsx)(e.p,{children:"tableName: Name of the table including the schema"}),"\n",(0,t.jsx)(e.p,{children:"df: R data frame"}),"\n",(0,t.jsx)(e.p,{children:"columnTypes: List of SQL column types."}),"\n",(0,t.jsx)(e.p,{children:"Usage"}),"\n",(0,t.jsx)(e.p,{children:"Call the function like this:"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-r",children:'dsn = "my-database-dsn"\ndbUser = "user"\ndbPass = "password"\ntableName = "datamart.customer_dim"\ndf = dataFrameCreated\ncolumnTypes <- list(account_name="varchar(255)", customer_id="int", last_updated="date")\n\ndbLoader(dsn, dbUser, dbPass, "usermanaged.session_budget_2018", dfTransformed, columnTypes)\n'})}),"\n",(0,t.jsx)(e.p,{children:"Function: dbLoader"}),"\n",(0,t.jsx)(e.p,{children:"I could probably make drop table SQL statement as a parameter so that it can be used for any database. In this function, it is hard coded. The statement should work for most databases. Most of databases have the same drop statement syntax."}),"\n",(0,t.jsx)(e.p,{children:"The db load pattern is the classic truncate and load. You can customise it to make it to upsert."}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-r",children:"# Arguments - dsn: data source name for ODBC, user: db username, pw: password, df: Input DataFrame,\n#             tableName: Output table name, columnTypes: list of column definition\n\ndbLoader <- function(dsn, user, pw, tableName, df, columnTypes) {\n\n  channel <- odbcConnect(dsn, uid=user, pwd=pw)\n  print('Database connection initiated.')\n  tableName <- tableName\n  dropSQL <- sprintf('Drop Table If Exists %s;', tableName)\n\n  # Drop Table If exists\n  sqlQuery(channel, dropSQL)\n  print(sprintf('Executed %s', dropSQL))\n\n  # Insert Data\n  sqlSave(channel, df, tablename=tableName, fast=T, colnames=F, rownames = F, varTypes=columnTypes)\n  print(sprintf('DataFrame has been inserted into %s', tableName ))\n\n  # Close DB connection\n  close(channel)\n  print('DB connection closed.')\n}\n"})})]})}function u(a={}){const{wrapper:e}={...(0,s.R)(),...a.components};return e?(0,t.jsx)(e,{...a,children:(0,t.jsx)(c,{...a})}):c(a)}},28453:(a,e,n)=>{n.d(e,{R:()=>r,x:()=>o});var t=n(96540);const s={},i=t.createContext(s);function r(a){const e=t.useContext(i);return t.useMemo((function(){return"function"==typeof a?a(e):{...e,...a}}),[e,a])}function o(a){let e;return e=a.disableParentContext?"function"==typeof a.components?a.components(s):a.components||s:r(a.components),t.createElement(i.Provider,{value:e},a.children)}}}]);