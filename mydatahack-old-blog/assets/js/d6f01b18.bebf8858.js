"use strict";(self.webpackChunkmydatahack_blog_site=self.webpackChunkmydatahack_blog_site||[]).push([[9413],{50199:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>s,default:()=>u,frontMatter:()=>i,metadata:()=>r,toc:()=>l});var a=t(74848),o=t(28453);const i={sidebar_position:17},s="Event-Driven Data Ingestion with AWS Lambda (S3 to S3)",r={id:"data-ingestion/lambda-s3-s3-python",title:"Event-Driven Data Ingestion with AWS Lambda (S3 to S3)",description:"Let\u2019s say you have data coming into S3 in your AWS environment every 15 minutes and want to ingest it as it comes. The best approach for this near real-time ingestion is to use AWS lambda function. To demonstrate how to develop and deploy lambda function in AWS, we will have a look at a simple use case of moving file from source S3 to target S3 as the file is created in the source.",source:"@site/docs/data-ingestion/17.lambda-s3-s3-python.md",sourceDirName:"data-ingestion",slug:"/data-ingestion/lambda-s3-s3-python",permalink:"/mydatahack-old-blog/docs/data-ingestion/lambda-s3-s3-python",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:17,frontMatter:{sidebar_position:17},sidebar:"tutorialSidebar",previous:{title:"Event-Driven Data Ingestion with AWS Lambda (S3 to RDS)",permalink:"/mydatahack-old-blog/docs/data-ingestion/lambda-s3-rds-python"},next:{title:"Comprehensive Guide to Download Files From S3 with Python",permalink:"/mydatahack-old-blog/docs/data-ingestion/s3-python"}},c={},l=[];function d(e){const n={code:"code",h1:"h1",p:"p",pre:"pre",...(0,o.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.h1,{id:"event-driven-data-ingestion-with-aws-lambda-s3-to-s3",children:"Event-Driven Data Ingestion with AWS Lambda (S3 to S3)"}),"\n",(0,a.jsx)(n.p,{children:"Let\u2019s say you have data coming into S3 in your AWS environment every 15 minutes and want to ingest it as it comes. The best approach for this near real-time ingestion is to use AWS lambda function. To demonstrate how to develop and deploy lambda function in AWS, we will have a look at a simple use case of moving file from source S3 to target S3 as the file is created in the source."}),"\n",(0,a.jsx)(n.p,{children:"AWS lambda supports a few different programming languages. I will use Python for this example. To deploy lambda functions, you need to package the modules used in the function. For some reason, modules downloaded and packaged from Windows sometimes do not work (e.g. pyscopg2 never works even if I download the binary version). From my experience, Python lambda development is the best to be done in Linux or Mac."}),"\n",(0,a.jsx)(n.p,{children:"In this example, we will use Amazon Linux EC2 instance to develop the package and deploy it from there. You can of course use your local Mac or Linux machine for this."}),"\n",(0,a.jsx)(n.p,{children:"To deploy lambda functions, I usually use the deployment framework called Serverless, which makes deployment much easier. Here, I would like to use the manual deployment from the AWS documentation here. Doing the deployment manually will teach you how the lambda function works. I think it is good to try it at least once before using more automated solutions."}),"\n",(0,a.jsx)(n.p,{children:"We will also cover the topic on setting the environment variables in order not to hard-code the parameters that change between environments (e.g. database connection url, access details, or bucket names)."}),"\n",(0,a.jsx)(n.p,{children:"Summary Steps"}),"\n",(0,a.jsx)(n.p,{children:"Launch Linux EC2 instance\nInstall Python 3 and create virtual environment\nInstall required packages\nCode Lambda function\nPackage function & modules into a zip file\nCreate Lambda Function Role\nDeploy Lambda\nTest function manually\nConfigure S3 source bucket as event source\nExecute the function by pushing file to the source bucket\nSteps"}),"\n",(0,a.jsx)(n.p,{children:"(1) Launch a Linux EC2 Instance"}),"\n",(0,a.jsx)(n.p,{children:"Micro instance is usually good enough for developing lambda function. After deployment, you can terminate the instance. Make sure to choose the right security group and subnet so that the instance can access the appropriate resources."}),"\n",(0,a.jsx)(n.p,{children:"(2) Install Python 3 and create virtual environment"}),"\n",(0,a.jsx)(n.p,{children:"This step and the next step can be bootstrapped (How to Launch EC2 With Bootstrap in AWS). For Centos, Redhat or Amazon Linux, follow the steps here: How to Install Python 3 and Create Virtual Environment in Centos, Redhat and Amazon Linux. For Ubuntu, follow the steps here: How to Install Python 3 and Create Virtual Environment In Ubuntu."}),"\n",(0,a.jsx)(n.p,{children:"(3) Install required packages"}),"\n",(0,a.jsx)(n.p,{children:"Make sure to activate the virtual environment where you want to develop the lambda function. The installed packages will be in the site-packages folder. You need to pack all the site-packages content into a zip file. AWS SDK for Python (like boto3 or botocore) is pre-installed for Lambda function and you do not need to pack them. Although we do not use any other package for this code example, let\u2019s pack psycopg2 and import it in the function to make sure the packaged modules work."}),"\n",(0,a.jsx)(n.p,{children:"Note that you need to install the binary version for psycopg2."}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"source your-virtual-environment-path/activate\npip install psycopg2-binary\n"})}),"\n",(0,a.jsx)(n.p,{children:"(4) Code Lambda Function"}),"\n",(0,a.jsx)(n.p,{children:"The PUT API call to the source S3 is the event to trigger the function. In Python, the event data is processed as dictionary. See how the input file looks in the AWS documentation here. Make sure to change the parameter for your environment. Save this as inputFile.txt."}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-json",children:'{\n  "Records": [\n    {\n      "eventVersion": "2.0",\n      "eventSource": "aws:s3",\n      "awsRegion": "us-west-2",\n      "eventTime": "1970-01-01T00:00:00.000Z",\n      "eventName": "ObjectCreated:Put",\n      "userIdentity": {\n        "principalId": "AIDAJDPLRKLG7UEXAMPLE"\n      },\n      "requestParameters": {\n        "sourceIPAddress": "127.0.0.1"\n      },\n      "responseElements": {\n        "x-amz-request-id": "C3D13FE58DE4C810",\n        "x-amz-id-2": "FMyUVURIY8/IgAtTv8xRjskZQpcIZ9KG4V5Wp6S7S/JRWeUWerMUE5JgHvANOjpD"\n      },\n      "s3": {\n        "s3SchemaVersion": "1.0",\n        "configurationId": "testConfigRule",\n        "bucket": {\n          "name": "sourcebucket",\n          "ownerIdentity": {\n            "principalId": "A3NL1KOZZKExample"\n          },\n          "arn": "arn:aws:s3:::sourcebucket"\n        },\n        "object": {\n          "key": "HappyFace.jpg",\n          "size": 1024,\n          "eTag": "d41d8cd98f00b204e9800998ecf8427e",\n          "versionId": "096fKKXTRTtl3on89fVO.nfljtsv6qko"\n        }\n      }\n    }\n  ]\n}\n'})}),"\n",(0,a.jsx)(n.p,{children:"From the event input, you can grab bucket name and key to specify the newly created file in the source bucket."}),"\n",(0,a.jsx)(n.p,{children:"The function grab the data from S3 and copy to a local tmp folder. Then, push it back to the target bucket. You can add transformation logic here if you need to."}),"\n",(0,a.jsx)(n.p,{children:"Note that the target bucket name is taken from the environment variable. When we call the create lambda function API, we can set it. Alternatively, you can do it from the management console. This is recommended for the values that change between environment like database connection or access credentials. Make sure to import os to get environment variables."}),"\n",(0,a.jsx)(n.p,{children:"PaAWS documentation about setting environment variables in Lambda functions is here. It uses Node.js as an example. It is the same in Python. You can also check out the blog about setting environment variables for Python here."}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:"import boto3\nimport botocore\nimport psycopg2\nimport os\n\nclient = boto3.client('s3')\n\ndef upload_file(local_path, key):\n\n    target_bucket = os.environ['targetBucket']\n    client.upload_file(Filename=local_path, Bucket=target_bucket, Key=key)\n    print('Completed Uploading {} to {}/{}'.format(local_path, target_bucket, key))\n\ndef handler(event, context):\n\n    for record in event['Records']:\n        bucket_name = record['s3']['bucket']['name']\n        key = record['s3']['object']['key']\n        local_path = '/tmp/' + key.split('/')[-1]\n        client.download_file(bucket_name, key, local_path)\n        print(\"Downloaded s3 file, {}, to {}\".format(key, local_path))\n        upload_file(local_path, key)\n"})}),"\n",(0,a.jsx)(n.p,{children:"Once the function is created, use the input file (inputFile.txt) to test the function. You can add this for local testing."}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:"f = open('inputFile.txt', 'r')\nevent = json.load(f)\ntarget_bucket = 'lambda.test.target'\ndownload_file(event, 'hello')\n"})}),"\n",(0,a.jsx)(n.p,{children:"(5) Package function & modules into a zip file"}),"\n",(0,a.jsx)(n.p,{children:"Now that your function is working, you can package the modules and code. You need to go to the site-packages folder for your virtual environment first then pack all the modules and then pack the python file."}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"cd /home/ec2-user/python3/lambda/lib/python3.6/site-packages\nzip -r9 /tmp/MoveS3Data.zip *\nzip -g MoveS3Data.zip MoveS3Data.py\n"})}),"\n",(0,a.jsx)(n.p,{children:"(6) Create Lambda Function Role"}),"\n",(0,a.jsx)(n.p,{children:"By using IAM, you need to create a role for Lambda function. Follow the steps in the documentation here."}),"\n",(0,a.jsx)(n.p,{children:"(7) Deploy Lambda"}),"\n",(0,a.jsx)(n.p,{children:"Once you have the zip file and lambda role, you can deploy the function. Make sure that you have the correct role and region selected. Handler has to be your-python-file-name.main-function-name."}),"\n",(0,a.jsx)(n.p,{children:"This is where you can define environment variables. In this example, we are getting the target bucket name from the environment variable."}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"cd /tmp/\n\naws lambda create-function \\\n--region ap-southeast-2 \\\n--function-name MoveS3Data \\\n--zip-file fileb://MoveS3Data.zip \\\n--role arn:aws:iam::<account number>:role/lambda-s3-test \\\n--environments Variables={targetBucket=lambda.test.target} \\\n--handler MoveS3Data.handler \\\n--runtime python3.6 \\\n--timeout 10 \\\n--memory-size 1024\n"})}),"\n",(0,a.jsx)(n.p,{children:"If you want to update the existing function, run the update script."}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"aws lambda update-function-code \\\n--function-name MoveS3Data \\\n--region ap-southeast-2 \\\n--zip-file fileb://MoveS3Data.zip\nIf you want to update the list of environment variables, run the update config script.\n\naws lambda update-function-configuration \\\n--function-name MoveS3Data \\\n--region ap-southeast-2 \\\n--environment Variables={targetBucket=lambda.prod.target}\n"})}),"\n",(0,a.jsx)(n.p,{children:"(8) Test the function manually"}),"\n",(0,a.jsx)(n.p,{children:"When your deployment is successful, invoke the function with the input file (inputFile.txt) set as payload."}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"aws lambda invoke \\\n--invocation-type Event \\\n--function-name MoveS3Data \\\n--region ap-southeast-2 \\\n--payload file://inputFile.txt \\\noutputfile.txt\n"})}),"\n",(0,a.jsx)(n.p,{children:"(9) Configure S3 source bucket as event source"}),"\n",(0,a.jsx)(n.p,{children:"First of all, you need to add the permission to s3 (see here)."}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:'aws lambda add-permission \\\n  --function-name <your function name> \\\n  --region <your region> \\\n  --statement-id Id-123 \\\n  --action "lambda:InvokeFunction" \\\n  --principal s3.amazonaws.com \\\n  --source-arn arn:aws:s3:::<source-bucket> \\\n  --source-account <account number> \\\n'})}),"\n",(0,a.jsx)(n.p,{children:"Go to the source bucket and configure event as below. In this example, my source bucket is lambda.test.source."}),"\n",(0,a.jsx)(n.p,{children:"(10) Execute the function by pushing file to the source bucket"}),"\n",(0,a.jsx)(n.p,{children:"Let\u2019s push a file to S3 with AWS console and check if the function moved the data into the target bucket. Here is the s3 copy command reference."}),"\n",(0,a.jsx)(n.p,{children:"aws s3 cp your_file_name.json s3://lambda.test.source/2018-03-01/your_file_name.json\nYou can check the execution outcome in CloudWatch, too."}),"\n",(0,a.jsx)(n.p,{children:"Yay!"}),"\n",(0,a.jsx)(n.p,{children:"(2018-03-04)"})]})}function u(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(d,{...e})}):d(e)}},28453:(e,n,t)=>{t.d(n,{R:()=>s,x:()=>r});var a=t(96540);const o={},i=a.createContext(o);function s(e){const n=a.useContext(i);return a.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:s(e.components),a.createElement(i.Provider,{value:n},e.children)}}}]);