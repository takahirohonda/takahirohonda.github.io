"use strict";(self.webpackChunkmydatahack_blog_site=self.webpackChunkmydatahack_blog_site||[]).push([[8121],{72548:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>a,default:()=>d,frontMatter:()=>s,metadata:()=>c,toc:()=>r});var o=t(74848),i=t(28453);const s={sidebar_position:55},a="Using setInterval() and setTimeout() with JavaScript",c={id:"Web/Frontend/setInterval-setTimeout",title:"Using setInterval() and setTimeout() with JavaScript",description:"setInterval() and setTimeout() functions are the quickest solutions to loop functions with JavaScript, often used for a simple animation effects.",source:"@site/docs/Web/Frontend/55.setInterval-setTimeout.md",sourceDirName:"Web/Frontend",slug:"/Web/Frontend/setInterval-setTimeout",permalink:"/mydatahack-old-blog/docs/Web/Frontend/setInterval-setTimeout",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:55,frontMatter:{sidebar_position:55},sidebar:"tutorialSidebar",previous:{title:"Serverless Authentication with AWS Cognito and JavaScript",permalink:"/mydatahack-old-blog/docs/Web/Frontend/auth-cognito-js"},next:{title:"React Unit Test Code Snippets with Jest and Enzyme",permalink:"/mydatahack-old-blog/docs/Web/Frontend/unit-test-code-snippet-jest-enzyme"}},l={},r=[];function u(e){const n={code:"code",h1:"h1",p:"p",pre:"pre",...(0,i.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.h1,{id:"using-setinterval-and-settimeout-with-javascript",children:"Using setInterval() and setTimeout() with JavaScript"}),"\n",(0,o.jsx)(n.p,{children:"setInterval() and setTimeout() functions are the quickest solutions to loop functions with JavaScript, often used for a simple animation effects."}),"\n",(0,o.jsxs)(n.p,{children:["For example, ",(0,o.jsx)(n.code,{children:"setInterval(function(){functionA()}, 1000)"})," executes ",(0,o.jsx)(n.code,{children:"functionA()"})," every second. On the other hand, ",(0,o.jsx)(n.code,{children:"setTimeout(function(){functionA()}, 1000)"})," executes ",(0,o.jsx)(n.code,{children:"functionA()"})," once after waiting for 1 seconds."]}),"\n",(0,o.jsx)(n.p,{children:"Both can be stopped by clearInterval() and clearTimeout() by passing the returned values from respective functions."}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-js",children:"var id =  setInterval(function(){functionA()}, 1000) executes functionA();\nclearInterval(id);\n\nvar id  = setTimeout(function(){functionA()}, 1000) executes functionA();\nclearTimeout(id);\nsetTimeout() can be used to loop functions recursively. The difference from using setInterval() is that the recursive way with setTimeout() calls the function next time only when the first function completes the execution. setInterval() calls the function next time regardless of the execution completion as soon as the time is up. If your function needs to complete the execution before the subsequent call (e.g. AJAX call), it is better to use setTimeout() recursively.\n\nfunction timeoutLoop() {\n  setTimeout(function () {\n    functionA(){ ...do something };\n    timeoutLoop();\n  }, 1000);\n}\n"})}),"\n",(0,o.jsx)(n.p,{children:"Note that neither timer does not guarantee 100% precision. If the precision is critical, they are not recommended to use."}),"\n",(0,o.jsx)(n.p,{children:"Let\u2019s have a look at examples."}),"\n",(0,o.jsx)(n.p,{children:"(1) Counter"}),"\n",(0,o.jsx)(n.p,{children:"The function below display the count from 10 to 0 and goes back to 10. setInterval() is called when the window is loaded."}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-js",children:'window.addEventListener("load", function () {\n  displayCount();\n  setInterval(function () {\n    displayCount();\n  }, 1000);\n});\n\nfunction displayCount() {\n  var element = document.getElementById("counter");\n  element.innerHTML = counter;\n  counter -= 1;\n  console.log(counter);\n  if (counter === -1) {\n    counter = 10;\n  }\n}\n'})}),"\n",(0,o.jsx)(n.p,{children:"(2) Button Flashing"}),"\n",(0,o.jsx)(n.p,{children:"Cheap, but effective, trick to flash the button by changing the button color through CSS."}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-css",children:".yellow-button{\n    background-color: yellow;\n\n.pink-button {\n    background-color: pink;\n}\n"})}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-js",children:'window.addEventListener("load", function () {\n  flashButton();\n  setInterval(function () {\n    flashButton();\n  }, 1000);\n});\n\nfunction flashButton() {\n  var element = document.getElementById("flasher");\n  if (element.className.includes("yellow")) {\n    element.className = "pink-button";\n  } else {\n    element.className = "yellow-button";\n  }\n}\n'})}),"\n",(0,o.jsx)(n.p,{children:"(3) AJAX call loop"}),"\n",(0,o.jsx)(n.p,{children:"As I mentioned before, when you want to ensure the function to complete execution and can be lenient to the timing of execution, it is better to use setTimeout() recursively. In this example, the function is doing AJAX call to get data from an API endpoint (using JSONPlaceholder). In this way, it only executes the function next time after AJAX call completes."}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-js",children:'window.addEventListener("load", function () {\n  timeoutLoop();\n});\n\nfunction timeoutLoop() {\n  setTimeout(function () {\n    loadDoc();\n    timeoutLoop();\n  }, 1000);\n}\n\nfunction loadDoc() {\n  var xhttp = new XMLHttpRequest();\n  var element = document.getElementById("ajax");\n  element.innerHTML = "";\n  xhttp.onreadystatechange = function () {\n    if (this.readyState == 4 && this.status == 200) {\n      element.innerHTML = this.responseText;\n    }\n  };\n\n  xhttp.open("GET", "https://jsonplaceholder.typicode.com/todos/1", true);\n  xhttp.send();\n}\n'})}),"\n",(0,o.jsx)(n.p,{children:"(4) Header Text Slider"}),"\n",(0,o.jsx)(n.p,{children:"This moves a header text from left to right by changing the left CSS property. Another easy and effective trick. The similar animation reference can be found here."}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-js",children:'var offset = 0;\nwindow.addEventListener("load", function () {\n  setInterval(function () {\n    moveLeft();\n  }, 10);\n});\n\nfunction moveLeft() {\n  var element = document.getElementById("carousel");\n  element.style.left = offset + "px";\n  element.style.top = document.getElementById("carousel-div").offsetTop;\n  element.style.position = "absolute";\n\n  if (\n    offset >=\n    document.getElementById("carousel-div").offsetWidth - element.offsetWidth\n  ) {\n    offset = 0;\n  } else {\n    offset += 1;\n  }\n}\n'})}),"\n",(0,o.jsx)(n.p,{children:"(5) Header Animation"}),"\n",(0,o.jsx)(n.p,{children:"When you first visit the website, it loads the first header text. Then subsequently, changes text every second. After 3 seconds, the animation finishes until the page is loaded again. This is another easy and effective trick that many websites use."}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-js",children:'window.addEventListener("load", function () {\n  title1();\n  setTimeout(function () {\n    title2();\n  }, 1000);\n  setTimeout(function () {\n    title3();\n  }, 2000);\n  setTimeout(function () {\n    title4();\n  }, 3000);\n});\n\nfunction title1() {\n  element.innerHTML = "Welcome";\n}\n\nfunction title2() {\n  element.innerHTML = "You are entering into ...";\n  element.style.color = "yellow";\n}\n\nfunction title3() {\n  var element = document.getElementById("h1Animation");\n  element.innerHTML = "The world of ...";\n  element.style.color = "blue";\n}\n\nfunction title4() {\n  var element = document.getElementById("h1Animation");\n  element.innerHTML = "My DataHack";\n  element.style.color = "red";\n}\n'})}),"\n",(0,o.jsx)(n.p,{children:"(2019-01-05)"})]})}function d(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(u,{...e})}):u(e)}},28453:(e,n,t)=>{t.d(n,{R:()=>a,x:()=>c});var o=t(96540);const i={},s=o.createContext(i);function a(e){const n=o.useContext(s);return o.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:a(e.components),o.createElement(s.Provider,{value:n},e.children)}}}]);