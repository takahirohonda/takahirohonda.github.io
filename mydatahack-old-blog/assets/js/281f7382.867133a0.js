"use strict";(self.webpackChunkmydatahack_blog_site=self.webpackChunkmydatahack_blog_site||[]).push([[9736],{60960:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>o,default:()=>p,frontMatter:()=>i,metadata:()=>a,toc:()=>d});var r=n(74848),s=n(28453);const i={sidebar_position:31},o="Getting started with Selenium with Python",a={id:"Web/Frontend/selenium-python",title:"Getting started with Selenium with Python",description:"There are a few automation testing tools for web applications out there. Selenium is one of them and is probably most widely-used. It is the most famous and the oldest, but still relevant, automation testing tool. It is open-source and supports many different major programming languages, such as Java, C#, PHP, Python, Perl and Ruby.",source:"@site/docs/Web/Frontend/31.selenium-python.md",sourceDirName:"Web/Frontend",slug:"/Web/Frontend/selenium-python",permalink:"/mydatahack-old-blog/docs/Web/Frontend/selenium-python",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:31,frontMatter:{sidebar_position:31},sidebar:"tutorialSidebar",previous:{title:"What is \u2018this\u2019 referencing to in JavaScript?",permalink:"/mydatahack-old-blog/docs/Web/Frontend/this-ref-js"},next:{title:"SVG Attributes for Sizing Doesn\u2019t Work on iPhone",permalink:"/mydatahack-old-blog/docs/Web/Frontend/svg-attribute-not-working-iphone"}},l={},d=[];function h(e){const t={code:"code",h1:"h1",p:"p",pre:"pre",...(0,s.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(t.h1,{id:"getting-started-with-selenium-with-python",children:"Getting started with Selenium with Python"}),"\n",(0,r.jsx)(t.p,{children:"There are a few automation testing tools for web applications out there. Selenium is one of them and is probably most widely-used. It is the most famous and the oldest, but still relevant, automation testing tool. It is open-source and supports many different major programming languages, such as Java, C#, PHP, Python, Perl and Ruby."}),"\n",(0,r.jsx)(t.p,{children:"For automation tests, I have been using Cypress, which uses TypeScript. Cypress is great because it is easy to learn (writing tests feel like writing regular JavaScript unit tests apart from needing to learn Cypress APIs). It is easy to debug as the browser stays open after the test runs and we can rewind to any previous steps."}),"\n",(0,r.jsx)(t.p,{children:"One of the drawback for using Cypress is that it uses the older version of chrome and no other browser support is available at the moment."}),"\n",(0,r.jsx)(t.p,{children:"Anyway, I decided to get out of my comfort zone and give it a go at Selenium. A few people suggested me that it was a pretty cool tool for web application automation tests. Data people have been using it to scrape web or automate file download actions to get data and they really love the tool. Because we can write those scripts in Python, the entry barrier for data people is low."}),"\n",(0,r.jsx)(t.p,{children:"Learning Selenium seems to open more possibilities than just writing web automation tests. The best thing is that we can do them all in Python!"}),"\n",(0,r.jsx)(t.p,{children:"This post focuses on setting up Selenium and run a simple test for a fictitious user sign in page. Let\u2019s get started."}),"\n",(0,r.jsx)(t.p,{children:"Setting up"}),"\n",(0,r.jsx)(t.p,{children:"Assuming you have Python (both 2 and 3 work) installed, you need to install selenium, web driver, pytest and pytest-html. You can check out the selenium-python documentation for further information. This documentation\u2019s examples use unittest. I prefer using pytest. So, let\u2019s install pytest for a testing framework and also install pytest-html to output the test results in a html format."}),"\n",(0,r.jsx)(t.p,{children:"(1) Install Selenium"}),"\n",(0,r.jsx)(t.p,{children:(0,r.jsx)(t.code,{children:"pip install selenium"})}),"\n",(0,r.jsx)(t.p,{children:"(2) Install driver"}),"\n",(0,r.jsx)(t.p,{children:"By downloading different drivers, you can run tests in different browsers. Drivers are supplied by the browser vendors. You can get the links to download drivers from the 1.3 Driver section here. In this example, let\u2019s get the driver for chrome. You need to make sure the version of the driver matches the version of the Chrome installed on your computer."}),"\n",(0,r.jsxs)(t.p,{children:["The driver is an executable file. You can put it in any folder and the path to that driver can be referred in Python code like this: ",(0,r.jsx)(t.code,{children:"driver = webdriver.Chrome(\u2018./drivers/chromedriver.exe\u2019)"}),"."]}),"\n",(0,r.jsx)(t.p,{children:"(3) Install pytest"}),"\n",(0,r.jsx)(t.p,{children:"pytest is the best testing framework for Python. It is used widely for large scale Python projects. It has pretty much everything you ask for a testing framework."}),"\n",(0,r.jsx)(t.p,{children:(0,r.jsx)(t.code,{children:"pip install pytest"})}),"\n",(0,r.jsx)(t.p,{children:"(4) Install pytest-html"}),"\n",(0,r.jsx)(t.p,{children:"This is for outputting the test results in html format. By default, it creates report.html in the same folder as the test script is located."}),"\n",(0,r.jsx)(t.p,{children:(0,r.jsx)(t.code,{children:"pip install pytest-html"})}),"\n",(0,r.jsx)(t.p,{children:"Running test"}),"\n",(0,r.jsx)(t.p,{children:"The test is executed by pytest. To run a test, we can use this command, assuming the test script is called exampleTest.py and you are in the same folder where the script is."}),"\n",(0,r.jsx)(t.p,{children:(0,r.jsx)(t.code,{children:"py.test --html=report.html exampleTest.py"})}),"\n",(0,r.jsxs)(t.p,{children:["For the first time, I recommend to run this example. The test is test_basic_duckduckgo_search. You can copy and paste the entire example and execute it with ",(0,r.jsx)(t.code,{children:"py.test \u2013html=report.html firstTest.py"}),"."]}),"\n",(0,r.jsx)(t.p,{children:"Test Example"}),"\n",(0,r.jsx)(t.p,{children:"Now, here is the actual test example. I have a website with a registration page. Each user has to have a unique email. Therefore, I have utility function to create unique user each time the test runs."}),"\n",(0,r.jsx)(t.p,{children:"The selecting element is fairly simple. As with any automation test, we need to wait till the website loads. You can use the WebDriverWait function for that."}),"\n",(0,r.jsx)(t.p,{children:"For some reason, element_to_be_clickable didn\u2019t work for me. The work around is to use execute_script function to call JavaScript function. It works fine."}),"\n",(0,r.jsx)(t.p,{children:"We need to initialise the driver in the fixture. The rest is pretty straight forward."}),"\n",(0,r.jsx)(t.h1,{id:"run-test--pytest---htmlreporthtml-registerpagepy",children:"run test > py.test --html=report.html registerPage.py"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-python",children:"import pytest\nimport time\nfrom selenium import webdriver\nfrom selenium.webdriver.common.keys import Keys\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.support import expected_conditions as EC\n\n@pytest.fixture\ndef browser():\n  driver = webdriver.Chrome('./drivers/chromedriver.exe')\n  driver.implicitly_wait(10)\n  yield driver\n  driver.quit()\n\n@pytest.fixture\ndef index():\n  index = getCurrentIndex()\n\n  yield index\n  updateIndex()\n\ndef test_register_student(browser):\n  url = 'http://localhost/account/register'\n  password = 'Password123'\n  browser.get(url)\n\n  firstname_input = browser.find_element_by_id('firstname')\n  firstname_input.send_keys('FirstNameTest', Keys.RETURN)\n  lastname_input = browser.find_element_by_id('lastname')\n  lastname_input.send_keys('LastNameTest', Keys.RETURN)\n  email_input = browser.find_element_by_id('email')\n  index = getCurrentIndex()\n  print('checking current index: ' + 'registerusertest{}@gmail.com'.format(index))\n  email_input.send_keys('registerusertest{}@gmail.com'.format(index), Keys.RETURN)\n  updateIndex()\n\n  password_input = browser.find_element_by_id('password')\n  password_input.send_keys(password, Keys.RETURN)\n  confirm_password_input = browser.find_element_by_id('confirmedpassword')\n  confirm_password_input.send_keys(password, Keys.RETURN)\n\n  # For some reason, this doesn't work...\n  # browser.find_element(By.ID, \"btn-register-page-register\").click()\n  # registerBtn = WebDriverWait(browser, 10)\n  # .until(EC.element_to_be_clickable((By.ID, \"btn-register-page-register\")))\n  # registerBtn.click()\n\n  # this alternative works better\n  element = browser.find_element_by_id(\"btn-register\")\n  browser.execute_script(\"arguments[0].click();\", element)\n  WebDriverWait(browser, 30).until(EC.url_contains('selection'))\n  browser.get('http://localhost/dashboard')\n\n  header = browser.find_element_by_tag_name('h1')\n\n  assert header.text == 'Welcome to Dashboard'\n\n# Utilities\nindexFilePath = './data/user_index'\ndef updateIndex():\n  index = int(getCurrentIndex())\n  f = open(indexFilePath, 'w')\n  f.write(str(index + 1))\n\ndef getCurrentIndex():\n  f = open(indexFilePath, 'r')\n  return f.read()\n"})}),"\n",(0,r.jsx)(t.p,{children:"After having written tests with JavaScript for a long time, it is fun and liberating to use Python. You should give it a go, too!"}),"\n",(0,r.jsx)(t.p,{children:"(2020-01-31)"})]})}function p(e={}){const{wrapper:t}={...(0,s.R)(),...e.components};return t?(0,r.jsx)(t,{...e,children:(0,r.jsx)(h,{...e})}):h(e)}},28453:(e,t,n)=>{n.d(t,{R:()=>o,x:()=>a});var r=n(96540);const s={},i=r.createContext(s);function o(e){const t=r.useContext(i);return r.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function a(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:o(e.components),r.createElement(i.Provider,{value:t},e.children)}}}]);