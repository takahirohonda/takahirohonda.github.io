"use strict";(self.webpackChunkmydatahack_blog_site=self.webpackChunkmydatahack_blog_site||[]).push([[5251],{38168:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>p,frontMatter:()=>r,metadata:()=>a,toc:()=>d});var s=n(74848),o=n(28453);const r={sidebar_position:17},i="Using Parcel Bundler for TypeScript React App",a={id:"Web/Frontend/parcel-bundler",title:"Using Parcel Bundler for TypeScript React App",description:"Parcel is a relatively new JS bundler that promises zero configuration. I heard a lot of good things about this new bundler. So, I decided to give it a go. Here is the project that I created with Parcel, parcel-ts-react.",source:"@site/docs/Web/Frontend/17.parcel-bundler.md",sourceDirName:"Web/Frontend",slug:"/Web/Frontend/parcel-bundler",permalink:"/docs/Web/Frontend/parcel-bundler",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:17,frontMatter:{sidebar_position:17},sidebar:"tutorialSidebar",previous:{title:"Quickest Way to Add Eslint to JavaScript and TypeScript Projects",permalink:"/docs/Web/Frontend/add-eslint-to-js-ts"},next:{title:"Adding Custom Font to Storybook",permalink:"/docs/Web/Frontend/custom-font-storybook"}},l={},d=[];function c(e){const t={code:"code",h1:"h1",li:"li",ol:"ol",p:"p",pre:"pre",...(0,o.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(t.h1,{id:"using-parcel-bundler-for-typescript-react-app",children:"Using Parcel Bundler for TypeScript React App"}),"\n",(0,s.jsx)(t.p,{children:"Parcel is a relatively new JS bundler that promises zero configuration. I heard a lot of good things about this new bundler. So, I decided to give it a go. Here is the project that I created with Parcel, parcel-ts-react."}),"\n",(0,s.jsx)(t.p,{children:"In short, Parcel is great for small personal projects. However, it is not as easily customisable as webpack. As it is a new tool, there is not enough documentation available, either. If I\u2019m gonna work on a professional project, I still would go for webpack. It is well-documented, more flexible and you can pretty much cover all the special requirements with all the plugins and Stack Overflow articles. It takes a bit of time writing all the webpack configs, but the time and effort you will spend on getting a workaround for what you want to do with Parcel will take as much if you have special requirements, such as organising the dist folder as mentioned later."}),"\n",(0,s.jsx)(t.p,{children:"Here are the technologies I used for the project."}),"\n",(0,s.jsx)(t.p,{children:"\u2013 TypeScript\n\u2013 React\n\u2013 SCSS\n\u2013 Using static assets (e.g. Custom font files)\n\u2013 CSS Modules"}),"\n",(0,s.jsx)(t.p,{children:"How to setup the project"}),"\n",(0,s.jsxs)(t.ol,{children:["\n",(0,s.jsx)(t.li,{children:"Installing Parcel"}),"\n"]}),"\n",(0,s.jsx)(t.p,{children:"Installing Parcel is super easy. All you need to do is add to the dev dependencies."}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-bash",children:"yarn add parcel-bundler --dev\n"})}),"\n",(0,s.jsxs)(t.ol,{start:"2",children:["\n",(0,s.jsx)(t.li,{children:"TypeScript Support for React"}),"\n"]}),"\n",(0,s.jsx)(t.p,{children:"TypeScript is supported out of the box. Just install React and TypeScript as you would normally do. All you need to do is to install TypeScript and add a tsconfig.json file."}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-bash",children:"yarn add react react-dom\nyarn add typescript @types/react @types/react-dom --dev\n"})}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-json",children:'{\n  "compilerOptions": {\n    "moduleResolution": "node",\n    "noImplicitAny": true,\n    "strictNullChecks": false,\n    "types": ["jest", "node"],\n    "outDir": "./dist/",\n    "sourceMap": true,\n    "module": "es6",\n    "target": "es5",\n    "jsx": "react",\n    "resolveJsonModule": true,\n    "skipLibCheck": true,\n    "esModuleInterop": true\n  },\n  "include": ["./src/**/*"],\n  "exclude": ["./src/**/tests/**/*", "node_modules"]\n}\n'})}),"\n",(0,s.jsx)(t.p,{children:"Once TypeScript is configured, all you need to do is to add an entry file (index.html) and add the React entry file in the src, same as JavaScript projects."}),"\n",(0,s.jsx)(t.p,{children:"Then add start and build scripts. Start script does hot loading. Build creates a dist folder for deployment."}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-json",children:'"start": "parcel ./src/index.html --open",\n"build": "parcel build ./src/index.html"\n'})}),"\n",(0,s.jsx)(t.p,{children:"It compiles React code and SASS out of the box."}),"\n",(0,s.jsxs)(t.ol,{start:"3",children:["\n",(0,s.jsx)(t.li,{children:"Enabling CSS Modules"}),"\n"]}),"\n",(0,s.jsx)(t.p,{children:"CSS modules pretty much work out of the box because Parcel is using postcss-modules. Only one thing you need to do is to create a .postcssrc file and add modules true."}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-json",children:'{\n  "modules": true\n}\n'})}),"\n",(0,s.jsx)(t.p,{children:"Ah, wait. It is actually not as easy. I had an error that said \u2018PostCSS plugin postcss-modules requires PostCSS 8 error\u2019. For this error, I first upgraded the parcel to next (v2) and hoped it would fix it. Nah, it didn\u2019t. So, I had to downgrade postcss-modules."}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-bash",children:"yarn add parcel@next postcss --dev\nyarn add postcss-modules@3.2.2 --dev\n"})}),"\n",(0,s.jsx)(t.p,{children:"To generate type files from CSS, I used parcel-plugin-css-modules-type-generator. Once it is installed, it will generate type files for CSS whenever it builds."}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-bash",children:"yarn add parcel-plugin-css-modules-type-generator --dev\n"})}),"\n",(0,s.jsxs)(t.ol,{start:"4",children:["\n",(0,s.jsx)(t.li,{children:"Moving Font files"}),"\n"]}),"\n",(0,s.jsx)(t.p,{children:"As long as we have a font face declaration in a css file, it will move the font files to the dist folder."}),"\n",(0,s.jsx)(t.p,{children:"What is difficult to do."}),"\n",(0,s.jsxs)(t.ol,{children:["\n",(0,s.jsx)(t.li,{children:"Customising the dist folder structure."}),"\n"]}),"\n",(0,s.jsx)(t.p,{children:"Nah, you cannot do it unless you write a script to change it after the build. All the files are put at the same level as the dist folder."}),"\n",(0,s.jsxs)(t.ol,{start:"2",children:["\n",(0,s.jsx)(t.li,{children:"Customising the file name."}),"\n"]}),"\n",(0,s.jsx)(t.p,{children:"Nah, not sure how to do it out of the box unless you write a script. It\u2019s probably ok if you just wanna push the entire dist folder to CDN\u2026 Only thing you can customise is the entry file name by using the -o option."}),"\n",(0,s.jsx)(t.p,{children:"Ok, that\u2019s pretty much it. All in all, it\u2019s a nice tool except I had some trouble to get CSS modules going. For all the other details, see this project. Now you are ready to use Parcel for your next React app!"}),"\n",(0,s.jsx)(t.p,{children:"(2021-04-24)"})]})}function p(e={}){const{wrapper:t}={...(0,o.R)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(c,{...e})}):c(e)}},28453:(e,t,n)=>{n.d(t,{R:()=>i,x:()=>a});var s=n(96540);const o={},r=s.createContext(o);function i(e){const t=s.useContext(r);return s.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function a(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:i(e.components),s.createElement(r.Provider,{value:t},e.children)}}}]);