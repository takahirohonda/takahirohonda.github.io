"use strict";(self.webpackChunkmydatahack_blog_site=self.webpackChunkmydatahack_blog_site||[]).push([[4217],{26346:(e,n,a)=>{a.r(n),a.d(n,{assets:()=>c,contentTitle:()=>i,default:()=>u,frontMatter:()=>r,metadata:()=>l,toc:()=>s});var o=a(74848),t=a(28453);const r={sidebar_position:1},i="How to Persist Data in Local DynamoDB Docker Container",l={id:"Infrastructure/Miscellaneous/local-dynamo-docker",title:"How to Persist Data in Local DynamoDB Docker Container",description:"Having DynamoDB running locally is handy for local development. There are two ways to run DynamoDB locally, (1) using a jar file or (2) using a docker image. Generally speaking, running container is better than running a jar file in your local computer because it gives you more flexibility and consistency. AWS offers a DynamoDB local Docker image. We can pull the image and run it in your local machine easily.",source:"@site/docs/Infrastructure/Miscellaneous/1.local-dynamo-docker.md",sourceDirName:"Infrastructure/Miscellaneous",slug:"/Infrastructure/Miscellaneous/local-dynamo-docker",permalink:"/mydatahack-old-blog/docs/Infrastructure/Miscellaneous/local-dynamo-docker",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"tutorialSidebar",previous:{title:"Miscellaneous",permalink:"/mydatahack-old-blog/docs/category/miscellaneous"},next:{title:"Create Custom Python Module and Distribute with Git",permalink:"/mydatahack-old-blog/docs/Infrastructure/Miscellaneous/custom-py-module"}},c={},s=[];function d(e){const n={code:"code",h1:"h1",p:"p",pre:"pre",...(0,t.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.h1,{id:"how-to-persist-data-in-local-dynamodb-docker-container",children:"How to Persist Data in Local DynamoDB Docker Container"}),"\n",(0,o.jsx)(n.p,{children:"Having DynamoDB running locally is handy for local development. There are two ways to run DynamoDB locally, (1) using a jar file or (2) using a docker image. Generally speaking, running container is better than running a jar file in your local computer because it gives you more flexibility and consistency. AWS offers a DynamoDB local Docker image. We can pull the image and run it in your local machine easily."}),"\n",(0,o.jsx)(n.h1,{id:"install",children:"install"}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.code,{children:"docker pull amazon/dynamodb-local"})}),"\n",(0,o.jsx)(n.h1,{id:"start",children:"start"}),"\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.code,{children:"docker run -dp 8000:8000 --name localDynamoNoMount amazon/dynamodb-local"}),"\nNow we can start creating tables and inserting data into this. However, once you stop the container, all the data will be lost because everything is stored in memory."]}),"\n",(0,o.jsx)(n.p,{children:"To persist data, the best option is to mount a volume to this. We can do this by using Dockerfile to create a local data folder in the container and map it to the volume on the local machine."}),"\n",(0,o.jsx)(n.p,{children:"There is already an example available for both Dockerfile. See dynamodb-local-persist."}),"\n",(0,o.jsx)(n.p,{children:"Steps"}),"\n",(0,o.jsx)(n.p,{children:"Create a Dockerfile as below"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{children:'FROM amazon/dynamodb-local\nWORKDIR /home/dynamodblocal\nRUN mkdir ./db && chown -R 1000 ./db\nCMD ["-jar", "DynamoDBLocal.jar", "-dbPath", "./db", "-sharedDb"]\nVOLUME ["./db"]\n'})}),"\n",(0,o.jsx)(n.p,{children:"Then build and run with the command below."}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.code,{children:"docker build -t local-dynamodb-data ."})}),"\n",(0,o.jsx)(n.h1,{id:"checking-the-newly-created-image",children:"checking the newly created image"}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.code,{children:"docker image ls  "})}),"\n",(0,o.jsx)(n.h1,{id:"run-with-volume",children:"run with volume"}),"\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.code,{children:"docker run -d --name mydynamodb -p 8000:8000 -v dynamodb-local:/home/dynamodblocal/db local-dynamodb-data"}),"\nThen we can create table."]}),"\n",(0,o.jsx)(n.h1,{id:"create-table",children:"Create Table"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:"aws dynamodb create-table ^\n--endpoint-url http://localhost:8000 ^\n--table-name Music ^\n--attribute-definitions ^\n    AttributeName=Artist,AttributeType=S ^\n    AttributeName=SongTitle,AttributeType=S ^\n--key-schema ^\n    AttributeName=Artist,KeyType=HASH ^\n    AttributeName=SongTitle,KeyType=RANGE ^\n--provisioned-throughput ^\n    ReadCapacityUnits=10,WriteCapacityUnits=5\n\n# List Table\naws dynamodb list-tables --endpoint-url http://localhost:8000\nOnce you stop the local dynamodb docker and restart it, you can still see the table created persists.\n\ndocker stop mydynamodb\ndocker start mydynamodb\n"})}),"\n",(0,o.jsx)(n.p,{children:"Alternatively, we can use docker-compose to run the container instead of using the docker build and run command with the existing Dockerfile."}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{children:'version: "3.8"\nservices:\n  dynamodb:\n    build:\n      context: .\n      dockerfile: Dockerfile\n    container_name: dynamoDbLocalDockerCompose\n    ports:\n      - "8111:8000"\n    volumes:\n      - dynamodb-local:/home/dynamodblocal/db\nvolumes:\n  dynamodb-local:\n    driver: local\n'})}),"\n",(0,o.jsx)(n.p,{children:"Once we have this file, we can run the docker-compose up command."}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.code,{children:"docker-compose up"})}),"\n",(0,o.jsx)(n.p,{children:"(2020-06-29)"})]})}function u(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(d,{...e})}):d(e)}},28453:(e,n,a)=>{a.d(n,{R:()=>i,x:()=>l});var o=a(96540);const t={},r=o.createContext(t);function i(e){const n=o.useContext(r);return o.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:i(e.components),o.createElement(r.Provider,{value:n},e.children)}}}]);