"use strict";(self.webpackChunkmydatahack_blog_site=self.webpackChunkmydatahack_blog_site||[]).push([[103],{7344:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>i,contentTitle:()=>r,default:()=>h,frontMatter:()=>o,metadata:()=>l,toc:()=>c});var a=n(74848),s=n(28453);const o={sidebar_position:12},r="How to Bulk Load Data with JDBC and Python",l={id:"data-ingestion/jdbc-python",title:"How to Bulk Load Data with JDBC and Python",description:"Let\u2019s do data bulk load by using JDBC and Python. The aim of this post is pretty much the same as the previous one with ODBC. We are going to export a table into a csv file and import the exported file into a table by using JDBC drivers and Python. To interact with JDBC drivers, you need to install the JayDeBeApi module.",source:"@site/docs/data-ingestion/12.jdbc-python.md",sourceDirName:"data-ingestion",slug:"/data-ingestion/jdbc-python",permalink:"/mydatahack-old-blog/docs/data-ingestion/jdbc-python",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:12,frontMatter:{sidebar_position:12},sidebar:"tutorialSidebar",previous:{title:"How to Ingest FullStory Data Export Extracts with Python",permalink:"/mydatahack-old-blog/docs/data-ingestion/fullstory-data-python"},next:{title:"How to Bulk Load Data with ODBC and Python",permalink:"/mydatahack-old-blog/docs/data-ingestion/odbc-python"}},i={},c=[];function d(e){const t={code:"code",h1:"h1",p:"p",pre:"pre",...(0,s.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(t.h1,{id:"how-to-bulk-load-data-with-jdbc-and-python",children:"How to Bulk Load Data with JDBC and Python"}),"\n",(0,a.jsx)(t.p,{children:"Let\u2019s do data bulk load by using JDBC and Python. The aim of this post is pretty much the same as the previous one with ODBC. We are going to export a table into a csv file and import the exported file into a table by using JDBC drivers and Python. To interact with JDBC drivers, you need to install the JayDeBeApi module."}),"\n",(0,a.jsx)(t.p,{children:"For some reason, I could not get JayBeDeApi to work with Python 2.7. When I install it, I kept getting the class not found error (such as Error: java.lang.RuntimeException: Class com.mysql.jdbc.Driver not found) although I had the correct class name and jar file path. When I switched to Python 3 with JayBeDeApi3 installation, the problem disappeared. So, code here only works on Python 3. For Python 3, you need to install JayBeDeApi3 as below."}),"\n",(0,a.jsx)(t.p,{children:(0,a.jsx)(t.code,{children:"pip install JayBeDeApi3"})}),"\n",(0,a.jsx)(t.p,{children:"Let\u2019s first import the required modules. Although you installed as JayBeDeApi3, the name of the module in the code is jaydebeapi."}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-python",children:"import jaydebeapi as jdbc\nimport pandas as pd\nimport sys\n"})}),"\n",(0,a.jsx)(t.p,{children:"Exporting CSV file from Table"}),"\n",(0,a.jsx)(t.p,{children:"The function takes a select statement and connection parameters. You have to make sure to have the correct class name (case sensitive!) and the path to the JDBC jar file. The rest is pretty straight forward. We are using pandas function to convert the query results into a data frame and creating a csv file from it."}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-python",children:"def table_to_csv(sql, file_path, jdbc_class,\\\n                         jdbc_path, url, user, pw):\n    '''This function create a csv file from sql\n    with the specified JDBC driver.'''\n    try:\n        conn = jdbc.connect(jdbc_class,\n                                [url, user, pw],\n                                jdbc_path)\n        print('Connecting to {}'.format(url))\n        # Get data into pandas dataframe\n        df = pd.read_sql(sql, conn)\n        # Write to csv file\n        df.to_csv(file_path, encoding='utf-8', header = True,\\\n         doublequote = True, sep=',', index=False)\n        print(\"CSV File has been created\")\n        conn.close()\n\n    except Exception as e:\n        print(\"Error: {}\".format(str(e)))\n        sys.exit(1)\n"})}),"\n",(0,a.jsx)(t.p,{children:"Here is the execution example with MySQL JDBC."}),"\n",(0,a.jsx)(t.h1,{id:"create-csv-file-from-mysql-table",children:"Create CSV file from MySQL Table"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-python",children:"sql = 'Select * From world.city'\nfile_path = '/tmp/city.csv'\nmysql_class = 'com.mysql.jdbc.Driver'\nmysql_jdbc_path = '/tmp/mysql-connector-java-5.1.46.jar'\nmysql_url = 'jdbc:mysql://localhost:3306/world'\nmysql_user = 'username'\nmysql_pw = 'password'\n\ntable_to_csv(sql, file_path, mysql_class, mysql_jdbc_path,\\\n mysql_url, mysql_user, mysql_pw)\n"})}),"\n",(0,a.jsx)(t.p,{children:"Importing CSV file to Table"}),"\n",(0,a.jsx)(t.p,{children:"The function takes a flat file upload statement and connection parameters. If you do not set autocommit, you need to execute the commit statement. Either way works fine."}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-python",children:"def load_csv(load_sql, jdbc_class, jdbc_path,\\\n                                     url, user, pw):\n    '''This function upload csv into a table\n    with the specified JDBC driver.'''\n    try:\n        conn = jdbc.connect(jdbc_class,\n                                [url, user, pw],\n                                jdbc_path)\n        print('Connecting to {}'.format(url))\n        # Create cursor and execute sql\n        cur = conn.cursor()\n        conn.jconn.setAutoCommit(True)\n        cur.execute(load_sql)\n        print('Successfully executed {}'.format(load_sql))\n        conn.close()\n\n    except Exception as e:\n        print(\"Error: {}\".format(str(e)))\n        sys.exit(1)\n"})}),"\n",(0,a.jsx)(t.p,{children:"Here are the execution examples with MySQL and Postgres. Each database has SQL syntax for this and you need to pass the statement to the function. MySQL uses the LOAD DATA INFILE command while Postgres uses the copy command."}),"\n",(0,a.jsx)(t.h1,{id:"1-load-csv-file-to-mysql-table",children:"(1) Load CSV file to MySQL Table"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-python",children:"load_sql = \"LOAD DATA LOCAL INFILE '/tmp/city.csv' INTO TABLE usermanaged.city\\\n FIELDS TERMINATED BY ',' ENCLOSED BY '\\\"' IGNORE 1 LINES;\"\nmysql_class = 'com.mysql.jdbc.Driver'\nmysql_jdbc_path = '/tmp/mysql-connector-java-5.1.46.jar'\nmysql_url = 'jdbc:mysql://localhost:3306/world'\nmysql_user = 'username'\nmysql_pw = 'password'\nload_csv(load_sql, mysql_class, mysql_jdbc_path,\\\n mysql_url, mysql_user, mysql_pw)\n\n# (2) Load CSV file to Postgres Table\npg_class = 'org.postgresql.Driver'\npg_jdbc_path = '/tmp/postgresql-42.2.2.jar'\npg_url = 'jdbc:postgresql://localhost:5432/mydatahack'\npg_user = 'username'\npg_pw = 'password'\nload_sql = \"COPY usermanaged.city FROM '/tmp/city.csv' CSV HEADER\"\nload_csv(load_sql, pg_class, pg_jdbc_path,\\\n pg_url, pg_user, pg_pw)\n"})}),"\n",(0,a.jsx)(t.p,{children:"(2018-03-30)"})]})}function h(e={}){const{wrapper:t}={...(0,s.R)(),...e.components};return t?(0,a.jsx)(t,{...e,children:(0,a.jsx)(d,{...e})}):d(e)}},28453:(e,t,n)=>{n.d(t,{R:()=>r,x:()=>l});var a=n(96540);const s={},o=a.createContext(s);function r(e){const t=a.useContext(o);return a.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function l(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:r(e.components),a.createElement(o.Provider,{value:t},e.children)}}}]);