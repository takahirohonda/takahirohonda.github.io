"use strict";(self.webpackChunkmydatahack_blog_site=self.webpackChunkmydatahack_blog_site||[]).push([[3148],{1386:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>i,default:()=>u,frontMatter:()=>s,metadata:()=>a,toc:()=>l});var r=n(74848),o=n(28453);const s={sidebar_position:5},i="Creating DbItem with Item ID \u2013 Sitecore FakeDb",a={id:"Web/Sitecore/create-dbitem-sitecore-fakedb",title:"Creating DbItem with Item ID \u2013 Sitecore FakeDb",description:"With FakeDb, we can mock content items. Each tree node can be created by the DbItem class. DbItem class has three constructors as below.",source:"@site/docs/Web/Sitecore/5.create-dbitem-sitecore-fakedb.md",sourceDirName:"Web/Sitecore",slug:"/Web/Sitecore/create-dbitem-sitecore-fakedb",permalink:"/docs/Web/Sitecore/create-dbitem-sitecore-fakedb",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:5,frontMatter:{sidebar_position:5},sidebar:"tutorialSidebar",previous:{title:"sitecore-9-cert-quiz",permalink:"/docs/Web/Sitecore/sitecore-9-cert-quiz"},next:{title:"How to Troubleshoot FakeDb Errors \u2013 Sitecore 8.2",permalink:"/docs/Web/Sitecore/troubleshoot-fake-db-error"}},c={},l=[];function d(e){const t={code:"code",h1:"h1",p:"p",pre:"pre",...(0,o.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(t.h1,{id:"creating-dbitem-with-item-id--sitecore-fakedb",children:"Creating DbItem with Item ID \u2013 Sitecore FakeDb"}),"\n",(0,r.jsx)(t.p,{children:"With FakeDb, we can mock content items. Each tree node can be created by the DbItem class. DbItem class has three constructors as below."}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-csharp",children:"public DbItem(string name);\npublic DbItem(string name, ID id);\npublic DbItem(string name, ID id, ID templateId);\n"})}),"\n",(0,r.jsx)(t.p,{children:"When your code is calling GetItem with the Sitecore.Data.ID object, you want to mock the content with ID."}),"\n",(0,r.jsx)(t.p,{children:"The official documentation gives us a lot of examples. But, it seems like it only has the example with DbItem created by the first constructor. The motivation for writing this post is to give you the example of instantiating DbItem with other constructors, which is missing from the documentation (at least at the moment)."}),"\n",(0,r.jsx)(t.p,{children:"I also have a perfect example for using the second constructor. Let\u2019s write unit tests from the previous post that uses GetItem with ID (see Using Data Source in Controller Renderings)."}),"\n",(0,r.jsx)(t.p,{children:"Just to recap, here is the repository method that uses GetItem with ID."}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-csharp",children:'namespace SitecoreDev.Feature.Design.Repository\n{\n    public class FrontEndTestRepository : IFrontEndTestRepository\n    {\n        private readonly Database _database;\n        private readonly FrontEndTest _frontEndTestModel;\n\n        public FrontEndTestRepository()\n        {\n            _database = Context.Database;\n            _frontEndTestModel = new FrontEndTest();\n        }\n\n        public FrontEndTest GetFrontEndTestModel(string dataSourceId)\n        {\n            try\n            {\n                var item = _database.GetItem(new Sitecore.Data.ID(dataSourceId));\n                _frontEndTestModel.Title = item["Title"];\n                _frontEndTestModel.Script = item["Script"];\n            }\n            catch (Exception ex)\n            {\n                Sitecore.Diagnostics.Log.Error("Error in GetFrontEndModel()", ex, this);\n            }\n\n            return _frontEndTestModel;\n        }\n    }\n}\n'})}),"\n",(0,r.jsx)(t.p,{children:"Let\u2019s mock Sitecore Item with FakeDb. The key here is to instantiate DbItem with ID as the second argument. Then, the rest is straight forward."}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-csharp",children:'using FluentAssertions;\nusing Sitecore.Data;\nusing Sitecore.FakeDb;\nusing SitecoreDev.Feature.Design.Models;\nusing SitecoreDev.Feature.Design.Repository;\nusing Xunit;\n\nnamespace SitecoreDev.Feature.Design.Tests.RepositoryTests\n{\n    public class FrontEndTestRepositoryTests\n    {\n        [Fact]\n        public void GetFrontEndTestModel_Should_Return_Correct_Model()\n        {\n            var itemIdString = "{8E5F9E9C-0584-4788-985F-9484D852DE02}";\n            var expectedModel = new FrontEndTest()\n            {\n                Title = "Hello",\n                Script = "console.log(\'hey\');"\n            };\n\n            using (Db db = new Db("web")\n            {\n                new DbItem("Fake", new ID(itemIdString))\n                {\n                    { "Title", "Hello"},\n                    {"Script", "console.log(\'hey\');" }\n                }\n            })\n            {\n                var repository = new FrontEndTestRepository();\n                var actualModel = repository.GetFrontEndTestModel(itemIdString);\n                actualModel.Should().BeEquivalentTo(expectedModel);\n            }\n        }\n    }\n}\n'})}),"\n",(0,r.jsx)(t.p,{children:"If you are having trouble with running FakeDb, I recommend you to read this one, How to Troubleshoot FakeDb Error. Setting up FakeDb can be tricky. But, the post will explain everything that you need to successfully use FakeDb in your test project."}),"\n",(0,r.jsx)(t.p,{children:"I have one final though about FakeDb. Using it for mocking content items like this one should be the last resort. The better design is to abstract out the logic to call Sitecore API. For example, you can use Glass.Mapper to abstract the data retrieval from the items and you will not even need to use FakeDb. Another quick way is to extract GetItem method into a helper class and inject it to the class. In this way, we can simply mock the return data from the abstracted method."}),"\n",(0,r.jsx)(t.p,{children:"That\u2019s it. This is the end of this topic."}),"\n",(0,r.jsx)(t.p,{children:"There are more\u2026"}),"\n",(0,r.jsx)(t.p,{children:"Just for fun, let\u2019s write the test for the controller that uses this repository from the previous blog. This test is a variation of the one we have here. Except the rendering parameter bit, it is pretty much the same."}),"\n",(0,r.jsx)(t.p,{children:"Here is the controller."}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-csharp",children:'using System.Web.Mvc;\nusing Sitecore.Mvc.Presentation;\nusing Sitecore.Mvc.Controllers;\nusing SitecoreDev.Feature.Design.Repository;\nusing SitecoreDev.Feature.Design.Models;\n\nnamespace SitecoreDev.Feature.Design.Controllers\n{\n    public class FrontEndTestController : Controller\n    {\n        private IFrontEndTestRepository frontEndTestRepository;\n\n        public FrontEndTestController (): this(new FrontEndTestRepository())\n        {\n        }\n        public FrontEndTestController(IFrontEndTestRepository frontEndTestRepository)\n        {\n            this.frontEndTestRepository = frontEndTestRepository;\n        }\n        public ViewResult GetFrontEndTestView()\n        {\n            var dataSourceId = RenderingContext.Current?.Rendering?.DataSource;\n            var viewModel =\n                dataSourceId != null\n                ? frontEndTestRepository.GetFrontEndTestModel(dataSourceId)\n                : new FrontEndTest();\n\n            return View("FrontEndTest", viewModel);\n        }\n    }\n}\n'})}),"\n",(0,r.jsx)(t.p,{children:"Here is the test."}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-csharp",children:'using FluentAssertions;\nusing NSubstitute;\nusing Sitecore.Mvc.Presentation;\nusing SitecoreDev.Feature.Design.Controllers;\nusing SitecoreDev.Feature.Design.Models;\nusing SitecoreDev.Feature.Design.Repository;\nusing System;\nusing System.Collections.Generic;\nusing System.Web.Mvc;\nusing Xunit;\n\nnamespace SitecoreDev.Feature.Design.Tests.ControllerTests\n{\n    public class FrontEndTestControllerTest\n    {\n        private readonly IFrontEndTestRepository frontEndTestRepository;\n\n        public FrontEndTestControllerTest()\n        {\n            this.frontEndTestRepository = Substitute.For<IFrontEndTestRepository>();\n        }\n\n        [Fact]\n        public void GetFrontEndTestView_Should_Return_Correct_View_And_Model()\n        {\n            // Arrange\n            // (1) Set rendering with DataSourceId\n            var rendering = new Rendering();\n            var itemIdString = "{8E5F9E9C-0584-4788-985F-9484D852DE02}";\n            rendering.DataSource = itemIdString;\n\n            // (2) Mock GetFrontEndTestModel() method\n            var expectedModel = new FrontEndTest()\n            {\n                Title = "Hello",\n                Script = "console.log(\'hey\');"\n            };\n            frontEndTestRepository\n                .GetFrontEndTestModel(itemIdString)\n                .Returns(expectedModel);\n\n            // (3) Create rendering context\n            using (RenderingContext.EnterContext(rendering))\n            {\n                var controller = new FrontEndTestController(this.frontEndTestRepository);\n\n                // Act\n                ViewResult result = controller.GetFrontEndTestView() as ViewResult;\n                var actualModel = result.ViewData.Model as FrontEndTest;\n\n                // Assert\n                result.Should().NotBeNull();\n                result.ViewName.Should().Be("FrontEndTest");\n                actualModel.Should().BeEquivalentTo(expectedModel);\n            }\n        }\n\n        [Fact]\n        public void Null_DataSource_Should_Return_Correct_View_And_No_Model()\n        {\n            // Arrange\n            var rendering = new Rendering();\n            using (RenderingContext.EnterContext(rendering))\n            {\n                var controller = new FrontEndTestController(this.frontEndTestRepository);\n\n                // Act\n                ViewResult result = controller.GetFrontEndTestView() as ViewResult;\n                var actualModel = result.ViewData.Model as FrontEndTest;\n\n                // Assert\n                result.Should().NotBeNull();\n                result.ViewName.Should().Be("FrontEndTest");\n                actualModel.Should().BeNull();\n            }\n        }\n    }\n}\n'})}),"\n",(0,r.jsx)(t.p,{children:"(2019-08-18)"})]})}function u(e={}){const{wrapper:t}={...(0,o.R)(),...e.components};return t?(0,r.jsx)(t,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}},28453:(e,t,n)=>{n.d(t,{R:()=>i,x:()=>a});var r=n(96540);const o={},s=r.createContext(o);function i(e){const t=r.useContext(s);return r.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function a(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:i(e.components),r.createElement(s.Provider,{value:t},e.children)}}}]);