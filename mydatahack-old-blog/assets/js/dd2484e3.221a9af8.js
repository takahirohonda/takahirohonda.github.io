"use strict";(self.webpackChunkmydatahack_blog_site=self.webpackChunkmydatahack_blog_site||[]).push([[5029],{82885:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>r,default:()=>d,frontMatter:()=>o,metadata:()=>s,toc:()=>c});var a=t(74848),i=t(28453);const o={sidebar_position:10},r="Understanding the difference between the ?? (nullish coalescing) operator and the || (logical OR) operator in JavaScript",s={id:"chat-gpt-generated/nullish-coalescing-logical-or",title:"Understanding the difference between the ?? (nullish coalescing) operator and the || (logical OR) operator in JavaScript",description:"Introduction:",source:"@site/docs/chat-gpt-generated/10.nullish-coalescing-logical-or.md",sourceDirName:"chat-gpt-generated",slug:"/chat-gpt-generated/nullish-coalescing-logical-or",permalink:"/mydatahack-old-blog/mydatahack-old-blog/chat-gpt-generated/nullish-coalescing-logical-or",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:10,frontMatter:{sidebar_position:10},sidebar:"tutorialSidebar",previous:{title:"Exploring the Vast Universe of Star Trek",permalink:"/mydatahack-old-blog/mydatahack-old-blog/chat-gpt-generated/star-trek"},next:{title:"The US Debt Ceiling and the Likelihood of Default: Understanding the Implications",permalink:"/mydatahack-old-blog/mydatahack-old-blog/chat-gpt-generated/us-debt-ceiling"}},l={},c=[{value:"Introduction:",id:"introduction",level:2},{value:"Conclusion:",id:"conclusion",level:2}];function h(e){const n={h1:"h1",h2:"h2",li:"li",ol:"ol",p:"p",...(0,i.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.h1,{id:"understanding-the-difference-between-the--nullish-coalescing-operator-and-the--logical-or-operator-in-javascript",children:"Understanding the difference between the ?? (nullish coalescing) operator and the || (logical OR) operator in JavaScript"}),"\n",(0,a.jsx)(n.h2,{id:"introduction",children:"Introduction:"}),"\n",(0,a.jsx)(n.p,{children:"In JavaScript, there are multiple ways to handle default or fallback values when working with variables or expressions. Two commonly used operators for this purpose are the ?? (nullish coalescing) operator and the || (logical OR) operator. Although they may seem similar at first glance, there are key differences between these operators. This blog post aims to explore and clarify the distinctions between the ?? operator and the || operator, including their handling of falsy values."}),"\n",(0,a.jsxs)(n.ol,{children:["\n",(0,a.jsx)(n.li,{children:"The ?? Operator:"}),"\n"]}),"\n",(0,a.jsx)(n.p,{children:"The ?? operator, introduced in ECMAScript 2020, is known as the nullish coalescing operator. It provides a concise way to assign a fallback value when the given expression evaluates to null or undefined. Here are some important points to understand about the ?? operator:"}),"\n",(0,a.jsx)(n.p,{children:"It checks for nullish values specifically (null or undefined), unlike the || operator which considers falsy values (false, 0, empty strings, etc.) as well.\nIt evaluates the expression on its left-hand side and returns it if it is not nullish; otherwise, it returns the value on the right-hand side.\nExample usage: const result = a ?? b;"}),"\n",(0,a.jsxs)(n.ol,{start:"2",children:["\n",(0,a.jsx)(n.li,{children:"The || Operator:"}),"\n"]}),"\n",(0,a.jsx)(n.p,{children:"The || operator, also known as the logical OR operator, has been present in JavaScript for a long time. While it can be used for default value assignment, its behaviour is slightly different from the ?? operator:"}),"\n",(0,a.jsx)(n.p,{children:"It checks for falsy values (false, 0, empty strings, etc.) in addition to null and undefined.\nIt evaluates the expression on its left-hand side and returns it if it is truthy; otherwise, it returns the value on the right-hand side.\nExample usage: const result = a || b;"}),"\n",(0,a.jsxs)(n.ol,{start:"3",children:["\n",(0,a.jsx)(n.li,{children:"Falsy Values and Use Cases:"}),"\n"]}),"\n",(0,a.jsx)(n.p,{children:"Understanding falsy values is crucial for utilizing the ?? operator and the || operator effectively:"}),"\n",(0,a.jsx)(n.p,{children:"Falsy values in JavaScript include false, 0, null, undefined, NaN, and an empty string (\u201c\u201d).\nThe ?? operator is useful when you specifically want to handle nullish values (null or undefined) and ignore other falsy values.\nThe || operator is more inclusive and handles both nullish values and falsy values.\nBe cautious when using the || operator, as it might unintentionally return a fallback value for values like 0 or an empty string, which could lead to unexpected behaviours."}),"\n",(0,a.jsx)(n.h2,{id:"conclusion",children:"Conclusion:"}),"\n",(0,a.jsx)(n.p,{children:"By understanding the difference between the ?? operator and the || operator, including their handling of falsy values, you can choose the appropriate operator for your specific use case and avoid unexpected results in your code. The ?? operator is useful when you want to handle nullish values specifically, while the || operator handles both nullish and falsy values. Remember to consider the compatibility of these operators with different JavaScript versions or environments. By leveraging the ?? and || operators effectively, you can write more concise and robust code, handling default values in a way that aligns with your specific requirements while considering falsy values in JavaScript."}),"\n",(0,a.jsx)(n.p,{children:"Remember: It\u2019s important to check the browser compatibility before using new language features."}),"\n",(0,a.jsx)(n.p,{children:"(2023-06-07)"})]})}function d(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(h,{...e})}):h(e)}},28453:(e,n,t)=>{t.d(n,{R:()=>r,x:()=>s});var a=t(96540);const i={},o=a.createContext(i);function r(e){const n=a.useContext(o);return a.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function s(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:r(e.components),a.createElement(o.Provider,{value:n},e.children)}}}]);