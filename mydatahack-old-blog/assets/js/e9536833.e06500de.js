"use strict";(self.webpackChunkmydatahack_blog_site=self.webpackChunkmydatahack_blog_site||[]).push([[7473],{30985:(t,e,n)=>{n.r(e),n.d(e,{assets:()=>r,contentTitle:()=>i,default:()=>h,frontMatter:()=>a,metadata:()=>l,toc:()=>c});var o=n(74848),s=n(28453);const a={sidebar_position:14},i="How to Bulk Load Data into MySQL with Python",l={id:"data-ingestion/mysql-python",title:"How to Bulk Load Data into MySQL with Python",description:"As in any other relational databases, the fastest way to load data into MySQL is to upload a flat file into a table. To do this, MySQL has a LOAD DATA INFILE function. We can use Python to execute this command. To connect to MySQL and execute SQL statements with Python, we will use the pymysql module.",source:"@site/docs/data-ingestion/14.mysql-python.md",sourceDirName:"data-ingestion",slug:"/data-ingestion/mysql-python",permalink:"/mydatahack-old-blog/docs/data-ingestion/mysql-python",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:14,frontMatter:{sidebar_position:14},sidebar:"tutorialSidebar",previous:{title:"How to Bulk Load Data with ODBC and Python",permalink:"/mydatahack-old-blog/docs/data-ingestion/odbc-python"},next:{title:"How to Bulk Load Data into PostgreSQL with Python",permalink:"/mydatahack-old-blog/docs/data-ingestion/pg-python"}},r={},c=[];function d(t){const e={code:"code",h1:"h1",p:"p",pre:"pre",...(0,s.R)(),...t.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(e.h1,{id:"how-to-bulk-load-data-into-mysql-with-python",children:"How to Bulk Load Data into MySQL with Python"}),"\n",(0,o.jsx)(e.p,{children:"As in any other relational databases, the fastest way to load data into MySQL is to upload a flat file into a table. To do this, MySQL has a LOAD DATA INFILE function. We can use Python to execute this command. To connect to MySQL and execute SQL statements with Python, we will use the pymysql module."}),"\n",(0,o.jsx)(e.p,{children:"As in the previous post with PostgresSQL, we will first export a table into a csv file and then look at how we can load a csv file to a table."}),"\n",(0,o.jsx)(e.p,{children:"First of all, let\u2019s import all the modules required for this exercise. The code here works for both Python 2.7 and 3."}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-python",children:"import pymysql\nimport pandas as pd\nimport sys\n"})}),"\n",(0,o.jsx)(e.p,{children:"Exporting MySQL table into a CSV file"}),"\n",(0,o.jsx)(e.p,{children:"First of all, let\u2019s export a table into CSV file. We are using the Pandas module to convert SQL results into Pandas data frame and write it to a csv file."}),"\n",(0,o.jsx)(e.p,{children:"The function takes a select query, output file path and connection details. To export an entire table, you can use select * on the target table."}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-python",children:"def mysql_to_csv(sql, file_path, host, user, password):\n    '''\n    The function creates a csv file from the result of SQL\n    in MySQL database.\n    '''\n    try:\n        con = pymysql.connect(host=host,\n                                user=user,\n                                password=password)\n        print('Connected to DB: {}'.format(host))\n        # Read table with pandas and write to csv\n        df = pd.read_sql(sql, con)\n        df.to_csv(file_path, encoding='utf-8', header = True,\\\n         doublequote = True, sep=',', index=False)\n        print('File, {}, has been created successfully'.format(file_path))\n        con.close()\n\n    except Exception as e:\n        print('Error: {}'.format(str(e)))\n        sys.exit(1)\n\n# Execution Example\nsql = 'Select * From world.city'\nfile_path = '/tmp/city.csv'\nhost = 'host url'\nuser = 'username'\npassword = 'password'\nmysql_to_csv(sql, file_path, host, user, password)\n"})}),"\n",(0,o.jsx)(e.p,{children:"Importing CSV file to MySQL table"}),"\n",(0,o.jsx)(e.p,{children:"Make sure to have autocommit turned on. To upload files, you need to set the local_infile parameter to 1. The function takes a load data infile statement and connection details."}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-python",children:"def csv_to_mysql(load_sql, host, user, password):\n    '''\n    This function load a csv file to MySQL table according to\n    the load_sql statement.\n    '''\n    try:\n        con = pymysql.connect(host=host,\n                                user=user,\n                                password=password,\n                                autocommit=True,\n                                local_infile=1)\n        print('Connected to DB: {}'.format(host))\n        # Create cursor and execute Load SQL\n        cursor = con.cursor()\n        cursor.execute(load_sql)\n        print('Succuessfully loaded the table from csv.')\n        con.close()\n\n    except Exception as e:\n        print('Error: {}'.format(str(e)))\n        sys.exit(1)\n\n# Execution Example\nload_sql = \"LOAD DATA LOCAL INFILE '/tmp/city.csv' INTO TABLE usermanaged.city\\\n FIELDS TERMINATED BY ',' ENCLOSED BY '\"' IGNORE 1 LINES;\"\nhost = 'host url'\nuser = 'username'\npassword = 'password'\ncsv_to_mysql(load_sql, host, user, password)\n"})}),"\n",(0,o.jsx)(e.p,{children:"(2018-03-30)"})]})}function h(t={}){const{wrapper:e}={...(0,s.R)(),...t.components};return e?(0,o.jsx)(e,{...t,children:(0,o.jsx)(d,{...t})}):d(t)}},28453:(t,e,n)=>{n.d(e,{R:()=>i,x:()=>l});var o=n(96540);const s={},a=o.createContext(s);function i(t){const e=o.useContext(a);return o.useMemo((function(){return"function"==typeof t?t(e):{...e,...t}}),[e,t])}function l(t){let e;return e=t.disableParentContext?"function"==typeof t.components?t.components(s):t.components||s:i(t.components),o.createElement(a.Provider,{value:e},t.children)}}}]);