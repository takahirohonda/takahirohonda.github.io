"use strict";(self.webpackChunkdocusaurus_portfolio_site=self.webpackChunkdocusaurus_portfolio_site||[]).push([[4845],{5677:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>l,contentTitle:()=>a,default:()=>h,frontMatter:()=>t,metadata:()=>o,toc:()=>c});var s=r(5893),i=r(1151);const t={title:"Frontend Related",sidebar_position:1e3},a=void 0,o={id:"current/current-fed-needs-to-know/index",title:"Frontend Related",description:"1. Difference between Incoming and Current change when we merge or rebase.",source:"@site/my-learning-notes/current/100-current-fed-needs-to-know/index.md",sourceDirName:"current/100-current-fed-needs-to-know",slug:"/current/current-fed-needs-to-know/",permalink:"/my-learning-notes/current/current-fed-needs-to-know/",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:1e3,frontMatter:{title:"Frontend Related",sidebar_position:1e3},sidebar:"firstDocSidebar",previous:{title:"Miscellaneous tech stuff",permalink:"/my-learning-notes/current/programming-need-to-know/"},next:{title:"My Learning notes",permalink:"/my-learning-notes/intro"}},l={},c=[{value:"1. Difference between Incoming and Current change when we merge or rebase.",id:"1-difference-between-incoming-and-current-change-when-we-merge-or-rebase",level:3},{value:"2. Falsy values in Javascript",id:"2-falsy-values-in-javascript",level:3},{value:"3. Destructuring",id:"3-destructuring",level:3},{value:"4. Media Queries",id:"4-media-queries",level:3},{value:"5. Prefer using nullish coalescing operator (??) instead of a logical or (||)",id:"5-prefer-using-nullish-coalescing-operator--instead-of-a-logical-or-",level:3},{value:"6. Double Negation (!!) and Boolean()",id:"6-double-negation--and-boolean",level:3}];function d(e){const n={code:"code",em:"em",h3:"h3",p:"p",pre:"pre",...(0,i.a)(),...e.components},{Details:r}=n;return r||function(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("Details",!0),(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.h3,{id:"1-difference-between-incoming-and-current-change-when-we-merge-or-rebase",children:"1. Difference between Incoming and Current change when we merge or rebase."}),"\n",(0,s.jsxs)(r,{children:[(0,s.jsx)("summary",{children:(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"git pull origin master"})," (merge)"]})}),(0,s.jsx)(n.p,{children:(0,s.jsx)(n.em,{children:"Current changes"})}),(0,s.jsx)(n.p,{children:"Changes on your current feature branch."}),(0,s.jsx)(n.p,{children:(0,s.jsx)(n.em,{children:"Incoming changes"})}),(0,s.jsx)(n.p,{children:"Changes you are pulling from i.e the master branch"})]}),"\n",(0,s.jsxs)(r,{children:[(0,s.jsx)("summary",{children:(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"git pull origin master --rebase"})," (rebase)"]})}),(0,s.jsx)(n.p,{children:"During rebase your feature branch changes are applied on top of the commits that\nare already there in master branch."}),(0,s.jsx)(n.p,{children:(0,s.jsx)(n.em,{children:"Current changes"})}),(0,s.jsx)(n.p,{children:"Changes on the master branch."}),(0,s.jsx)(n.p,{children:(0,s.jsx)(n.em,{children:"Incoming changes"})}),(0,s.jsx)(n.p,{children:"Changes on the feature branch."})]}),"\n",(0,s.jsx)(n.h3,{id:"2-falsy-values-in-javascript",children:"2. Falsy values in Javascript"}),"\n",(0,s.jsxs)(r,{children:[(0,s.jsx)("summary",{children:(0,s.jsx)(n.p,{children:"How many falsey values are there in JavaScript? List them all."})}),(0,s.jsxs)(n.p,{children:["There are 6 falsey values in JavaScript: ",(0,s.jsx)(n.code,{children:"undefined"}),", ",(0,s.jsx)(n.code,{children:"null"}),", ",(0,s.jsx)(n.code,{children:"NaN"}),", ",(0,s.jsx)(n.code,{children:"0"})," and ",(0,s.jsx)(n.code,{children:'""'})," (empty string) and ",(0,s.jsx)(n.code,{children:"false"}),"."]})]}),"\n",(0,s.jsx)(n.h3,{id:"3-destructuring",children:"3. Destructuring"}),"\n",(0,s.jsxs)(r,{children:[(0,s.jsxs)("summary",{children:[(0,s.jsx)(n.p,{children:"What is the console output?"}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-JavaScript",children:"const context = { a: 1, b: 2, c: 3 };\nconst { a, ...contextObj } = context;\nconsole.log(contextObj);\n"})})]}),(0,s.jsxs)(n.p,{children:["We can destucture an object with selected values and return the rest with a named object.\n",(0,s.jsx)(n.code,{children:"contextObj"})," will be ",(0,s.jsx)(n.code,{children:"{ b: 2, c: 3 }"})]})]}),"\n",(0,s.jsx)(n.h3,{id:"4-media-queries",children:"4. Media Queries"}),"\n",(0,s.jsxs)(r,{children:[(0,s.jsxs)("summary",{children:[(0,s.jsx)(n.p,{children:"What does these media queries mean?"}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-css",children:"@media only screen and (max-width: 1024px) { ... }\n\n@media only screen and (min-width: 1024px) { ... }\n\n@media only screen and (max-width: 1024px) and (min-width: 800px) { ... }\n"})})]}),(0,s.jsx)(n.p,{children:"max-width: less than or equal to 1024px then do ..."}),(0,s.jsx)("br",{}),(0,s.jsx)(n.p,{children:"min-width: greater than or equal to 1024px, then do ..."}),(0,s.jsx)("br",{}),(0,s.jsx)(n.p,{children:"combined: between 800 and 1024px"}),(0,s.jsx)("br",{})]}),"\n",(0,s.jsx)(n.h3,{id:"5-prefer-using-nullish-coalescing-operator--instead-of-a-logical-or-",children:"5. Prefer using nullish coalescing operator (??) instead of a logical or (||)"}),"\n",(0,s.jsxs)(r,{children:[(0,s.jsx)("summary",{children:(0,s.jsx)(n.p,{children:"What is '??'? Why is it prefereable to '||'?"})}),(0,s.jsx)(n.p,{children:"The nullish coalescing operator ?? allows providing a default value when dealing with null or undefined. It only coalesces when the original value is null or undefined. Therefore, it is safer and shorter than relying upon chaining logical || expressions or testing against null or undefined explicitly."}),(0,s.jsx)("br",{}),(0,s.jsx)(n.p,{children:"This rule reports when disjunctions (||) and conditionals (?) can be safely replaced with coalescing (??)."}),(0,s.jsx)("br",{}),(0,s.jsx)(n.p,{children:"The TSConfig needs to set strictNullChecks to true for the rule to work properly."}),(0,s.jsx)("br",{})]}),"\n",(0,s.jsx)(n.h3,{id:"6-double-negation--and-boolean",children:"6. Double Negation (!!) and Boolean()"}),"\n",(0,s.jsxs)(r,{children:[(0,s.jsx)("summary",{children:(0,s.jsxs)(n.p,{children:["What's the difference btween ",(0,s.jsx)(n.code,{children:"!!"})," and ",(0,s.jsx)(n.code,{children:"Boolean()"}),"? What do they do?"]})}),(0,s.jsx)(n.p,{children:"They are functionally equivalent. Both converts a value to a boolean based on its\ntruthiness."}),(0,s.jsx)("br",{}),(0,s.jsx)(n.p,{children:'All falsy values (null, undefined, 0, NaN, false, and "") will be converted to\nfalse. All truthy values to true.'}),(0,s.jsx)("br",{})]})]})}function h(e={}){const{wrapper:n}={...(0,i.a)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}},1151:(e,n,r)=>{r.d(n,{Z:()=>o,a:()=>a});var s=r(7294);const i={},t=s.createContext(i);function a(e){const n=s.useContext(t);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:a(e.components),s.createElement(t.Provider,{value:n},e.children)}}}]);