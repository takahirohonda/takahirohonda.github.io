"use strict";(self.webpackChunkgatsby_portfolio_site_example=self.webpackChunkgatsby_portfolio_site_example||[]).push([[580],{2216:function(e,n,a){a.r(n);var t=a(4552),s=a(1504),l=a(3132);const c=e=>{let{children:n,pageContext:a}=e;return s.createElement(l.K,{pageContext:a},n)};function r(e){const n=Object.assign({h2:"h2",ol:"ol",li:"li",div:"div",p:"p",em:"em"},(0,t.MN)(),e.components);return s.createElement(s.Fragment,null,s.createElement(n.h2,null,"1. Difference between Incoming and Current change when we merge or rebase."),"\n",s.createElement("details",null,s.createElement("summary",null,s.createElement(n.ol,null,"\n",s.createElement(n.li,null,s.createElement(n.div,{dangerouslySetInnerHTML:{__html:'<code class="language-text">git pull origin master</code>'}})),"\n")),s.createElement(n.p,null,s.createElement(n.em,null,"Current changes")),s.createElement(n.p,null,"Changes on your current feature branch."),s.createElement(n.p,null,s.createElement(n.em,null,"Incoming changes")),s.createElement(n.p,null,"Changes you are pulling from i.e the master branch")),"\n",s.createElement("details",null,s.createElement(n.p,null,s.createElement("summary",null,"2. ",s.createElement(n.div,{dangerouslySetInnerHTML:{__html:'<code class="language-text">git pull origin master --rebase</code>'}})),"\nDuring rebase your feature branch changes are applied on top of the commits that\nare already there in master branch."),s.createElement(n.p,null,s.createElement(n.em,null,"Current changes")),s.createElement(n.p,null,"Changes on the master branch."),s.createElement(n.p,null,s.createElement(n.em,null,"Incoming changes")),s.createElement(n.p,null,"Changes on the feature branch.")),"\n",s.createElement(n.h2,null,"2. Falsy values in Javascript"),"\n",s.createElement("details",null,s.createElement("summary",null,s.createElement(n.p,null,"How many falsey values are there in JavaScript? List them all.")),s.createElement(n.p,null,"There are 6 falsey values in JavaScript: ",s.createElement(n.div,{dangerouslySetInnerHTML:{__html:'<code class="language-text">undefined</code>'}}),", ",s.createElement(n.div,{dangerouslySetInnerHTML:{__html:'<code class="language-text">null</code>'}}),", ",s.createElement(n.div,{dangerouslySetInnerHTML:{__html:'<code class="language-text">NaN</code>'}}),", ",s.createElement(n.div,{dangerouslySetInnerHTML:{__html:'<code class="language-text">0</code>'}})," and ",s.createElement(n.div,{dangerouslySetInnerHTML:{__html:'<code class="language-text">""</code>'}})," (empty string) and ",s.createElement(n.div,{dangerouslySetInnerHTML:{__html:'<code class="language-text">false</code>'}}),".")),"\n",s.createElement(n.h2,null,"3. Destructuring"),"\n",s.createElement("details",null,s.createElement("summary",null,s.createElement(n.p,null,"What is the console output?"),s.createElement(n.div,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="javascript"><pre class="language-javascript"><code class="language-javascript"><span class="token keyword">const</span> context <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">a</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token literal-property property">b</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token literal-property property">c</span><span class="token operator">:</span> <span class="token number">3</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> <span class="token punctuation">{</span> a<span class="token punctuation">,</span> <span class="token operator">...</span>contextObj <span class="token punctuation">}</span> <span class="token operator">=</span> context<span class="token punctuation">;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>contextObj<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></div>'}})),s.createElement(n.p,null,"We can destucture an object with selected values and return the rest with a named object.\n",s.createElement(n.div,{dangerouslySetInnerHTML:{__html:'<code class="language-text">contextObj</code>'}})," will be ",s.createElement(n.div,{dangerouslySetInnerHTML:{__html:'<code class="language-text">{ b: 2, c: 3 }</code>'}}))),"\n",s.createElement(n.h2,null,"4. Media Queries"),"\n",s.createElement("details",null,s.createElement("summary",null,s.createElement(n.p,null,"What does these media queries mean?"),s.createElement(n.div,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="css"><pre class="language-css"><code class="language-css"><span class="token atrule"><span class="token rule">@media</span> <span class="token keyword">only</span> screen <span class="token keyword">and</span> <span class="token punctuation">(</span><span class="token property">max-width</span><span class="token punctuation">:</span> 1024px<span class="token punctuation">)</span></span> <span class="token punctuation">{</span> ... <span class="token punctuation">}</span>\n\n<span class="token atrule"><span class="token rule">@media</span> <span class="token keyword">only</span> screen <span class="token keyword">and</span> <span class="token punctuation">(</span><span class="token property">min-width</span><span class="token punctuation">:</span> 1024px<span class="token punctuation">)</span></span> <span class="token punctuation">{</span> ... <span class="token punctuation">}</span>\n\n<span class="token atrule"><span class="token rule">@media</span> <span class="token keyword">only</span> screen <span class="token keyword">and</span> <span class="token punctuation">(</span><span class="token property">max-width</span><span class="token punctuation">:</span> 1024px<span class="token punctuation">)</span> <span class="token keyword">and</span> <span class="token punctuation">(</span><span class="token property">min-width</span><span class="token punctuation">:</span> 800px<span class="token punctuation">)</span></span> <span class="token punctuation">{</span> ... <span class="token punctuation">}</span></code></pre></div>'}})),s.createElement(n.p,null,"max-width: less than or equal to 1024px then do ..."),s.createElement("br"),s.createElement(n.p,null,"min-width: greater than or equal to 1024px, then do ..."),s.createElement("br"),s.createElement(n.p,null,"combined: between 800 and 1024px"),s.createElement("br")),"\n",s.createElement(n.h2,null,"5. Prefer using nullish coalescing operator (??) instead of a logical or (||)"),"\n",s.createElement("details",null,s.createElement("summary",null,s.createElement(n.p,null,"What is '??'? Why is it prefereable to '||'?")),s.createElement(n.p,null,"The nullish coalescing operator ?? allows providing a default value when dealing with null or undefined. It only coalesces when the original value is null or undefined. Therefore, it is safer and shorter than relying upon chaining logical || expressions or testing against null or undefined explicitly."),s.createElement("br"),s.createElement(n.p,null,"This rule reports when disjunctions (||) and conditionals (?) can be safely replaced with coalescing (??)."),s.createElement("br"),s.createElement(n.p,null,"The TSConfig needs to set strictNullChecks to true for the rule to work properly."),s.createElement("br")),"\n",s.createElement(n.h2,null,"6. Double Negation (!!) and Boolean()"),"\n",s.createElement("details",null,s.createElement("summary",null,s.createElement(n.p,null,"What's the difference btween ",s.createElement(n.div,{dangerouslySetInnerHTML:{__html:'<code class="language-text">!!</code>'}})," and ",s.createElement(n.div,{dangerouslySetInnerHTML:{__html:'<code class="language-text">Boolean()</code>'}}),"? What do they do?")),s.createElement(n.p,null,"They are functionally equivalent. Both converts a value to a boolean based on its\ntruthiness."),s.createElement("br"),s.createElement(n.p,null,'All falsy values (null, undefined, 0, NaN, false, and "") will be converted to\nfalse. All truthy values to true.'),s.createElement("br")))}n.default=function(e){return void 0===e&&(e={}),s.createElement(c,e,s.createElement(r,e))}},3132:function(e,n,a){a.d(n,{K:function(){return l}});var t=a(728),s=a(7624);const l=e=>{let{children:n,pageContext:a}=e;const{title:l,description:c}=a.frontmatter;return(0,s.jsx)(t._,{siteTitle:l,description:c,children:n})}},4552:function(e,n,a){a.d(n,{MN:function(){return l}});var t=a(1504);const s=t.createContext({});function l(e){const n=t.useContext(s);return t.useMemo((()=>"function"==typeof e?e(n):{...n,...e}),[n,e])}}}]);
//# sourceMappingURL=component---src-posts-learning-need-to-know-mdx-97212593ef3e79127295.js.map