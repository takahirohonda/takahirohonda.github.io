{"version":3,"file":"component---src-posts-learning-crypto-mdx-e91f25919bc934c457d8.js","mappings":"kLAGA,SAASA,EAAkBC,GACzB,MAAMC,EAAcC,OAAOC,OAAO,CAChCC,GAAI,KACJC,GAAI,KACJC,GAAI,KACJC,EAAG,IACHC,EAAG,IACHC,OAAQ,WACPC,EAAAA,EAAAA,MAAsBV,EAAMW,YAC/B,OAAOC,EAAAA,cAAoBA,EAAAA,SAAgB,KAAMA,EAAAA,cAAoBX,EAAYG,GAAI,KAAM,sCAAuC,KAAMQ,EAAAA,cAAoBX,EAAYI,GAAI,KAAM,KAAMO,EAAAA,cAAoBX,EAAYK,GAAI,KAAMM,EAAAA,cAAoBX,EAAYM,EAAG,CACnQM,KAAM,+CACL,kDAAmD,MAAO,KAAMD,EAAAA,cAAoBX,EAAYO,EAAG,KAAM,gGAAiG,KAAMI,EAAAA,cAAoBX,EAAYO,EAAG,KAAMI,EAAAA,cAAoBX,EAAYQ,OAAQ,KAAM,2BAA4B,2EAA4E,KAAMG,EAAAA,cAAoBX,EAAYO,EAAG,KAAMI,EAAAA,cAAoBX,EAAYQ,OAAQ,KAAM,WAAY,mCAAoC,KAAMG,EAAAA,cAAoBX,EAAYO,EAAG,KAAMI,EAAAA,cAAoBX,EAAYQ,OAAQ,KAAM,WAAY,kCAAmC,KAAMG,EAAAA,cAAoBX,EAAYI,GAAI,KAAM,KAAMO,EAAAA,cAAoBX,EAAYK,GAAI,KAAM,KAAMM,EAAAA,cAAoBX,EAAYO,EAAG,KAAM,6CAA8C,MAAO,KAAMI,EAAAA,cAAoBX,EAAYK,GAAI,KAAM,KAAMM,EAAAA,cAAoBX,EAAYO,EAAG,KAAM,mEAAoE,MAAO,KAAMI,EAAAA,cAAoBX,EAAYK,GAAI,KAAM,KAAMM,EAAAA,cAAoBX,EAAYO,EAAG,KAAM,mEAAoE,MAAO,KAAMI,EAAAA,cAAoBX,EAAYK,GAAI,KAAM,KAAMM,EAAAA,cAAoBX,EAAYO,EAAG,KAAM,0GAA2G,MAAO,KAAMI,EAAAA,cAAoBX,EAAYK,GAAI,KAAM,KAAMM,EAAAA,cAAoBX,EAAYO,EAAG,KAAM,gHAAiH,MAAO,KAAMI,EAAAA,cAAoBX,EAAYK,GAAI,KAAM,KAAMM,EAAAA,cAAoBX,EAAYO,EAAG,KAAM,8JAA+J,MAAO,KAAMI,EAAAA,cAAoBX,EAAYK,GAAI,KAAM,KAAMM,EAAAA,cAAoBX,EAAYO,EAAG,KAAM,8HAA+H,MAAO,KAAMI,EAAAA,cAAoBX,EAAYK,GAAI,KAAM,KAAMM,EAAAA,cAAoBX,EAAYO,EAAG,KAAMI,EAAAA,cAAoBX,EAAYM,EAAG,CACrtEM,KAAM,+CACL,gCAAiC,MAAO,MAC7C,CAKA,UAJA,SAAoBb,QAAK,IAALA,IAAAA,EAAQ,CAAC,GAC3B,MAAOc,QAASC,GAAab,OAAOC,OAAO,CAAC,GAAGO,EAAAA,EAAAA,MAAsBV,EAAMW,YAC3E,OAAOI,EAAYH,EAAAA,cAAoBG,EAAWf,EAAOY,EAAAA,cAAoBb,EAAmBC,IAAUD,EAAkBC,EAC9H,C,sECYO,MAAMgB,EAAa,gBAAoB,CAAC,GAiCxC,SAASC,EAAiBN,GAC/B,MAAMO,EAAoB,aAAiBF,GAG3C,OAAO,WAAc,IAEO,mBAAfL,EACFA,EAAWO,GAGb,IAAIA,KAAsBP,IAChC,CAACO,EAAmBP,GACzB,C","sources":["webpack://gatsby-portfolio-site-example/./src/posts/learning/crypto.mdx","webpack://gatsby-portfolio-site-example/./node_modules/@mdx-js/react/lib/index.js"],"sourcesContent":["/*@jsxRuntime classic @jsx React.createElement @jsxFrag React.Fragment*/\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport React from \"react\";\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h2: \"h2\",\n    ul: \"ul\",\n    li: \"li\",\n    a: \"a\",\n    p: \"p\",\n    strong: \"strong\"\n  }, _provideComponents(), props.components);\n  return React.createElement(React.Fragment, null, React.createElement(_components.h2, null, \"Good articles to read about crypto\"), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, React.createElement(_components.a, {\n    href: \"https://www.youtube.com/watch?v=SSo_EIwHSd4\"\n  }, \"How does a blockchain work - Simply Explained\")), \"\\n\"), \"\\n\", React.createElement(_components.p, null, \"Good intro, but a lot of things are too high level. Not enough explanation in Proof-of-work.\"), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.strong, null, \"Block 1 (Genesis Block)\"), \"\\nHash: aaa\\nPrevious Hash: 000 (no hash because this is genesis block)\"), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.strong, null, \"Block 2\"), \"\\nHash: bbb\\nPrevious Hash: aaa\"), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.strong, null, \"Block 3\"), \"\\nHash ccc\\nPrevious Hash: bbb\"), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, \"\\n\", React.createElement(_components.p, null, \"Hash is like a finger print. It's unique.\"), \"\\n\"), \"\\n\", React.createElement(_components.li, null, \"\\n\", React.createElement(_components.p, null, \"When the new block is created, it validates the previous block.\"), \"\\n\"), \"\\n\", React.createElement(_components.li, null, \"\\n\", React.createElement(_components.p, null, \"Changing a single block will make all following blocks invalid.\"), \"\\n\"), \"\\n\", React.createElement(_components.li, null, \"\\n\", React.createElement(_components.p, null, \"We could tamper with a block and recalculate all the hashes of other blocks to make block chain valid.\"), \"\\n\"), \"\\n\", React.createElement(_components.li, null, \"\\n\", React.createElement(_components.p, null, \"Proof-of-work: A mechanism to slow down the creation of new blocks. Bitcoin takes about 10 minutes to do it.\"), \"\\n\"), \"\\n\", React.createElement(_components.li, null, \"\\n\", React.createElement(_components.p, null, \"When the block is created, it's sent to other nodes and all the nodes try to validate it.\\nWhen the consensus is reached, the block is added to the chain.\"), \"\\n\"), \"\\n\", React.createElement(_components.li, null, \"\\n\", React.createElement(_components.p, null, \"Smart contract is a program stored in blockchain that can be used automatically exchange coins based on certain condition.\"), \"\\n\"), \"\\n\", React.createElement(_components.li, null, \"\\n\", React.createElement(_components.p, null, React.createElement(_components.a, {\n    href: \"https://www.youtube.com/watch?v=zVqczFZr124\"\n  }, \"Create a blockchain with JS\")), \"\\n\"), \"\\n\"));\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? React.createElement(MDXLayout, props, React.createElement(_createMdxContent, props)) : _createMdxContent(props);\n}\nexport default MDXContent;\n","/**\n * @typedef {import('react').ReactNode} ReactNode\n * @typedef {import('mdx/types.js').MDXComponents} Components\n *\n * @typedef Props\n *   Configuration.\n * @property {Components | MergeComponents | null | undefined} [components]\n *   Mapping of names for JSX components to React components.\n * @property {boolean | null | undefined} [disableParentContext=false]\n *   Turn off outer component context.\n * @property {ReactNode | null | undefined} [children]\n *   Children.\n *\n * @callback MergeComponents\n *   Custom merge function.\n * @param {Components} currentComponents\n *   Current components from the context.\n * @returns {Components}\n *   Merged components.\n */\n\nimport React from 'react'\n\n/**\n * @type {import('react').Context<Components>}\n * @deprecated\n *   This export is marked as a legacy feature.\n *   That means it’s no longer recommended for use as it might be removed\n *   in a future major release.\n *\n *   Please use `useMDXComponents` to get context based components and\n *   `MDXProvider` to set context based components instead.\n */\nexport const MDXContext = React.createContext({})\n\n/**\n * @param {import('react').ComponentType<any>} Component\n * @deprecated\n *   This export is marked as a legacy feature.\n *   That means it’s no longer recommended for use as it might be removed\n *   in a future major release.\n *\n *   Please use `useMDXComponents` to get context based components instead.\n */\nexport function withMDXComponents(Component) {\n  return boundMDXComponent\n\n  /**\n   * @param {Record<string, unknown> & {components?: Components | null | undefined}} props\n   * @returns {JSX.Element}\n   */\n  function boundMDXComponent(props) {\n    const allComponents = useMDXComponents(props.components)\n    return React.createElement(Component, {...props, allComponents})\n  }\n}\n\n/**\n * Get current components from the MDX Context.\n *\n * @param {Components | MergeComponents | null | undefined} [components]\n *   Additional components to use or a function that takes the current\n *   components and filters/merges/changes them.\n * @returns {Components}\n *   Current components.\n */\nexport function useMDXComponents(components) {\n  const contextComponents = React.useContext(MDXContext)\n\n  // Memoize to avoid unnecessary top-level context changes\n  return React.useMemo(() => {\n    // Custom merge via a function prop\n    if (typeof components === 'function') {\n      return components(contextComponents)\n    }\n\n    return {...contextComponents, ...components}\n  }, [contextComponents, components])\n}\n\n/** @type {Components} */\nconst emptyObject = {}\n\n/**\n * Provider for MDX context\n *\n * @param {Props} props\n * @returns {JSX.Element}\n */\nexport function MDXProvider({components, children, disableParentContext}) {\n  /** @type {Components} */\n  let allComponents\n\n  if (disableParentContext) {\n    allComponents =\n      typeof components === 'function'\n        ? components({})\n        : components || emptyObject\n  } else {\n    allComponents = useMDXComponents(components)\n  }\n\n  return React.createElement(\n    MDXContext.Provider,\n    {value: allComponents},\n    children\n  )\n}\n"],"names":["_createMdxContent","props","_components","Object","assign","h2","ul","li","a","p","strong","_provideComponents","components","React","href","wrapper","MDXLayout","MDXContext","useMDXComponents","contextComponents"],"sourceRoot":""}